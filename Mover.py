
#!/usr/bin/python
# -*- coding: utf-8 -*-
#****************************************************************************
#*                                                                          *
#*  Copyright (c) 2017                                                      *
#*  Maurice easyw@katamail.com                                              *
#*                                                                          *
#*   code partially based on:                                               *
#*                                                                          *
# evolution of Macro_CenterFace                                             *
# some part of Macro WorkFeature                                            *
# and Macro Rotate To Point                                                 *
# and assembly2                                                             *
#                                                                           *
# Move objs along obj face Normal or edge                                   *
#                                                                           *
#  (C) Maurice easyw-fc 2016                                                *
#    This program is free software; you can redistribute it and/or modify   *
#    it under the terms of the GNU Library General Public License (LGPL)    *
#    as published by the Free Software Foundation; either version 2 of      *
#    the License, or (at your option) any later version.                    *
#    for detail see the LICENCE text file.                                  *
#****************************************************************************


__title__   = "Mover of Parts"
__author__  = "maurice"
__url__     = "kicad stepup"
__version__ = "1.5.1" #Manipulator for Parts
__date__    = "08.2018"

testing=False #true for showing helpers
testing2=False #true for showing helpers

## todo
#  better Gui with icons
##  ##App::Part hierarchical objects & Bodys on FC 0.17
##


## import statements

import FreeCAD, FreeCADGui, Draft, Part, DraftTools, DraftVecUtils
from FreeCAD import Base
import sys, math
from PySide import QtCore, QtGui
from pivy import coin
from PySide.QtCore import QT_TRANSLATE_NOOP

ninst = 0

##--------------------------------------------------------------------------------------

def a_clear_console():
    #clearing previous messages
    mw=FreeCADGui.getMainWindow()
    c=mw.findChild(QtGui.QPlainTextEdit, "Python console")
    c.clear()
    r=mw.findChild(QtGui.QTextEdit, "Report view")
    r.clear()

#if not Mod_ENABLED:
a_clear_console()

from sys import platform as _platform

# window GUI dimensions parameters
wdszX=304;wdszY=256
# window GUI dimensions parameters
##Aligner size
wdzX=342;wdzY=256
if _platform == "linux" or _platform == "linux2":
   # linux
   pt_lnx=True
   sizeXmin=128;sizeYmin=34+34
   sizeX=wdszX;sizeY=wdszY-22+34 #516 #536
   sizeXright=172;sizeYright=536 #556
else:
    sizeXmin=128;sizeYmin=34
    sizeX=wdszX;sizeY=wdszY-22 #482#502
    sizeXright=172;sizeYright=502#522
if _platform == "darwin":
    pt_osx=True
##   # MAC OS X
##elif _platform == "win32":
##   # Windows
#sizeXmin=172;sizeYmin=30+34
sizeXMax=487 #487
btn_sizeX=32;btn_sizeY=32;
chkb_sizeX=20;chkb_sizeY=20;
btn_sm_sizeX=20;btn_sm_sizeY=20;
btn_md_sizeX=26;btn_md_sizeY=26;

Max_move=999.0
Max_angle=360.0
Step_initial_angle=15.0

def close_mover():
    global sO
    #def closeEvent(self, e):
    try:
        FreeCADGui.Selection.removeObserver(sO)   # desinstalle la fonction residente SelObserver
        sayw('observer removed')
        MVDockWidget.deleteLater()
    except:
        sayerr('not able to remove observer')
        MVDockWidget.deleteLater()
        pass
    #MVDockWidget.close()
    #self.setWindowState(QtCore.Qt.WindowActive)
    doc=FreeCAD.ActiveDocument
    if doc is not None:
        FreeCAD.setActiveDocument(doc.Name)
    #FreeCAD.ActiveDocument=FreeCAD.getDocument(doc.Label)
    #FreeCADGui.ActiveDocument=FreeCADGui.getDocument(doc.Label)

def Mv_undock():
    MVDockWidget.setFloating(True)  #undock
    MVDockWidget.resize(sizeX,sizeY)
    MVDockWidget.activateWindow()
    MVDockWidget.raise_()
    #AlgWidget.resize(QtCore.QSize(300,100).expandedTo(AlgWidget.maximumSize())) # sets size of the widget
    #AlgWidget.setFloating(False)  #dock
    #say ("now!")

def Mv_minimz():
    #clear_console()
    MVDockWidget.setFloating(True)  #undock
    # AlgWidget.hide();
    # AlgWidget.setWindowState(QtCore.Qt.WindowMinimized)
    #AlgWidget.resize(500, 500)
    MVDockWidget.resize(sizeXmin,sizeYmin)
    MVDockWidget.activateWindow()
    MVDockWidget.raise_()
##

def recurse_node(obj,plcm,scl):
    sayerr(obj.Name)
    if "App::Part" in obj.TypeId or "Body" in obj.TypeId or "Compound" in obj.TypeId:
        for o in obj.Group:
            #sayerr(o.Name)
            if "App::Part" in o.TypeId  or "Body" in o.TypeId or "Compound" in o.TypeId:
                #sayerr(o.Name)#+" * "+obj.Name)
                new_plcm=get_node_plc(o,obj)
                recurse_node(o,new_plcm,scl)
            else:
                if "Sketcher" not in o.TypeId:
                    simple_cpy_plc(o,plcm)
                    scl.append(FreeCAD.ActiveDocument.ActiveObject)
##

def get_top_level (obj):
    lvl=10000
    top=None
    if hasattr(obj,'InListRecursive'):
        for ap in obj.InListRecursive:
            if hasattr(ap,'Placement'):
                if len(ap.InListRecursive) < lvl:
                    top = ap
                    lvl = len(ap.InListRecursive)
            #else:
            #    sayerr(obj.Label)
        #top = obj
    return top
##

def get_sorted_list (obj):
    lvl=10000
    completed=0
    listUs=obj.InListRecursive
    #sayerr('unsorted')
    #for p in listUs:
    #    print p.Label
    listUsName=[]
    for o in obj.InListRecursive:
        listUsName.append(o.Name)
    listS=[]
    i=0
    #for i, ap in enumerate(listUs):
    #    top=ap
    #    if len(ap.InListRecursive) < lvl:
    #        lvl = len(ap.InListRecursive)
    #    for ap2 in listUs[(i + 1):]:
    #        if len(ap2.InListRecursive) < lvl:
    #            top = ap2
    #            lvl = len(ap2.InListRecursive)
    #    listS.append(top)
    sayw(listUsName)
    i=0
    while len (listUsName) > 0:
        for apName in listUsName:
            #apName=listUsName[i]
            ap=FreeCAD.ActiveDocument.getObject(apName)
            if len(ap.InListRecursive) < lvl:
                lvl = len(ap.InListRecursive)
                top = ap
                topName = ap.Name
        listS.append(top)
        #print topName
        idx=listUsName.index(topName)
        #sayw(idx)
        listUsName.pop(idx)
        lvl=10000
        #sayerr(listUsName)

    return listS
##

def get_normal_placement_hierarchy (sel0):
    """get normal at face and placement relative to hierarchy
       of first selection object/face
       return normal, placement, topObj, bbox center absolute"""

    global use_hierarchy
    import Draft
    from FreeCAD import Base


    Obj=sel0.Object
    subObj=sel0.SubObjects[0]
    edge_op=0

    top_level_obj = get_top_level(Obj)
    if top_level_obj is not None: #hierarchy object
        say('Hierarchy obj')

        pad=0
        open_circle=False
        if 'Face' in str(subObj):
            say('Hierarchy obj Face')
            pad=0 #face
        elif 'Edge' in str(subObj):
            wire = Part.Wire(subObj)
            if subObj.isClosed():
                subObj = Part.Face(wire)
            else:
                sayerr(str(subObj.Curve))
                if 'Circle' in str(subObj.Curve):
                    sayerr('Circle radius '+str(subObj.Curve.Radius))
                    #f1=subObj.Shape.Faces[0]

                    wf = Part.Face(Part.Wire(subObj))
                    Part.show(wf)
                    wf_name=FreeCAD.ActiveDocument.ActiveObject.Name

                    dir=wf.normalAt(0,0)
                    # ccircle = Part.makeCircle(r, Base.Vector(cnt), Base.Vector(dir))
                    # > Circle (Radius : 10, Position : (10, 0, 0), Direction : (1, 0, 0))
                    ccircle = Part.makeCircle(subObj.Curve.Radius, Base.Vector(subObj.Curve.Center), Base.Vector(dir))
                    #ccircle_face = Part.Face(ccircle)
                    #Part.show(ccircle_face)
                    #ccircle_face_name=FreeCAD.ActiveDocument.ActiveObject.Name
                    #FreeCAD.ActiveDocument.getObject(ccircle_face_name).Label='ccircle_face'
                    Part.show(ccircle)
                    ccircle_name=FreeCAD.ActiveDocument.ActiveObject.Name
                    FreeCAD.ActiveDocument.getObject(ccircle_name).Label='ccircle'
                    f2=Part.Face(Part.Wire((FreeCAD.ActiveDocument.getObject(ccircle_name).Shape.Edges[0])))
                    Part.show(f2)
                    f2_name=FreeCAD.ActiveDocument.ActiveObject.Name
                    FreeCAD.ActiveDocument.removeObject(ccircle_name)
                    FreeCAD.ActiveDocument.removeObject(wf_name)
                    # ccircle.Curve
                    # > Circle (Radius : 10, Position : (10, 0, 0), Direction : (1, 0, 0))
                    bbxCenter = subObj.Curve.Center

                    norm = f2.normalAt(0,0)
                    subObj = f2
                    FreeCAD.ActiveDocument.removeObject(f2_name)
                    #PC1=Draft.makePoint(subObj.Curve.Center)
                    #w.close
                    open_circle=True
                else:
                    subObj = wire
                #subObj = wire
                edge_op=1
            pad=1 #edge
        if use_hierarchy:
            nwshp = subObj.copy()
            pOriginal=subObj.Placement
            p0 =  FreeCAD.Placement (FreeCAD.Vector(0,0,0), FreeCAD.Rotation(0,0,0), FreeCAD.Vector(0,0,0))
            nwshp.Placement=p0
            r=[]
            t=nwshp.copy()
            #resetting Placement
            for i in t.childShapes():
                c=i.copy()
                c.Placement=t.Placement.multiply(c.Placement)
                r.append((i,c))
            acpy=t.replaceShape(r)
            acpy.Placement=FreeCAD.Placement()
            if hasattr(Obj,'InListRecursive'):
                lrl=len(Obj.InListRecursive)
                for o_ in Obj.InListRecursive:
                    say(o_.Name)
                if len(Obj.InList):
                    top_level_obj = get_top_level(Obj)
                    #sayerr(top_level_obj[j].Label)
                    listSorted=get_sorted_list (Obj)
                    #for p in listSorted:
                    #    print p.Name
                    #print listSorted, ' Sorted; Top ', top_level_obj[j]
                    #stop
                    for i in range (0,lrl):
                        if hasattr(listSorted[i],'Placement'):
                            #if 'Plane' not in ob.InListRecursive[i].TypeId:
                            if listSorted[i].hasExtension("App::GeoFeatureGroupExtension"):
                                acpy.Placement=acpy.Placement.multiply(listSorted[i].Placement)
            say(acpy.Placement)
            #acpy.Placement=acpy.Placement.multiply(pOriginal)
            #acpy.Placement=acpy.Placement.multiply(pOriginal)
            if pad == 0: #note making wire from edge already resets the original placement
                acpy.Placement=acpy.Placement.multiply(pOriginal)
            nwshp.Placement = acpy.Placement
            if open_circle==True:
                nwnorm = nwshp.normalAt(0,0)
            elif edge_op==1:
                nwnorm = (nwshp.Vertex2.Point - nwshp.Vertex1.Point).normalize()
            else:
                nwnorm = nwshp.normalAt(0,0)
            bbxCenter = nwshp.BoundBox.Center
        else:
            nwshp = subObj.copy()
            if open_circle==True:
                nwnorm = nwshp.normalAt(0,0)
            elif edge_op==1:
                nwnorm = (subObj.Vertex2.Point - subObj.Vertex1.Point).normalize()
            else:
                nwnorm = nwshp.normalAt(0,0)
            bbxCenter = nwshp.BoundBox.Center

        return nwnorm, nwshp.Placement, top_level_obj, bbxCenter

    elif 'Face' in str(subObj) or 'Edge' in str(subObj): # not in hierarchy
        say('Part obj')
        pad=0 #face
        open_circle=False
        if 'Edge' in str(subObj):
            wire = Part.Wire(subObj)
            if subObj.isClosed():
                subObj = Part.Face(wire)
                norm = subObj.normalAt(0,0)
                bbxCenter = subObj.BoundBox.Center
            else:
                sayerr(str(subObj.Curve))
                if 'Circle' in str(subObj.Curve):
                    sayerr('Circle radius '+str(subObj.Curve.Radius))
                    #f1=subObj.Shape.Faces[0]

                    wf = Part.Face(Part.Wire(subObj))
                    Part.show(wf)
                    wf_name=FreeCAD.ActiveDocument.ActiveObject.Name

                    dir=wf.normalAt(0,0)
                    # ccircle = Part.makeCircle(r, Base.Vector(cnt), Base.Vector(dir))
                    # > Circle (Radius : 10, Position : (10, 0, 0), Direction : (1, 0, 0))
                    ccircle = Part.makeCircle(subObj.Curve.Radius, Base.Vector(subObj.Curve.Center), Base.Vector(dir))
                    #ccircle_face = Part.Face(ccircle)
                    #Part.show(ccircle_face)
                    #ccircle_face_name=FreeCAD.ActiveDocument.ActiveObject.Name
                    #FreeCAD.ActiveDocument.getObject(ccircle_face_name).Label='ccircle_face'
                    Part.show(ccircle)
                    ccircle_name=FreeCAD.ActiveDocument.ActiveObject.Name
                    FreeCAD.ActiveDocument.getObject(ccircle_name).Label='ccircle'
                    f2=Part.Face(Part.Wire((FreeCAD.ActiveDocument.getObject(ccircle_name).Shape.Edges[0])))
                    Part.show(f2)
                    f2_name=FreeCAD.ActiveDocument.ActiveObject.Name
                    FreeCAD.ActiveDocument.removeObject(ccircle_name)
                    FreeCAD.ActiveDocument.removeObject(wf_name)
                    # ccircle.Curve
                    # > Circle (Radius : 10, Position : (10, 0, 0), Direction : (1, 0, 0))
                    bbxCenter = subObj.Curve.Center

                    norm = f2.normalAt(0,0)
                    #subObj = f2
                    FreeCAD.ActiveDocument.removeObject(f2_name)
                    #PC1=Draft.makePoint(subObj.Curve.Center)
                    #w.close
                else:
                    norm = (subObj.Vertex2.Point - subObj.Vertex1.Point).normalize()
                    bbxCenter = subObj.BoundBox.Center
            pad=1 #edge
        else:
            norm = subObj.normalAt(0,0)
            bbxCenter = subObj.BoundBox.Center
        top_level_obj=None
        #sayerr(str(norm)+str(Obj.Placement)+str(bbxCenter)+str(top_level_obj))

        return norm, Obj.Placement, top_level_obj, bbxCenter

##

####################################
# embedded button images
import base64
# "b64_data" is a variable containing your base64 encoded jpeg

closeW_b64=\
"""
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhLS0gQ3JlYXRlZCB3aXRoIElua3NjYXBlIChodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy8pIC0tPgoKPHN2ZwogICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgIHhtbG5zOmNjPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyMiCiAgIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyIKICAgeG1sbnM6c3ZnPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIKICAgeG1sbnM6c29kaXBvZGk9Imh0dHA6Ly9zb2RpcG9kaS5zb3VyY2Vmb3JnZS5uZXQvRFREL3NvZGlwb2RpLTAuZHRkIgogICB4bWxuczppbmtzY2FwZT0iaHR0cDovL3d3dy5pbmtzY2FwZS5vcmcvbmFtZXNwYWNlcy9pbmtzY2FwZSIKICAgd2lkdGg9IjY0IgogICBoZWlnaHQ9IjY0IgogICBpZD0ic3ZnMiIKICAgdmVyc2lvbj0iMS4xIgogICBpbmtzY2FwZTp2ZXJzaW9uPSIwLjQ4LjUgcjEwMDQwIgogICBzb2RpcG9kaTpkb2NuYW1lPSJlZGl0X0NhbmNlbC5zdmciCiAgIHZpZXdCb3g9IjAgMCA2NCA2NCI+CiAgPGRlZnMKICAgICBpZD0iZGVmczQiPgogICAgPGxpbmVhckdyYWRpZW50CiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQzODc5IgogICAgICAgaW5rc2NhcGU6Y29sbGVjdD0iYWx3YXlzIj4KICAgICAgPHN0b3AKICAgICAgICAgaWQ9InN0b3AzODgxIgogICAgICAgICBvZmZzZXQ9IjAiCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiNhNDAwMDA7c3RvcC1vcGFjaXR5OjEiIC8+CiAgICAgIDxzdG9wCiAgICAgICAgIGlkPSJzdG9wMzg4MyIKICAgICAgICAgb2Zmc2V0PSIxIgogICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojZWYyOTI5O3N0b3Atb3BhY2l0eToxIiAvPgogICAgPC9saW5lYXJHcmFkaWVudD4KICAgIDxsaW5lYXJHcmFkaWVudAogICAgICAgaW5rc2NhcGU6Y29sbGVjdD0iYWx3YXlzIgogICAgICAgaWQ9ImxpbmVhckdyYWRpZW50Mzg2OSI+CiAgICAgIDxzdG9wCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiNhNDAwMDA7c3RvcC1vcGFjaXR5OjEiCiAgICAgICAgIG9mZnNldD0iMCIKICAgICAgICAgaWQ9InN0b3AzODcxIiAvPgogICAgICA8c3RvcAogICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojZWYyOTI5O3N0b3Atb3BhY2l0eToxIgogICAgICAgICBvZmZzZXQ9IjEiCiAgICAgICAgIGlkPSJzdG9wMzg3MyIgLz4KICAgIDwvbGluZWFyR3JhZGllbnQ+CiAgICA8bGluZWFyR3JhZGllbnQKICAgICAgIGlua3NjYXBlOmNvbGxlY3Q9ImFsd2F5cyIKICAgICAgIHhsaW5rOmhyZWY9IiNsaW5lYXJHcmFkaWVudDM4NjkiCiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQzODc1IgogICAgICAgeDE9Ii00NSIKICAgICAgIHkxPSIxMDQ0LjM2MjIiCiAgICAgICB4Mj0iLTU1IgogICAgICAgeTI9Ijk5NC4zNjIxOCIKICAgICAgIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIgogICAgICAgZ3JhZGllbnRUcmFuc2Zvcm09Im1hdHJpeCgwLjg2NjQ3NzI3LDAsMCwwLjg2NjQ3NzM5LDczLjY1MzQwOSwxMzYuMzAzOTEpIiAvPgogICAgPGxpbmVhckdyYWRpZW50CiAgICAgICBpbmtzY2FwZTpjb2xsZWN0PSJhbHdheXMiCiAgICAgICB4bGluazpocmVmPSIjbGluZWFyR3JhZGllbnQzODc5IgogICAgICAgaWQ9ImxpbmVhckdyYWRpZW50Mzg3NyIKICAgICAgIHgxPSItNDUiCiAgICAgICB5MT0iMTA0NC4zNjIyIgogICAgICAgeDI9Ii01NSIKICAgICAgIHkyPSI5OTQuMzYyMTgiCiAgICAgICBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIKICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPSJtYXRyaXgoMC44NjY0NzcyNywwLDAsMC44NjY0NzczOSw3My42NTM0MDksMTM2LjMwMzkxKSIgLz4KICA8L2RlZnM+CiAgPHNvZGlwb2RpOm5hbWVkdmlldwogICAgIGlkPSJiYXNlIgogICAgIHBhZ2Vjb2xvcj0iI2ZmZmZmZiIKICAgICBib3JkZXJjb2xvcj0iIzY2NjY2NiIKICAgICBib3JkZXJvcGFjaXR5PSIxLjAiCiAgICAgaW5rc2NhcGU6cGFnZW9wYWNpdHk9IjAuMCIKICAgICBpbmtzY2FwZTpwYWdlc2hhZG93PSIyIgogICAgIGlua3NjYXBlOnpvb209IjYuNTU3NzM4IgogICAgIGlua3NjYXBlOmN4PSI1MC4yNzE5NTgiCiAgICAgaW5rc2NhcGU6Y3k9IjMyLjkwMDkyNCIKICAgICBpbmtzY2FwZTpkb2N1bWVudC11bml0cz0icHgiCiAgICAgaW5rc2NhcGU6Y3VycmVudC1sYXllcj0ibGF5ZXIxIgogICAgIHNob3dncmlkPSJ0cnVlIgogICAgIGlua3NjYXBlOndpbmRvdy13aWR0aD0iMTU5OCIKICAgICBpbmtzY2FwZTp3aW5kb3ctaGVpZ2h0PSI4MzYiCiAgICAgaW5rc2NhcGU6d2luZG93LXg9IjAiCiAgICAgaW5rc2NhcGU6d2luZG93LXk9IjI3IgogICAgIGlua3NjYXBlOndpbmRvdy1tYXhpbWl6ZWQ9IjAiCiAgICAgaW5rc2NhcGU6c25hcC1nbG9iYWw9InRydWUiCiAgICAgaW5rc2NhcGU6c25hcC1iYm94PSJ0cnVlIgogICAgIGlua3NjYXBlOnNuYXAtbm9kZXM9InRydWUiPgogICAgPGlua3NjYXBlOmdyaWQKICAgICAgIHR5cGU9Inh5Z3JpZCIKICAgICAgIGlkPSJncmlkMTE1MjEiCiAgICAgICBlbXBzcGFjaW5nPSIyIgogICAgICAgZG90dGVkPSJmYWxzZSIKICAgICAgIHZpc2libGU9InRydWUiCiAgICAgICBlbmFibGVkPSJ0cnVlIgogICAgICAgc25hcHZpc2libGVncmlkbGluZXNvbmx5PSJ0cnVlIiAvPgogIDwvc29kaXBvZGk6bmFtZWR2aWV3PgogIDxtZXRhZGF0YQogICAgIGlkPSJtZXRhZGF0YTciPgogICAgPHJkZjpSREY+CiAgICAgIDxjYzpXb3JrCiAgICAgICAgIHJkZjphYm91dD0iIj4KICAgICAgICA8ZGM6Zm9ybWF0PmltYWdlL3N2Zyt4bWw8L2RjOmZvcm1hdD4KICAgICAgICA8ZGM6dHlwZQogICAgICAgICAgIHJkZjpyZXNvdXJjZT0iaHR0cDovL3B1cmwub3JnL2RjL2RjbWl0eXBlL1N0aWxsSW1hZ2UiIC8+CiAgICAgICAgPGRjOnRpdGxlPjwvZGM6dGl0bGU+CiAgICAgIDwvY2M6V29yaz4KICAgIDwvcmRmOlJERj4KICA8L21ldGFkYXRhPgogIDxnCiAgICAgaW5rc2NhcGU6bGFiZWw9IkxheWVyIDEiCiAgICAgaW5rc2NhcGU6Z3JvdXBtb2RlPSJsYXllciIKICAgICBpZD0ibGF5ZXIxIgogICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAsLTk4OC4zNjIxOCkiPgogICAgPHBhdGgKICAgICAgIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOiMyODAwMDA7c3Ryb2tlLXdpZHRoOjE2O3N0cm9rZS1saW5lY2FwOnNxdWFyZTtzdHJva2UtbGluZWpvaW46bWl0ZXI7c3Ryb2tlLW9wYWNpdHk6MSIKICAgICAgIGQ9Im0gMTMsMTAwMS4zNjIyIDM4LjEyNSwzOC4xMjUiCiAgICAgICBpZD0icGF0aDMwMDIiCiAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgc29kaXBvZGk6bm9kZXR5cGVzPSJjYyIgLz4KICAgIDxwYXRoCiAgICAgICBzdHlsZT0iZmlsbDpub25lO3N0cm9rZTojMjgwMDAwO3N0cm9rZS13aWR0aDoxNjtzdHJva2UtbGluZWNhcDpzcXVhcmU7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1vcGFjaXR5OjEiCiAgICAgICBkPSJNIDUxLjEyNSwxMDAxLjM2MjIgMTMsMTAzOS40ODcyIgogICAgICAgaWQ9InBhdGgzMDAyLTYiCiAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgc29kaXBvZGk6bm9kZXR5cGVzPSJjYyIgLz4KICAgIDxwYXRoCiAgICAgICBzdHlsZT0iZmlsbDpub25lO3N0cm9rZTojZWYyOTI5O3N0cm9rZS13aWR0aDoxMjtzdHJva2UtbGluZWNhcDpzcXVhcmU7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1taXRlcmxpbWl0OjQ7c3Ryb2tlLW9wYWNpdHk6MTtzdHJva2UtZGFzaGFycmF5Om5vbmUiCiAgICAgICBkPSJtIDEzLDEwMDEuMzYyMiAzOC4xMjUsMzguMTI1IgogICAgICAgaWQ9InBhdGgzMDAyLTciCiAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgc29kaXBvZGk6bm9kZXR5cGVzPSJjYyIgLz4KICAgIDxwYXRoCiAgICAgICBzdHlsZT0iZmlsbDpub25lO3N0cm9rZTojZWYyOTI5O3N0cm9rZS13aWR0aDoxMjtzdHJva2UtbGluZWNhcDpzcXVhcmU7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1taXRlcmxpbWl0OjQ7c3Ryb2tlLW9wYWNpdHk6MTtzdHJva2UtZGFzaGFycmF5Om5vbmUiCiAgICAgICBkPSJNIDUxLjEyNSwxMDAxLjM2MjIgMTMsMTAzOS40ODcyIgogICAgICAgaWQ9InBhdGgzMDAyLTYtNSIKICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICBzb2RpcG9kaTpub2RldHlwZXM9ImNjIiAvPgogICAgPHBhdGgKICAgICAgIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOnVybCgjbGluZWFyR3JhZGllbnQzODc3KTtzdHJva2Utd2lkdGg6ODtzdHJva2UtbGluZWNhcDpzcXVhcmU7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1taXRlcmxpbWl0OjQ7c3Ryb2tlLW9wYWNpdHk6MTtzdHJva2UtZGFzaGFycmF5Om5vbmUiCiAgICAgICBkPSJtIDEzLDEwMDEuMzYyMiAzOC4xMjUsMzguMTI1IgogICAgICAgaWQ9InBhdGgzMDAyLTctNiIKICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICBzb2RpcG9kaTpub2RldHlwZXM9ImNjIiAvPgogICAgPHBhdGgKICAgICAgIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOnVybCgjbGluZWFyR3JhZGllbnQzODc1KTtzdHJva2Utd2lkdGg6ODtzdHJva2UtbGluZWNhcDpzcXVhcmU7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1taXRlcmxpbWl0OjQ7c3Ryb2tlLW9wYWNpdHk6MTtzdHJva2UtZGFzaGFycmF5Om5vbmUiCiAgICAgICBkPSJNIDUxLjEyNSwxMDAxLjM2MjIgMTMsMTAzOS40ODcyIgogICAgICAgaWQ9InBhdGgzMDAyLTYtNS0yIgogICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICAgIHNvZGlwb2RpOm5vZGV0eXBlcz0iY2MiIC8+CiAgPC9nPgo8L3N2Zz4K
"""
un_dock_b64=\
"""

"""
minimize_b64=\
"""
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhLS0gQ3JlYXRlZCB3aXRoIElua3NjYXBlIChodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy8pIC0tPgoKPHN2ZwogICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgIHhtbG5zOmNjPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyMiCiAgIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyIKICAgeG1sbnM6c3ZnPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICB4bWxuczpzb2RpcG9kaT0iaHR0cDovL3NvZGlwb2RpLnNvdXJjZWZvcmdlLm5ldC9EVEQvc29kaXBvZGktMC5kdGQiCiAgIHhtbG5zOmlua3NjYXBlPSJodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy9uYW1lc3BhY2VzL2lua3NjYXBlIgogICB3aWR0aD0iNjRweCIKICAgaGVpZ2h0PSI2NHB4IgogICBpZD0ic3ZnMjk4NSIKICAgdmVyc2lvbj0iMS4xIgogICBpbmtzY2FwZTp2ZXJzaW9uPSIwLjQ4LjQgcjk5MzkiCiAgIHNvZGlwb2RpOmRvY25hbWU9Im1pbmltaXplLnN2ZyI+CiAgPGRlZnMKICAgICBpZD0iZGVmczI5ODciIC8+CiAgPHNvZGlwb2RpOm5hbWVkdmlldwogICAgIGlkPSJiYXNlIgogICAgIHBhZ2Vjb2xvcj0iI2ZmZmZmZiIKICAgICBib3JkZXJjb2xvcj0iIzY2NjY2NiIKICAgICBib3JkZXJvcGFjaXR5PSIxLjAiCiAgICAgaW5rc2NhcGU6cGFnZW9wYWNpdHk9IjAuMCIKICAgICBpbmtzY2FwZTpwYWdlc2hhZG93PSIyIgogICAgIGlua3NjYXBlOnpvb209IjUuMDk2ODMxMiIKICAgICBpbmtzY2FwZTpjeD0iLTU5Ljk3Mjg4NSIKICAgICBpbmtzY2FwZTpjeT0iMTYuMTkzNDEzIgogICAgIGlua3NjYXBlOmN1cnJlbnQtbGF5ZXI9ImxheWVyMSIKICAgICBzaG93Z3JpZD0idHJ1ZSIKICAgICBpbmtzY2FwZTpkb2N1bWVudC11bml0cz0icHgiCiAgICAgaW5rc2NhcGU6Z3JpZC1iYm94PSJ0cnVlIgogICAgIGlua3NjYXBlOndpbmRvdy13aWR0aD0iMjU2MCIKICAgICBpbmtzY2FwZTp3aW5kb3ctaGVpZ2h0PSIxMzYxIgogICAgIGlua3NjYXBlOndpbmRvdy14PSItOSIKICAgICBpbmtzY2FwZTp3aW5kb3cteT0iLTkiCiAgICAgaW5rc2NhcGU6d2luZG93LW1heGltaXplZD0iMSIKICAgICBpbmtzY2FwZTpzbmFwLWJib3g9InRydWUiCiAgICAgaW5rc2NhcGU6c25hcC1ub2Rlcz0iZmFsc2UiPgogICAgPGlua3NjYXBlOmdyaWQKICAgICAgIHR5cGU9Inh5Z3JpZCIKICAgICAgIGlkPSJncmlkMjk4NyIKICAgICAgIGVtcHNwYWNpbmc9IjIiCiAgICAgICB2aXNpYmxlPSJ0cnVlIgogICAgICAgZW5hYmxlZD0idHJ1ZSIKICAgICAgIHNuYXB2aXNpYmxlZ3JpZGxpbmVzb25seT0idHJ1ZSIgLz4KICA8L3NvZGlwb2RpOm5hbWVkdmlldz4KICA8bWV0YWRhdGEKICAgICBpZD0ibWV0YWRhdGEyOTkwIj4KICAgIDxyZGY6UkRGPgogICAgICA8Y2M6V29yawogICAgICAgICByZGY6YWJvdXQ9IiI+CiAgICAgICAgPGRjOmZvcm1hdD5pbWFnZS9zdmcreG1sPC9kYzpmb3JtYXQ+CiAgICAgICAgPGRjOnR5cGUKICAgICAgICAgICByZGY6cmVzb3VyY2U9Imh0dHA6Ly9wdXJsLm9yZy9kYy9kY21pdHlwZS9TdGlsbEltYWdlIiAvPgogICAgICAgIDxkYzp0aXRsZSAvPgogICAgICAgIDxkYzpjcmVhdG9yPgogICAgICAgICAgPGNjOkFnZW50PgogICAgICAgICAgICA8ZGM6dGl0bGU+W3lvcmlrdmFuaGF2cmVdPC9kYzp0aXRsZT4KICAgICAgICAgIDwvY2M6QWdlbnQ+CiAgICAgICAgPC9kYzpjcmVhdG9yPgogICAgICAgIDxkYzp0aXRsZT5BcmNoX1NlY3Rpb25QbGFuZV9UcmVlPC9kYzp0aXRsZT4KICAgICAgICA8ZGM6ZGF0ZT4yMDExLTEyLTA2PC9kYzpkYXRlPgogICAgICAgIDxkYzpyZWxhdGlvbj5odHRwOi8vd3d3LmZyZWVjYWR3ZWIub3JnL3dpa2kvaW5kZXgucGhwP3RpdGxlPUFydHdvcms8L2RjOnJlbGF0aW9uPgogICAgICAgIDxkYzpwdWJsaXNoZXI+CiAgICAgICAgICA8Y2M6QWdlbnQ+CiAgICAgICAgICAgIDxkYzp0aXRsZT5GcmVlQ0FEPC9kYzp0aXRsZT4KICAgICAgICAgIDwvY2M6QWdlbnQ+CiAgICAgICAgPC9kYzpwdWJsaXNoZXI+CiAgICAgICAgPGRjOmlkZW50aWZpZXI+RnJlZUNBRC9zcmMvTW9kL0FyY2gvUmVzb3VyY2VzL2ljb25zL0FyY2hfU2VjdGlvblBsYW5lX1RyZWUuc3ZnPC9kYzppZGVudGlmaWVyPgogICAgICAgIDxkYzpyaWdodHM+CiAgICAgICAgICA8Y2M6QWdlbnQ+CiAgICAgICAgICAgIDxkYzp0aXRsZT5GcmVlQ0FEIExHUEwyKzwvZGM6dGl0bGU+CiAgICAgICAgICA8L2NjOkFnZW50PgogICAgICAgIDwvZGM6cmlnaHRzPgogICAgICAgIDxjYzpsaWNlbnNlPmh0dHBzOi8vd3d3LmdudS5vcmcvY29weWxlZnQvbGVzc2VyLmh0bWw8L2NjOmxpY2Vuc2U+CiAgICAgICAgPGRjOmNvbnRyaWJ1dG9yPgogICAgICAgICAgPGNjOkFnZW50PgogICAgICAgICAgICA8ZGM6dGl0bGU+W2Fncnlzb25dIEFsZXhhbmRlciBHcnlzb248L2RjOnRpdGxlPgogICAgICAgICAgPC9jYzpBZ2VudD4KICAgICAgICA8L2RjOmNvbnRyaWJ1dG9yPgogICAgICA8L2NjOldvcms+CiAgICA8L3JkZjpSREY+CiAgPC9tZXRhZGF0YT4KICA8ZwogICAgIGlkPSJsYXllcjEiCiAgICAgaW5rc2NhcGU6bGFiZWw9IkxheWVyIDEiCiAgICAgaW5rc2NhcGU6Z3JvdXBtb2RlPSJsYXllciI+CiAgICA8cGF0aAogICAgICAgc29kaXBvZGk6dHlwZT0ic3RhciIKICAgICAgIHN0eWxlPSJjb2xvcjojMDAwMDAwO2ZpbGw6Izk5OTk5OTtmaWxsLW9wYWNpdHk6MTtmaWxsLXJ1bGU6bm9uemVybztzdHJva2U6IzRkNGQ0ZDtzdHJva2Utd2lkdGg6MS41NzQ4ODIyNztzdHJva2UtbGluZWNhcDpidXR0O3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDo0O3N0cm9rZS1vcGFjaXR5OjE7c3Ryb2tlLWRhc2hhcnJheTpub25lO3N0cm9rZS1kYXNob2Zmc2V0OjA7bWFya2VyOm5vbmU7dmlzaWJpbGl0eTp2aXNpYmxlO2Rpc3BsYXk6aW5saW5lO292ZXJmbG93OnZpc2libGU7ZW5hYmxlLWJhY2tncm91bmQ6YWNjdW11bGF0ZSIKICAgICAgIGlkPSJwYXRoMjk5NyIKICAgICAgIHNvZGlwb2RpOnNpZGVzPSIzIgogICAgICAgc29kaXBvZGk6Y3g9IjIyIgogICAgICAgc29kaXBvZGk6Y3k9IjE3LjA5MDkwOCIKICAgICAgIHNvZGlwb2RpOnIxPSIyMC40MzI1MTIiCiAgICAgICBzb2RpcG9kaTpyMj0iMTAuMjE2MjU3IgogICAgICAgc29kaXBvZGk6YXJnMT0iMi4wOTQzOTUxIgogICAgICAgc29kaXBvZGk6YXJnMj0iMy4xNDE1OTI3IgogICAgICAgaW5rc2NhcGU6ZmxhdHNpZGVkPSJ0cnVlIgogICAgICAgaW5rc2NhcGU6cm91bmRlZD0iMCIKICAgICAgIGlua3NjYXBlOnJhbmRvbWl6ZWQ9IjAiCiAgICAgICBkPSJtIDExLjc4Mzc0NCwzNC43ODU5ODMgMCwtMzUuMzkwMTQ5NjMgMzAuNjQ4NzY4LDE3LjY5NTA3NDYzIHoiCiAgICAgICB0cmFuc2Zvcm09Im1hdHJpeCgwLDAuNTk3OTI3MDMsMS4xNDcyNDA3LDAsMTIuMzkyNjE0LDIxLjYwNjM2NCkiCiAgICAgICBpbmtzY2FwZTp0cmFuc2Zvcm0tY2VudGVyLXk9IjMuMDU0Mjg1NyIgLz4KICA8L2c+Cjwvc3ZnPgo=
"""
X_b64=\
"""

"""
Y_b64=\
"""

"""
Z_b64=\
"""

"""
Rotate_Axis_b64=\
"""

"""
Undo_b64=\
"""

"""
Move_purple_b64=\
"""

"""
help_b64=\
"""
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhLS0gQ3JlYXRlZCB3aXRoIElua3NjYXBlIChodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy8pIC0tPgoKPHN2ZwogICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgIHhtbG5zOmNjPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyMiCiAgIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyIKICAgeG1sbnM6c3ZnPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIKICAgeG1sbnM6c29kaXBvZGk9Imh0dHA6Ly9zb2RpcG9kaS5zb3VyY2Vmb3JnZS5uZXQvRFREL3NvZGlwb2RpLTAuZHRkIgogICB4bWxuczppbmtzY2FwZT0iaHR0cDovL3d3dy5pbmtzY2FwZS5vcmcvbmFtZXNwYWNlcy9pbmtzY2FwZSIKICAgd2lkdGg9IjY0IgogICBoZWlnaHQ9IjY0IgogICBpZD0ic3ZnNjM2MSIKICAgc29kaXBvZGk6dmVyc2lvbj0iMC4zMiIKICAgaW5rc2NhcGU6dmVyc2lvbj0iMC40OC41IHIxMDA0MCIKICAgc29kaXBvZGk6ZG9jbmFtZT0iaGVscC1icm93c2VyLnN2ZyIKICAgaW5rc2NhcGU6b3V0cHV0X2V4dGVuc2lvbj0ib3JnLmlua3NjYXBlLm91dHB1dC5zdmcuaW5rc2NhcGUiCiAgIHZlcnNpb249IjEuMSI+CiAgPGRlZnMKICAgICBpZD0iZGVmczMiPgogICAgPGxpbmVhckdyYWRpZW50CiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQyNDMxIj4KICAgICAgPHN0b3AKICAgICAgICAgc3R5bGU9InN0b3AtY29sb3I6I2ZmZmZmZjtzdG9wLW9wYWNpdHk6MTsiCiAgICAgICAgIG9mZnNldD0iMCIKICAgICAgICAgaWQ9InN0b3AyNDMzIiAvPgogICAgICA8c3RvcAogICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojYjhiOGI4O3N0b3Atb3BhY2l0eToxOyIKICAgICAgICAgb2Zmc2V0PSIxIgogICAgICAgICBpZD0ic3RvcDI0MzUiIC8+CiAgICA8L2xpbmVhckdyYWRpZW50PgogICAgPGxpbmVhckdyYWRpZW50CiAgICAgICBpbmtzY2FwZTpjb2xsZWN0PSJhbHdheXMiCiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQyMTY0NCI+CiAgICAgIDxzdG9wCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiMwMDAwMDA7c3RvcC1vcGFjaXR5OjE7IgogICAgICAgICBvZmZzZXQ9IjAiCiAgICAgICAgIGlkPSJzdG9wMjE2NDYiIC8+CiAgICAgIDxzdG9wCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiMwMDAwMDA7c3RvcC1vcGFjaXR5OjA7IgogICAgICAgICBvZmZzZXQ9IjEiCiAgICAgICAgIGlkPSJzdG9wMjE2NDgiIC8+CiAgICA8L2xpbmVhckdyYWRpZW50PgogICAgPHJhZGlhbEdyYWRpZW50CiAgICAgICBpbmtzY2FwZTpjb2xsZWN0PSJhbHdheXMiCiAgICAgICB4bGluazpocmVmPSIjbGluZWFyR3JhZGllbnQyMTY0NCIKICAgICAgIGlkPSJyYWRpYWxHcmFkaWVudDIxNjUwIgogICAgICAgY3g9IjI1LjEyNSIKICAgICAgIGN5PSIzNi43NSIKICAgICAgIGZ4PSIyNS4xMjUiCiAgICAgICBmeT0iMzYuNzUiCiAgICAgICByPSIxNS43NSIKICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPSJtYXRyaXgoMSwwLDAsMC41OTUyMzgsMCwxNC44NzUpIgogICAgICAgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiIC8+CiAgICA8bGluZWFyR3JhZGllbnQKICAgICAgIGlkPSJsaW5lYXJHcmFkaWVudDI5MzMiPgogICAgICA8c3RvcAogICAgICAgICBpZD0ic3RvcDI5MzUiCiAgICAgICAgIG9mZnNldD0iMCIKICAgICAgICAgc3R5bGU9InN0b3AtY29sb3I6IzljYmNkZTtzdG9wLW9wYWNpdHk6MSIgLz4KICAgICAgPHN0b3AKICAgICAgICAgaWQ9InN0b3AyOTM3IgogICAgICAgICBvZmZzZXQ9IjEiCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiMyMDRhODciIC8+CiAgICA8L2xpbmVhckdyYWRpZW50PgogICAgPHJhZGlhbEdyYWRpZW50CiAgICAgICBpbmtzY2FwZTpjb2xsZWN0PSJhbHdheXMiCiAgICAgICB4bGluazpocmVmPSIjbGluZWFyR3JhZGllbnQyOTMzIgogICAgICAgaWQ9InJhZGlhbEdyYWRpZW50MjIwNyIKICAgICAgIGN4PSIyNi41NDQzMjEiCiAgICAgICBjeT0iMjguNDU4NzI1IgogICAgICAgZng9IjI2LjU0NDMyMSIKICAgICAgIGZ5PSIyOC40NTg3MjUiCiAgICAgICByPSIyMi4zNzYxMTYiCiAgICAgICBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIKICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPSJtYXRyaXgoMS4yMzgzNDIsMC4wMDU5NTQ4NSwtMC4wMDY1MDc3NiwxLjM1MTI3MiwtNi45OTI1MTMsLTkuNzQ0ODQyKSIgLz4KICAgIDxyYWRpYWxHcmFkaWVudAogICAgICAgaW5rc2NhcGU6Y29sbGVjdD0iYWx3YXlzIgogICAgICAgeGxpbms6aHJlZj0iI2xpbmVhckdyYWRpZW50MjQzMSIKICAgICAgIGlkPSJyYWRpYWxHcmFkaWVudDI0MzciCiAgICAgICBjeD0iLTE5LjUxNTYzOCIKICAgICAgIGN5PSIxNi44NTU2NjMiCiAgICAgICBmeD0iLTE5LjUxNTYzOCIKICAgICAgIGZ5PSIxNi44NTU2NjMiCiAgICAgICByPSI4Ljc1MzY0MyIKICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPSJtYXRyaXgoNC40NDU5OTEsMCwwLDYuODY2NSw2Ny4yNTA3MSwtMTA0LjY2NzkpIgogICAgICAgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiIC8+CiAgICA8bGluZWFyR3JhZGllbnQKICAgICAgIGlua3NjYXBlOmNvbGxlY3Q9ImFsd2F5cyIKICAgICAgIHhsaW5rOmhyZWY9IiNsaW5lYXJHcmFkaWVudDM3ODAiCiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQzNzg2IgogICAgICAgeDE9IjQxLjY0Mjg1NyIKICAgICAgIHkxPSI1OC43ODU3MTMiCiAgICAgICB4Mj0iMjIuMzU3MTQzIgogICAgICAgeTI9IjcuMzU3MTQyOSIKICAgICAgIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIiAvPgogICAgPGxpbmVhckdyYWRpZW50CiAgICAgICBpbmtzY2FwZTpjb2xsZWN0PSJhbHdheXMiCiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQzNzgwIj4KICAgICAgPHN0b3AKICAgICAgICAgc3R5bGU9InN0b3AtY29sb3I6IzM0NjVhNDtzdG9wLW9wYWNpdHk6MSIKICAgICAgICAgb2Zmc2V0PSIwIgogICAgICAgICBpZD0ic3RvcDM3ODIiIC8+CiAgICAgIDxzdG9wCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiM3MjlmY2Y7c3RvcC1vcGFjaXR5OjA7IgogICAgICAgICBvZmZzZXQ9IjEiCiAgICAgICAgIGlkPSJzdG9wMzc4NCIgLz4KICAgIDwvbGluZWFyR3JhZGllbnQ+CiAgPC9kZWZzPgogIDxzb2RpcG9kaTpuYW1lZHZpZXcKICAgICBpbmtzY2FwZTpndWlkZS1iYm94PSJ0cnVlIgogICAgIHNob3dndWlkZXM9InRydWUiCiAgICAgaWQ9ImJhc2UiCiAgICAgcGFnZWNvbG9yPSIjZmZmZmZmIgogICAgIGJvcmRlcmNvbG9yPSIjNjY2NjY2IgogICAgIGJvcmRlcm9wYWNpdHk9IjEiCiAgICAgaW5rc2NhcGU6cGFnZW9wYWNpdHk9IjAuMCIKICAgICBpbmtzY2FwZTpwYWdlc2hhZG93PSIyIgogICAgIGlua3NjYXBlOnpvb209IjUuNjU2ODU0MiIKICAgICBpbmtzY2FwZTpjeD0iOTIuMDU4NTM5IgogICAgIGlua3NjYXBlOmN5PSI0OC4yNzgzNDQiCiAgICAgaW5rc2NhcGU6Y3VycmVudC1sYXllcj0ibGF5ZXIxIgogICAgIHNob3dncmlkPSJ0cnVlIgogICAgIGlua3NjYXBlOmdyaWQtYmJveD0idHJ1ZSIKICAgICBpbmtzY2FwZTpkb2N1bWVudC11bml0cz0icHgiCiAgICAgaW5rc2NhcGU6d2luZG93LXdpZHRoPSIxNjAwIgogICAgIGlua3NjYXBlOndpbmRvdy1oZWlnaHQ9IjgzNyIKICAgICBpbmtzY2FwZTp3aW5kb3cteD0iMCIKICAgICBpbmtzY2FwZTp3aW5kb3cteT0iMjciCiAgICAgaW5rc2NhcGU6c2hvd3BhZ2VzaGFkb3c9InRydWUiCiAgICAgZmlsbD0iI2RlYjg4NyIKICAgICBzdHJva2U9IiMyMDRhODciCiAgICAgYm9yZGVybGF5ZXI9InRydWUiCiAgICAgaW5rc2NhcGU6d2luZG93LW1heGltaXplZD0iMSI+CiAgICA8aW5rc2NhcGU6Z3JpZAogICAgICAgaWQ9IkdyaWRGcm9tUHJlMDQ2U2V0dGluZ3MiCiAgICAgICB0eXBlPSJ4eWdyaWQiCiAgICAgICBvcmlnaW54PSIwcHgiCiAgICAgICBvcmlnaW55PSIwcHgiCiAgICAgICBzcGFjaW5neD0iMXB4IgogICAgICAgc3BhY2luZ3k9IjFweCIKICAgICAgIGNvbG9yPSIjNzE3MWNkIgogICAgICAgZW1wY29sb3I9IiM3YjdiYzMiCiAgICAgICBvcGFjaXR5PSIwLjEyMTU2ODYzIgogICAgICAgZW1wb3BhY2l0eT0iMC41MzcyNTQ5IgogICAgICAgZW1wc3BhY2luZz0iMiIKICAgICAgIHZpc2libGU9InRydWUiCiAgICAgICBlbmFibGVkPSJ0cnVlIgogICAgICAgc25hcHZpc2libGVncmlkbGluZXNvbmx5PSJ0cnVlIiAvPgogIDwvc29kaXBvZGk6bmFtZWR2aWV3PgogIDxtZXRhZGF0YQogICAgIGlkPSJtZXRhZGF0YTQiPgogICAgPHJkZjpSREY+CiAgICAgIDxjYzpXb3JrCiAgICAgICAgIHJkZjphYm91dD0iIj4KICAgICAgICA8ZGM6Zm9ybWF0PmltYWdlL3N2Zyt4bWw8L2RjOmZvcm1hdD4KICAgICAgICA8ZGM6dHlwZQogICAgICAgICAgIHJkZjpyZXNvdXJjZT0iaHR0cDovL3B1cmwub3JnL2RjL2RjbWl0eXBlL1N0aWxsSW1hZ2UiIC8+CiAgICAgICAgPGRjOnRpdGxlPkhlbHAgQnJvd3NlcjwvZGM6dGl0bGU+CiAgICAgICAgPGRjOmRhdGU+MjAwNS0xMS0wNjwvZGM6ZGF0ZT4KICAgICAgICA8ZGM6Y3JlYXRvcj4KICAgICAgICAgIDxjYzpBZ2VudD4KICAgICAgICAgICAgPGRjOnRpdGxlPlR1b21hcyBLdW9zbWFuZW48L2RjOnRpdGxlPgogICAgICAgICAgPC9jYzpBZ2VudD4KICAgICAgICA8L2RjOmNyZWF0b3I+CiAgICAgICAgPGRjOnN1YmplY3Q+CiAgICAgICAgICA8cmRmOkJhZz4KICAgICAgICAgICAgPHJkZjpsaT5oZWxwPC9yZGY6bGk+CiAgICAgICAgICAgIDxyZGY6bGk+YnJvd3NlcjwvcmRmOmxpPgogICAgICAgICAgICA8cmRmOmxpPmRvY3VtZW50YXRpb248L3JkZjpsaT4KICAgICAgICAgICAgPHJkZjpsaT5kb2NzPC9yZGY6bGk+CiAgICAgICAgICAgIDxyZGY6bGk+bWFuPC9yZGY6bGk+CiAgICAgICAgICAgIDxyZGY6bGk+aW5mbzwvcmRmOmxpPgogICAgICAgICAgPC9yZGY6QmFnPgogICAgICAgIDwvZGM6c3ViamVjdD4KICAgICAgICA8Y2M6bGljZW5zZQogICAgICAgICAgIHJkZjpyZXNvdXJjZT0iaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnktc2EvMi4wLyIgLz4KICAgICAgICA8ZGM6Y29udHJpYnV0b3I+CiAgICAgICAgICA8Y2M6QWdlbnQ+CiAgICAgICAgICAgIDxkYzp0aXRsZT5KYWt1YiBTdGVpbmVyLCBBbmRyZWFzIE5pbHNzb248L2RjOnRpdGxlPgogICAgICAgICAgPC9jYzpBZ2VudD4KICAgICAgICA8L2RjOmNvbnRyaWJ1dG9yPgogICAgICAgIDxkYzpzb3VyY2U+aHR0cDovL3RpZ2VydC5jb208L2RjOnNvdXJjZT4KICAgICAgPC9jYzpXb3JrPgogICAgICA8Y2M6TGljZW5zZQogICAgICAgICByZGY6YWJvdXQ9Imh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LXNhLzIuMC8iPgogICAgICAgIDxjYzpwZXJtaXRzCiAgICAgICAgICAgcmRmOnJlc291cmNlPSJodHRwOi8vd2ViLnJlc291cmNlLm9yZy9jYy9SZXByb2R1Y3Rpb24iIC8+CiAgICAgICAgPGNjOnBlcm1pdHMKICAgICAgICAgICByZGY6cmVzb3VyY2U9Imh0dHA6Ly93ZWIucmVzb3VyY2Uub3JnL2NjL0Rpc3RyaWJ1dGlvbiIgLz4KICAgICAgICA8Y2M6cmVxdWlyZXMKICAgICAgICAgICByZGY6cmVzb3VyY2U9Imh0dHA6Ly93ZWIucmVzb3VyY2Uub3JnL2NjL05vdGljZSIgLz4KICAgICAgICA8Y2M6cmVxdWlyZXMKICAgICAgICAgICByZGY6cmVzb3VyY2U9Imh0dHA6Ly93ZWIucmVzb3VyY2Uub3JnL2NjL0F0dHJpYnV0aW9uIiAvPgogICAgICAgIDxjYzpwZXJtaXRzCiAgICAgICAgICAgcmRmOnJlc291cmNlPSJodHRwOi8vd2ViLnJlc291cmNlLm9yZy9jYy9EZXJpdmF0aXZlV29ya3MiIC8+CiAgICAgICAgPGNjOnJlcXVpcmVzCiAgICAgICAgICAgcmRmOnJlc291cmNlPSJodHRwOi8vd2ViLnJlc291cmNlLm9yZy9jYy9TaGFyZUFsaWtlIiAvPgogICAgICA8L2NjOkxpY2Vuc2U+CiAgICA8L3JkZjpSREY+CiAgPC9tZXRhZGF0YT4KICA8ZwogICAgIGlkPSJsYXllcjEiCiAgICAgaW5rc2NhcGU6bGFiZWw9IkxheWVyIDEiCiAgICAgaW5rc2NhcGU6Z3JvdXBtb2RlPSJsYXllciIKICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgwLDE2KSI+CiAgICA8cGF0aAogICAgICAgc29kaXBvZGk6dHlwZT0iYXJjIgogICAgICAgc3R5bGU9ImZpbGw6IzcyOWZjZjtzdHJva2U6IzBiMTUyMTtzdHJva2Utd2lkdGg6Mi4wNjg5NjU0NDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6NDtzdHJva2UtZGFzaGFycmF5Om5vbmUiCiAgICAgICBpZD0icGF0aDI5OTIiCiAgICAgICBzb2RpcG9kaTpjeD0iMzIiCiAgICAgICBzb2RpcG9kaTpjeT0iMzIiCiAgICAgICBzb2RpcG9kaTpyeD0iMzAiCiAgICAgICBzb2RpcG9kaTpyeT0iMzAiCiAgICAgICBkPSJNIDYyLDMyIEEgMzAsMzAgMCAxIDEgMiwzMiAzMCwzMCAwIDEgMSA2MiwzMiB6IgogICAgICAgdHJhbnNmb3JtPSJtYXRyaXgoMC45NjY2NjY2NywwLDAsMC45NjY2NjY2NywxLjA2NjY2NjYsLTE0LjkzMzMzMykiIC8+CiAgICA8cGF0aAogICAgICAgc29kaXBvZGk6dHlwZT0iYXJjIgogICAgICAgc3R5bGU9ImZpbGw6dXJsKCNsaW5lYXJHcmFkaWVudDM3ODYpO2ZpbGwtb3BhY2l0eToxO3N0cm9rZTojNzI5ZmNmO3N0cm9rZS13aWR0aDoyLjIyMjIyMjMzO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDo0O3N0cm9rZS1kYXNoYXJyYXk6bm9uZSIKICAgICAgIGlkPSJwYXRoMjk5Mi0zIgogICAgICAgc29kaXBvZGk6Y3g9IjMyIgogICAgICAgc29kaXBvZGk6Y3k9IjMyIgogICAgICAgc29kaXBvZGk6cng9IjMwIgogICAgICAgc29kaXBvZGk6cnk9IjMwIgogICAgICAgZD0iTSA2MiwzMiBBIDMwLDMwIDAgMSAxIDIsMzIgMzAsMzAgMCAxIDEgNjIsMzIgeiIKICAgICAgIHRyYW5zZm9ybT0ibWF0cml4KDAuOSwwLDAsMC45LDMuMTk5OTk5NiwtMTIuOCkiIC8+CiAgICA8cGF0aAogICAgICAgdHJhbnNmb3JtPSJtYXRyaXgoMS42ODU3NzYyLDAsMCwxLjY1NjYzODQsNjYuNTUzNzY0LC0xNC4zNTU3OSkiCiAgICAgICBzdHlsZT0iZm9udC1zaXplOjM0LjE1MzIyODc2cHg7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC12YXJpYW50Om5vcm1hbDtmb250LXdlaWdodDpib2xkO2ZvbnQtc3RyZXRjaDpub3JtYWw7dGV4dC1hbGlnbjpzdGFydDtsaW5lLWhlaWdodDoxMjUlO3dyaXRpbmctbW9kZTpsci10Yjt0ZXh0LWFuY2hvcjpzdGFydDtmaWxsOnVybCgjcmFkaWFsR3JhZGllbnQyNDM3KTtmaWxsLW9wYWNpdHk6MTtzdHJva2U6IzcyOWZjZjtzdHJva2Utd2lkdGg6MS4xOTY3ODUwOTtzdHJva2UtbGluZWNhcDpidXR0O3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2Utb3BhY2l0eToxO2ZvbnQtZmFtaWx5OkJpdHN0cmVhbSBWZXJhIFNhbnMiCiAgICAgICBkPSJtIC0yMC4yNSw1LjY2MTU4MzggYyAtMS4wNTkwMTksMi42M2UtNSAtMi4xNDc2MzcsMC4xMjMyMzU2IC0zLjI4MTI1LDAuMzQzNzUgLTEuMTMyOTI1LDAuMjIwNDI4MyAtMi4wMDk0MTMsMC41Mzc1MTI1IC0zLjM3OTI1MSwxIC0wLjAxMDM3LC0wLjAwMTIxIC0wLjAyMDg4LC0wLjAwMTIxIC0wLjAzMTI1LDAgLTAuMDEyMDQsMC4wMDg2MSAtMC4wMjI2NCwwLjAxOTIxNCAtMC4wMzEyNSwwLjAzMTI1IC0wLjAxMjA0LDAuMDA4NjEgLTAuMDIyNjQsMC4wMTkyMTQgLTAuMDMxMjUsMC4wMzEyNSAtMC4wMDEyLDAuMDEwMzcgLTAuMDAxMiwwLjAyMDg4IDAsMC4wMzEyNSAtMC4wMDEyLDAuMDEwMzcgLTAuMDAxMiwwLjAyMDg4IDAsMC4wMzEyNSBsIDAsNS4xNTYyNTAyIGMgLTAuMDAxMiwwLjAxMDM3IC0wLjAwMTIsMC4wMjA4OCAwLDAuMDMxMjUgLTAuMDAxMiwwLjAxMDM3IC0wLjAwMTIsMC4wMjA4OCAwLDAuMDMxMjUgMC4wMDg2LDAuMDEyMDQgMC4wMTkyMSwwLjAyMjY0IDAuMDMxMjUsMC4wMzEyNSAwLjAwODYsMC4wMTIwNCAwLjAxOTIxLDAuMDIyNjQgMC4wMzEyNSwwLjAzMTI1IDAuMDEwMzcsMC4wMDEyIDAuMDIwODgsMC4wMDEyIDAuMDMxMjUsMCAwLjAxMDM3LDAuMDAxMiAwLjAyMDg4LDAuMDAxMiAwLjAzMTI1LDAgMC4wMTAzNywwLjAwMTIgMC4wMjA4OCwwLjAwMTIgMC4wMzEyNSwwIDAuMDEwMzcsMC4wMDEyIDAuMDIwODgsMC4wMDEyIDAuMDMxMjUsMCAxLjE0MjQzOCwtMC43MTkwNDMgMS44NjI2MDMsLTEuMjY3MTM4IDIuOTEwNTAxLC0xLjYyNSAxLjA0ODE0MSwtMC4zNjg3NTYgMi4wNDMxMTYsLTAuNTYyNDc5IDIuOTM3NSwtMC41NjI1IDAuOTQ5MjE4LDIuMWUtNSAxLjY0NDkyNSwwLjIxMDU0NSAyLjE1NjI1LDAuNjI1IDAuNTA4NzIzLDAuNDAyMDkgMC43ODEyMzgsMC45ODMwNCAwLjc4MTI1LDEuNzE4NzUgLTEwZS02LDAuNDgwNjU3IC0wLjE0NDE4OCwwLjk1MTQxIC0wLjQzNzUsMS40Mzc1IC0wLjI4Mjk5MSwwLjQ4NzAxNiAtMC43NDAyNjUsMS4yNDM5MTEgLTEuMzc1LDEuODA3MTY2IEwgLTIwLjkzNzUsMTYuNzUgYyAtMS4yMDE0NTksMS4wODA0OSAtMS43Nzk1MTYsMS45OTEwMjIgLTIuMTY1MjczLDIuNzE4NzUgLTAuMzgzMTEzLDAuNzExNDQ2IC0wLjM1OTc2OSwxLjIzMTY1NiAtMC4zNTk3NjksMi4xNDk4MzIgbCAwLDAuODEyNSBjIC0wLjAwMTIsMC4wMTAzNyAtMC4wMDEyLDAuMDIwODggMCwwLjAzMTI1IC0wLjAwMTIsMC4wMTAzNyAtMC4wMDEyLDAuMDIwODggMCwwLjAzMTI1IDAuMDA4NiwwLjAxMjA0IDAuMDE5MjEsMC4wMjI2NCAwLjAzMTI1LDAuMDMxMjUgMC4wMDg2LDAuMDEyMDQgMC4wMTkyMSwwLjAyMjY0IDAuMDMxMjUsMC4wMzEyNSAwLjAxMDM3LDAuMDAxMiAwLjAyMDg4LDAuMDAxMiAwLjAzMTI1LDAgMC4wMTAzNywwLjAwMTIgMC4wMjA4OCwwLjAwMTIgMC4wMzEyNSwwIGwgNS42ODEyOTIsLTAuMDI4MyBjIDAuMDEwMzcsMC4wMDEyIDAuMDIwODgsMC4wMDEyIDAuMDMxMjUsMCAwLjAxMDM3LDAuMDAxMiAwLjAyMDg4LDAuMDAxMiAwLjAzMTI1LDAgMC4wMTIwNCwtMC4wMDg2IDAuMDIyNjQsLTAuMDE5MjEgMC4wMzEyNSwtMC4wMzEyNSAwLjAxMjA0LC0wLjAwODYgMC4wMjI2NCwtMC4wMTkyMSAwLjAzMTI1LC0wLjAzMTI1IDAuMDAxMiwtMC4wMTAzNyAwLjAwMTIsLTAuMDIwODggMCwtMC4wMzEyNSAwLjAwMTIsLTAuMDEwMzcgMC4wMDEyLC0wLjAyMDg4IDAsLTAuMDMxMjUgbCAwLC0wLjc1IGMgLTEuMWUtNSwtMC40NjgxOTYgMC4xNDgzNywtMC41NzY4ODUgMC4zNzUsLTAuOTY1Mjg2IDAuMjIyMjk1LC0wLjM5MTI4NCAwLjcwODA3MywtMC45NTAzNTkgMS40Njg3NSwtMS42MjUgbCAxLjA2MjUsLTAuOTM3NSBjIDEuMDY2NTg4LC0wLjk4MjMxIDEuODMwNjU5LC0xLjg4NDY1NCAyLjI4MTI1LC0yLjc1IDAuNDQ5MjY5LC0wLjg3NDA0NiAwLjY4NzQ4MiwtMi4wODY4MzYgMC42ODc1LC0zLjE4MjE2NiAtMS44ZS01LC0yLjEyNjI2NSAtMC43NDM3NjksLTMuNzM0MDI3OCAtMi4yMTg3NSwtNC44NDM3NTAyIC0xLjQ3NTE5NywtMS4xMjEwMjUyIC0zLjYwNjI0LC0xLjY4NzQ3MzcgLTYuMzc1LC0xLjY4NzQ5NiB6IgogICAgICAgaWQ9InBhdGgxNTU0IgogICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICAgIHNvZGlwb2RpOm5vZGV0eXBlcz0iY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY3NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjIiAvPgogICAgPHBhdGgKICAgICAgIHN0eWxlPSJmaWxsOiNmZmZmZmY7c3Ryb2tlOiM3MjlmY2Y7c3Ryb2tlLXdpZHRoOjI7c3Ryb2tlLWxpbmVjYXA6YnV0dDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW9wYWNpdHk6MSIKICAgICAgIGQ9Im0gMjcsMjcgMTAsMCAwLDEwIC0xMCwwIHoiCiAgICAgICBpZD0icGF0aDM3ODgiCiAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIiAvPgogIDwvZz4KPC9zdmc+Cg==
"""
Normal_b64=\
"""
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhLS0gQ3JlYXRlZCB3aXRoIElua3NjYXBlIChodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy8pIC0tPgoKPHN2ZwogICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgIHhtbG5zOmNjPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyMiCiAgIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyIKICAgeG1sbnM6c3ZnPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIKICAgeG1sbnM6c29kaXBvZGk9Imh0dHA6Ly9zb2RpcG9kaS5zb3VyY2Vmb3JnZS5uZXQvRFREL3NvZGlwb2RpLTAuZHRkIgogICB4bWxuczppbmtzY2FwZT0iaHR0cDovL3d3dy5pbmtzY2FwZS5vcmcvbmFtZXNwYWNlcy9pbmtzY2FwZSIKICAgd2lkdGg9IjY0cHgiCiAgIGhlaWdodD0iNjRweCIKICAgaWQ9InN2ZzI5ODAiCiAgIHNvZGlwb2RpOnZlcnNpb249IjAuMzIiCiAgIGlua3NjYXBlOnZlcnNpb249IjAuOTIuMCByMTUyOTkiCiAgIHNvZGlwb2RpOmRvY25hbWU9Ik5vcm1hbC1VcC5zdmciCiAgIGlua3NjYXBlOm91dHB1dF9leHRlbnNpb249Im9yZy5pbmtzY2FwZS5vdXRwdXQuc3ZnLmlua3NjYXBlIgogICB2ZXJzaW9uPSIxLjEiPgogIDxkZWZzCiAgICAgaWQ9ImRlZnMyOTgyIj4KICAgIDxsaW5lYXJHcmFkaWVudAogICAgICAgaW5rc2NhcGU6Y29sbGVjdD0iYWx3YXlzIgogICAgICAgaWQ9ImxpbmVhckdyYWRpZW50NDAyOCI+CiAgICAgIDxzdG9wCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiMyMDRhODc7c3RvcC1vcGFjaXR5OjEiCiAgICAgICAgIG9mZnNldD0iMCIKICAgICAgICAgaWQ9InN0b3A0MDMwIiAvPgogICAgICA8c3RvcAogICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojNzI5ZmNmO3N0b3Atb3BhY2l0eToxIgogICAgICAgICBvZmZzZXQ9IjEiCiAgICAgICAgIGlkPSJzdG9wNDAzMiIgLz4KICAgIDwvbGluZWFyR3JhZGllbnQ+CiAgICA8bGluZWFyR3JhZGllbnQKICAgICAgIGlua3NjYXBlOmNvbGxlY3Q9ImFsd2F5cyIKICAgICAgIGlkPSJsaW5lYXJHcmFkaWVudDM3OTQiPgogICAgICA8c3RvcAogICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojMDAwMDAwO3N0b3Atb3BhY2l0eToxOyIKICAgICAgICAgb2Zmc2V0PSIwIgogICAgICAgICBpZD0ic3RvcDM3OTYiIC8+CiAgICAgIDxzdG9wCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiMwMDAwMDA7c3RvcC1vcGFjaXR5OjA7IgogICAgICAgICBvZmZzZXQ9IjEiCiAgICAgICAgIGlkPSJzdG9wMzc5OCIgLz4KICAgIDwvbGluZWFyR3JhZGllbnQ+CiAgICA8bGluZWFyR3JhZGllbnQKICAgICAgIGlkPSJsaW5lYXJHcmFkaWVudDM4NjQiPgogICAgICA8c3RvcAogICAgICAgICBpZD0ic3RvcDM4NjYiCiAgICAgICAgIG9mZnNldD0iMCIKICAgICAgICAgc3R5bGU9InN0b3AtY29sb3I6IzcxYjJmODtzdG9wLW9wYWNpdHk6MTsiIC8+CiAgICAgIDxzdG9wCiAgICAgICAgIGlkPSJzdG9wMzg2OCIKICAgICAgICAgb2Zmc2V0PSIxIgogICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojMDAyNzk1O3N0b3Atb3BhY2l0eToxOyIgLz4KICAgIDwvbGluZWFyR3JhZGllbnQ+CiAgICA8aW5rc2NhcGU6cGVyc3BlY3RpdmUKICAgICAgIHNvZGlwb2RpOnR5cGU9Imlua3NjYXBlOnBlcnNwM2QiCiAgICAgICBpbmtzY2FwZTp2cF94PSIwIDogMzIgOiAxIgogICAgICAgaW5rc2NhcGU6dnBfeT0iMCA6IDEwMDAgOiAwIgogICAgICAgaW5rc2NhcGU6dnBfej0iNjQgOiAzMiA6IDEiCiAgICAgICBpbmtzY2FwZTpwZXJzcDNkLW9yaWdpbj0iMzIgOiAyMS4zMzMzMzMgOiAxIgogICAgICAgaWQ9InBlcnNwZWN0aXZlMjk4OCIgLz4KICAgIDxsaW5lYXJHcmFkaWVudAogICAgICAgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgwLC00KSIKICAgICAgIGlua3NjYXBlOmNvbGxlY3Q9ImFsd2F5cyIKICAgICAgIHhsaW5rOmhyZWY9IiNsaW5lYXJHcmFkaWVudDM3NjciCiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQzNzczIgogICAgICAgeDE9IjIyLjExNjUxNiIKICAgICAgIHkxPSI1NS43MTc1MTgiCiAgICAgICB4Mj0iMTcuMzI4NTQ3IgogICAgICAgeTI9IjIxLjMxMTM0IgogICAgICAgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiIC8+CiAgICA8bGluZWFyR3JhZGllbnQKICAgICAgIGlua3NjYXBlOmNvbGxlY3Q9ImFsd2F5cyIKICAgICAgIGlkPSJsaW5lYXJHcmFkaWVudDM3NjciPgogICAgICA8c3RvcAogICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojMzQ2NWE0O3N0b3Atb3BhY2l0eToxIgogICAgICAgICBvZmZzZXQ9IjAiCiAgICAgICAgIGlkPSJzdG9wMzc2OSIgLz4KICAgICAgPHN0b3AKICAgICAgICAgc3R5bGU9InN0b3AtY29sb3I6IzcyOWZjZjtzdG9wLW9wYWNpdHk6MSIKICAgICAgICAgb2Zmc2V0PSIxIgogICAgICAgICBpZD0ic3RvcDM3NzEiIC8+CiAgICA8L2xpbmVhckdyYWRpZW50PgogICAgPGxpbmVhckdyYWRpZW50CiAgICAgICBncmFkaWVudFRyYW5zZm9ybT0idHJhbnNsYXRlKDAsLTQpIgogICAgICAgaW5rc2NhcGU6Y29sbGVjdD0iYWx3YXlzIgogICAgICAgeGxpbms6aHJlZj0iI2xpbmVhckdyYWRpZW50Mzc3NyIKICAgICAgIGlkPSJsaW5lYXJHcmFkaWVudDM3ODMiCiAgICAgICB4MT0iNTMuODk2NzYzIgogICAgICAgeTE9IjUxLjE3OTc4NyIKICAgICAgIHgyPSI0Ny41MDIyMzUiCiAgICAgICB5Mj0iMjEuODM3NDIiCiAgICAgICBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgLz4KICAgIDxsaW5lYXJHcmFkaWVudAogICAgICAgaW5rc2NhcGU6Y29sbGVjdD0iYWx3YXlzIgogICAgICAgaWQ9ImxpbmVhckdyYWRpZW50Mzc3NyI+CiAgICAgIDxzdG9wCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiMyMDRhODc7c3RvcC1vcGFjaXR5OjEiCiAgICAgICAgIG9mZnNldD0iMCIKICAgICAgICAgaWQ9InN0b3AzNzc5IiAvPgogICAgICA8c3RvcAogICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojMzQ2NWE0O3N0b3Atb3BhY2l0eToxIgogICAgICAgICBvZmZzZXQ9IjEiCiAgICAgICAgIGlkPSJzdG9wMzc4MSIgLz4KICAgIDwvbGluZWFyR3JhZGllbnQ+CiAgICA8cmFkaWFsR3JhZGllbnQKICAgICAgIGlua3NjYXBlOmNvbGxlY3Q9ImFsd2F5cyIKICAgICAgIHhsaW5rOmhyZWY9IiNsaW5lYXJHcmFkaWVudDM3OTQiCiAgICAgICBpZD0icmFkaWFsR3JhZGllbnQzODAwIgogICAgICAgY3g9IjEiCiAgICAgICBjeT0iNDUiCiAgICAgICBmeD0iMSIKICAgICAgIGZ5PSI0NSIKICAgICAgIHI9IjQxIgogICAgICAgZ3JhZGllbnRUcmFuc2Zvcm09Im1hdHJpeCgwLjkzMzQ4MjEzLC0yLjI5MDUyNzZlLTgsMCwwLjI4Njg3NTczLDAuMDY2NTE3NTEsMzIuMDkwNTkyKSIKICAgICAgIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIiAvPgogICAgPGxpbmVhckdyYWRpZW50CiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQzODM2LTAtNi05LTciPgogICAgICA8c3RvcAogICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojYTQwMDAwO3N0b3Atb3BhY2l0eToxIgogICAgICAgICBvZmZzZXQ9IjAiCiAgICAgICAgIGlkPSJzdG9wMzgzOC0yLTctMy04IiAvPgogICAgICA8c3RvcAogICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojZWYyOTI5O3N0b3Atb3BhY2l0eToxIgogICAgICAgICBvZmZzZXQ9IjEiCiAgICAgICAgIGlkPSJzdG9wMzg0MC01LTUtMS02IiAvPgogICAgPC9saW5lYXJHcmFkaWVudD4KICAgIDxsaW5lYXJHcmFkaWVudAogICAgICAgaWQ9ImxpbmVhckdyYWRpZW50MzgzNi0wLTYtOTItNCI+CiAgICAgIDxzdG9wCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiNhNDAwMDA7c3RvcC1vcGFjaXR5OjEiCiAgICAgICAgIG9mZnNldD0iMCIKICAgICAgICAgaWQ9InN0b3AzODM4LTItNy0wNi04IiAvPgogICAgICA8c3RvcAogICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojZWYyOTI5O3N0b3Atb3BhY2l0eToxIgogICAgICAgICBvZmZzZXQ9IjEiCiAgICAgICAgIGlkPSJzdG9wMzg0MC01LTUtOC03IiAvPgogICAgPC9saW5lYXJHcmFkaWVudD4KICAgIDxsaW5lYXJHcmFkaWVudAogICAgICAgaWQ9ImxpbmVhckdyYWRpZW50MzgzNi0wLTYtOTItNC02Ij4KICAgICAgPHN0b3AKICAgICAgICAgc3R5bGU9InN0b3AtY29sb3I6I2E0MDAwMDtzdG9wLW9wYWNpdHk6MSIKICAgICAgICAgb2Zmc2V0PSIwIgogICAgICAgICBpZD0ic3RvcDM4MzgtMi03LTA2LTgtNyIgLz4KICAgICAgPHN0b3AKICAgICAgICAgc3R5bGU9InN0b3AtY29sb3I6I2VmMjkyOTtzdG9wLW9wYWNpdHk6MSIKICAgICAgICAgb2Zmc2V0PSIxIgogICAgICAgICBpZD0ic3RvcDM4NDAtNS01LTgtNy01IiAvPgogICAgPC9saW5lYXJHcmFkaWVudD4KICAgIDxsaW5lYXJHcmFkaWVudAogICAgICAgaWQ9ImxpbmVhckdyYWRpZW50MzgzNi0wLTYtOTItNC02MiI+CiAgICAgIDxzdG9wCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiNhNDAwMDA7c3RvcC1vcGFjaXR5OjEiCiAgICAgICAgIG9mZnNldD0iMCIKICAgICAgICAgaWQ9InN0b3AzODM4LTItNy0wNi04LTkiIC8+CiAgICAgIDxzdG9wCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiNlZjI5Mjk7c3RvcC1vcGFjaXR5OjEiCiAgICAgICAgIG9mZnNldD0iMSIKICAgICAgICAgaWQ9InN0b3AzODQwLTUtNS04LTctMSIgLz4KICAgIDwvbGluZWFyR3JhZGllbnQ+CiAgICA8bGluZWFyR3JhZGllbnQKICAgICAgIGlkPSJsaW5lYXJHcmFkaWVudDM4MzYtMC02LTkyLTQtMCI+CiAgICAgIDxzdG9wCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiNhNDAwMDA7c3RvcC1vcGFjaXR5OjEiCiAgICAgICAgIG9mZnNldD0iMCIKICAgICAgICAgaWQ9InN0b3AzODM4LTItNy0wNi04LTYiIC8+CiAgICAgIDxzdG9wCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiNlZjI5Mjk7c3RvcC1vcGFjaXR5OjEiCiAgICAgICAgIG9mZnNldD0iMSIKICAgICAgICAgaWQ9InN0b3AzODQwLTUtNS04LTctMiIgLz4KICAgIDwvbGluZWFyR3JhZGllbnQ+CiAgICA8bGluZWFyR3JhZGllbnQKICAgICAgIGlua3NjYXBlOmNvbGxlY3Q9ImFsd2F5cyIKICAgICAgIHhsaW5rOmhyZWY9IiNsaW5lYXJHcmFkaWVudDM4MzYtMC02LTkyLTQtMiIKICAgICAgIGlkPSJsaW5lYXJHcmFkaWVudDM4MDEtMS0zLTE0LTAtOSIKICAgICAgIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIgogICAgICAgeDE9Ii0xOCIKICAgICAgIHkxPSIxOCIKICAgICAgIHgyPSItMjIiCiAgICAgICB5Mj0iNSIKICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPSJtYXRyaXgoMC43NjM0MjQzOSwwLDAsMC43NTc1MDQyNSwtNC41OTYzODksMi43NTI1NjM3KSIgLz4KICAgIDxsaW5lYXJHcmFkaWVudAogICAgICAgaWQ9ImxpbmVhckdyYWRpZW50MzgzNi0wLTYtOTItNC0yIj4KICAgICAgPHN0b3AKICAgICAgICAgc3R5bGU9InN0b3AtY29sb3I6I2E0MDAwMDtzdG9wLW9wYWNpdHk6MSIKICAgICAgICAgb2Zmc2V0PSIwIgogICAgICAgICBpZD0ic3RvcDM4MzgtMi03LTA2LTgtMCIgLz4KICAgICAgPHN0b3AKICAgICAgICAgc3R5bGU9InN0b3AtY29sb3I6I2VmMjkyOTtzdG9wLW9wYWNpdHk6MSIKICAgICAgICAgb2Zmc2V0PSIxIgogICAgICAgICBpZD0ic3RvcDM4NDAtNS01LTgtNy0yMyIgLz4KICAgIDwvbGluZWFyR3JhZGllbnQ+CiAgICA8bGluZWFyR3JhZGllbnQKICAgICAgIGlua3NjYXBlOmNvbGxlY3Q9ImFsd2F5cyIKICAgICAgIHhsaW5rOmhyZWY9IiNsaW5lYXJHcmFkaWVudDQwMjgiCiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQ0MDM0IgogICAgICAgeDE9IjM4IgogICAgICAgeTE9IjU3IgogICAgICAgeDI9IjI2IgogICAgICAgeTI9IjI2IgogICAgICAgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiIC8+CiAgICA8bGluZWFyR3JhZGllbnQKICAgICAgIGlua3NjYXBlOmNvbGxlY3Q9ImFsd2F5cyIKICAgICAgIHhsaW5rOmhyZWY9IiNsaW5lYXJHcmFkaWVudDQwMjgiCiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQ0MDQwIgogICAgICAgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiCiAgICAgICB4MT0iMzgiCiAgICAgICB5MT0iNTciCiAgICAgICB4Mj0iMjYiCiAgICAgICB5Mj0iMjYiIC8+CiAgPC9kZWZzPgogIDxzb2RpcG9kaTpuYW1lZHZpZXcKICAgICBpZD0iYmFzZSIKICAgICBwYWdlY29sb3I9IiNmZmZmZmYiCiAgICAgYm9yZGVyY29sb3I9IiM2NjY2NjYiCiAgICAgYm9yZGVyb3BhY2l0eT0iMS4wIgogICAgIGlua3NjYXBlOnBhZ2VvcGFjaXR5PSIwLjAiCiAgICAgaW5rc2NhcGU6cGFnZXNoYWRvdz0iMiIKICAgICBpbmtzY2FwZTp6b29tPSIzLjQyNTA0ODUiCiAgICAgaW5rc2NhcGU6Y3g9IjI3LjkxMjY0NiIKICAgICBpbmtzY2FwZTpjeT0iMzguNTI4MjM2IgogICAgIGlua3NjYXBlOmN1cnJlbnQtbGF5ZXI9Imc0NTI3IgogICAgIHNob3dncmlkPSJ0cnVlIgogICAgIGlua3NjYXBlOmRvY3VtZW50LXVuaXRzPSJweCIKICAgICBpbmtzY2FwZTpncmlkLWJib3g9InRydWUiCiAgICAgaW5rc2NhcGU6d2luZG93LXdpZHRoPSIxNTM2IgogICAgIGlua3NjYXBlOndpbmRvdy1oZWlnaHQ9IjgwMSIKICAgICBpbmtzY2FwZTp3aW5kb3cteD0iLTgiCiAgICAgaW5rc2NhcGU6d2luZG93LXk9Ii04IgogICAgIGlua3NjYXBlOnNuYXAtYmJveD0iZmFsc2UiCiAgICAgaW5rc2NhcGU6c25hcC1ub2Rlcz0idHJ1ZSIKICAgICBpbmtzY2FwZTp3aW5kb3ctbWF4aW1pemVkPSIxIj4KICAgIDxpbmtzY2FwZTpncmlkCiAgICAgICB0eXBlPSJ4eWdyaWQiCiAgICAgICBpZD0iZ3JpZDI5OTEiCiAgICAgICBlbXBzcGFjaW5nPSIyIgogICAgICAgdmlzaWJsZT0idHJ1ZSIKICAgICAgIGVuYWJsZWQ9InRydWUiCiAgICAgICBzbmFwdmlzaWJsZWdyaWRsaW5lc29ubHk9InRydWUiIC8+CiAgPC9zb2RpcG9kaTpuYW1lZHZpZXc+CiAgPG1ldGFkYXRhCiAgICAgaWQ9Im1ldGFkYXRhMjk4NSI+CiAgICA8cmRmOlJERj4KICAgICAgPGNjOldvcmsKICAgICAgICAgcmRmOmFib3V0PSIiPgogICAgICAgIDxkYzpmb3JtYXQ+aW1hZ2Uvc3ZnK3htbDwvZGM6Zm9ybWF0PgogICAgICAgIDxkYzp0eXBlCiAgICAgICAgICAgcmRmOnJlc291cmNlPSJodHRwOi8vcHVybC5vcmcvZGMvZGNtaXR5cGUvU3RpbGxJbWFnZSIgLz4KICAgICAgICA8ZGM6dGl0bGU+PC9kYzp0aXRsZT4KICAgICAgICA8ZGM6Y3JlYXRvcj4KICAgICAgICAgIDxjYzpBZ2VudD4KICAgICAgICAgICAgPGRjOnRpdGxlPltqbWF1c3RwY108L2RjOnRpdGxlPgogICAgICAgICAgPC9jYzpBZ2VudD4KICAgICAgICA8L2RjOmNyZWF0b3I+CiAgICAgICAgPGRjOnRpdGxlPlRyZWVfUGFydF9QbGFuZV9QYXJhbWV0cmljPC9kYzp0aXRsZT4KICAgICAgICA8ZGM6ZGF0ZT4yMDEzLTAzLTEzPC9kYzpkYXRlPgogICAgICAgIDxkYzpyZWxhdGlvbj5odHRwOi8vd3d3LmZyZWVjYWR3ZWIub3JnL3dpa2kvaW5kZXgucGhwP3RpdGxlPUFydHdvcms8L2RjOnJlbGF0aW9uPgogICAgICAgIDxkYzpwdWJsaXNoZXI+CiAgICAgICAgICA8Y2M6QWdlbnQ+CiAgICAgICAgICAgIDxkYzp0aXRsZT5GcmVlQ0FEPC9kYzp0aXRsZT4KICAgICAgICAgIDwvY2M6QWdlbnQ+CiAgICAgICAgPC9kYzpwdWJsaXNoZXI+CiAgICAgICAgPGRjOmlkZW50aWZpZXI+RnJlZUNBRC9zcmMvTW9kL1BhcnQvR3VpL1Jlc291cmNlcy9pY29ucy9UcmVlX1BhcnRfUGxhbmVfUGFyYW1ldHJpYy5zdmc8L2RjOmlkZW50aWZpZXI+CiAgICAgICAgPGRjOnJpZ2h0cz4KICAgICAgICAgIDxjYzpBZ2VudD4KICAgICAgICAgICAgPGRjOnRpdGxlPkZyZWVDQUQgTEdQTDIrPC9kYzp0aXRsZT4KICAgICAgICAgIDwvY2M6QWdlbnQ+CiAgICAgICAgPC9kYzpyaWdodHM+CiAgICAgICAgPGNjOmxpY2Vuc2U+aHR0cHM6Ly93d3cuZ251Lm9yZy9jb3B5bGVmdC9sZXNzZXIuaHRtbDwvY2M6bGljZW5zZT4KICAgICAgICA8ZGM6Y29udHJpYnV0b3I+CiAgICAgICAgICA8Y2M6QWdlbnQ+CiAgICAgICAgICAgIDxkYzp0aXRsZT5bYWdyeXNvbl0gQWxleGFuZGVyIEdyeXNvbjwvZGM6dGl0bGU+CiAgICAgICAgICA8L2NjOkFnZW50PgogICAgICAgIDwvZGM6Y29udHJpYnV0b3I+CiAgICAgIDwvY2M6V29yaz4KICAgIDwvcmRmOlJERj4KICA8L21ldGFkYXRhPgogIDxnCiAgICAgaWQ9ImxheWVyMSIKICAgICBpbmtzY2FwZTpsYWJlbD0iTGF5ZXIgMSIKICAgICBpbmtzY2FwZTpncm91cG1vZGU9ImxheWVyIj4KICAgIDxnCiAgICAgICBpZD0iZzQwMzYiCiAgICAgICB0cmFuc2Zvcm09InRyYW5zbGF0ZSgwLC02KSIKICAgICAgIGlua3NjYXBlOmV4cG9ydC14ZHBpPSI2Mi4wMzA4OCIKICAgICAgIGlua3NjYXBlOmV4cG9ydC15ZHBpPSI2Mi4wMzA4OCI+CiAgICAgIDxwYXRoCiAgICAgICAgIHNvZGlwb2RpOm5vZGV0eXBlcz0iY2NjY2MiCiAgICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICAgIGlkPSJwYXRoMzI0MCIKICAgICAgICAgZD0iTSA4LDQ2IDM3LDU2IDU2LDI5IDI3LDIxIHoiCiAgICAgICAgIHN0eWxlPSJmaWxsOiM3MjlmY2Y7c3Ryb2tlOiMwYjE1MjE7c3Ryb2tlLXdpZHRoOjI7c3Ryb2tlLWxpbmVjYXA6YnV0dDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW9wYWNpdHk6MSIgLz4KICAgICAgPHBhdGgKICAgICAgICAgc29kaXBvZGk6bm9kZXR5cGVzPSJjY2NjYyIKICAgICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICAgICAgaWQ9InBhdGgzMjQwLTIiCiAgICAgICAgIGQ9Im0gMTEuMyw0NSAyNSw4LjcgMTYuNSwtMjMuNiAtMjUsLTYuOCB6IgogICAgICAgICBzdHlsZT0iZmlsbDp1cmwoI2xpbmVhckdyYWRpZW50NDA0MCk7ZmlsbC1vcGFjaXR5OjE7c3Ryb2tlOiM3MjlmY2Y7c3Ryb2tlLXdpZHRoOjI7c3Ryb2tlLWxpbmVjYXA6YnV0dDtzdHJva2UtbGluZWpvaW46bWl0ZXI7c3Ryb2tlLW9wYWNpdHk6MSIgLz4KICAgIDwvZz4KICAgIDxnCiAgICAgICBpZD0iZzQ1MjciCiAgICAgICB0cmFuc2Zvcm09Im1hdHJpeCgwLjE1MTA3NjcxLC0wLjAyNjYzODksMC4wMjY2Mzg5LDAuMTUxMDc2NzEsLTMwMy4wNzUwNiwtMTg0LjcwMDk3KSIKICAgICAgIGlua3NjYXBlOmV4cG9ydC14ZHBpPSI3Ni43Njk5OTciCiAgICAgICBpbmtzY2FwZTpleHBvcnQteWRwaT0iNzYuNzY5OTk3Ij4KICAgICAgPGcKICAgICAgICAgaWQ9Imc0NTUwIgogICAgICAgICB0cmFuc2Zvcm09Im1hdHJpeCgtMC41MjQ4NjYzOCwtMC43MDQwODM0MSwwLjg0NDMwNTYyLC0wLjM1OTM1MzA5LDEzNDAuNjYyOCwzNjM0LjI3OTMpIj4KICAgICAgICA8cGF0aAogICAgICAgICAgIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOiMyODAwMDA7c3Ryb2tlLXdpZHRoOjYyLjAzODI1Mzc4O3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjptaXRlcjtzdHJva2Utb3BhY2l0eToxIgogICAgICAgICAgIGQ9Im0gMTc1OS42NTEzLDE3NjMuMzMxMyAxMzkuNTg2MSwxMTUuNjYzIgogICAgICAgICAgIGlkPSJwYXRoNjM5NyIKICAgICAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgICAgIHNvZGlwb2RpOm5vZGV0eXBlcz0iY2MiIC8+CiAgICAgICAgPHBhdGgKICAgICAgICAgICBzdHlsZT0iZmlsbDpub25lO3N0cm9rZTojY2MwMDAwO3N0cm9rZS13aWR0aDozMS4wMTkxMjY4OTtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46bWl0ZXI7c3Ryb2tlLW9wYWNpdHk6MSIKICAgICAgICAgICBkPSJtIDE3NTkuNjUxMywxNzYzLjMzMTMgMTM5LjU4NjEsMTE1LjY2MyIKICAgICAgICAgICBpZD0icGF0aDYzOTctNSIKICAgICAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgICAgIHNvZGlwb2RpOm5vZGV0eXBlcz0iY2MiIC8+CiAgICAgICAgPHBhdGgKICAgICAgICAgICBzdHlsZT0iZmlsbDpub25lO3N0cm9rZTojZWYyOTI5O3N0cm9rZS13aWR0aDoxNS41MDk1NjM0NTtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46bWl0ZXI7c3Ryb2tlLW9wYWNpdHk6MSIKICAgICAgICAgICBkPSJtIDE3NTMuMTQyOCwxNzY3Ljc3MjEgOTIuNjA1NCw3Ni43MzQyIDQ2Ljk4MDYsMzguOTI4OCIKICAgICAgICAgICBpZD0icGF0aDYzOTctNS0wIgogICAgICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICAgICAgc29kaXBvZGk6bm9kZXR5cGVzPSJjY2MiIC8+CiAgICAgICAgPHBhdGgKICAgICAgICAgICBzdHlsZT0iZmlsbDojY2MwMDAwO3N0cm9rZTojMjgwMDAwO3N0cm9rZS13aWR0aDoxNS41MDk1NjM0NTtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MzIuMjAwMDAwNzY7c3Ryb2tlLW9wYWNpdHk6MSIKICAgICAgICAgICBkPSJtIDE4NTguMTgxOCwxOTA1Ljc4MzEgYyAtMS44MDkxLC0zMi44MTE5IDQ3Ljc3MTQsLTY3LjQ0NjkgNzUuNjczNywtNjUuNzY5NCBsIDE5LjY2NTQsODkuNTgzMiB6IgogICAgICAgICAgIGlkPSJwYXRoNjQ3NS0zIgogICAgICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICAgICAgc29kaXBvZGk6bm9kZXR5cGVzPSJjY2NjIiAvPgogICAgICAgIDxwYXRoCiAgICAgICAgICAgc3R5bGU9ImZpbGw6bm9uZTtzdHJva2U6I2VmMjkyOTtzdHJva2Utd2lkdGg6MTUuNTA5NTYzNDU7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1taXRlcmxpbWl0OjMyLjIwMDAwMDc2O3N0cm9rZS1vcGFjaXR5OjEiCiAgICAgICAgICAgZD0ibSAxODc1LjQ3ODYsMTg5NS4zMDA5IGMgMy41OSwtMTMuNzczNiAyNi45MDI4LC0zMy4zNTUgNDYuMDg2OSwtMzguNjM3OCBsIDEyLjA5MSw1Mi43Nzg1IHoiCiAgICAgICAgICAgaWQ9InBhdGg2NDc1LTYtMiIKICAgICAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgICAgIHNvZGlwb2RpOm5vZGV0eXBlcz0iY2NjYyIgLz4KICAgICAgPC9nPgogICAgPC9nPgogIDwvZz4KPC9zdmc+Cg==
"""
Normal_Inv_b64=\
"""

"""
One_Obj_b64=\
"""

"""
Two_Objs_b64=\
"""

"""
Hierarchy_b64=\
"""

"""
Face_View_b64=\
"""

"""
###############################################


##############################################################
global initial_placement, last_selection
global moving, rotating
global objs_moved, plc_moved
global double_click_dly, inv_view


#init
#initial_placement = FreeCAD.Placement(FreeCAD.Vector(0,0,0), FreeCAD.Rotation(0,0,0), FreeCAD.Vector(0,0,0)) #Placement [Pos=(0,0,0), Yaw-Pitch-Roll=(0,0,0)]
initial_placement = []
moving = [] #[FreeCAD.Vector(0,0,0)]
rotating = [] #[0, FreeCAD.Vector(0,0,0), FreeCAD.Vector(0,0,0)]
objs_moved = []
plc_moved = []
double_click_dly = 2000  #delay for considering double click on a Face View
inv_view = False
#Draft.rotate(objs[j],-rot_angle,rot_center,rot_axis)
#rotating=[rot_angle,rot_center,rot_axis]

last_selection = []

#################################################################

def say(msg):
    FreeCAD.Console.PrintMessage(msg)
    FreeCAD.Console.PrintMessage('\n')

def sayw(msg):
    FreeCAD.Console.PrintWarning(msg)
    FreeCAD.Console.PrintWarning('\n')

def sayerr(msg):
    FreeCAD.Console.PrintError(msg)
    FreeCAD.Console.PrintWarning('\n')

def make_string(input):
    if (sys.version_info > (3, 0)):  #py3
        if isinstance(input, str):
            return input
        else:
            input =  input.encode('utf-8')
            return input
    else:  #py2
        if type(input) == unicode:
            input =  input.encode('utf-8')
            return input
        else:
            return input

sayw("Mover version "+str(__version__))

global pointsDirection     ;pointsDirection = []     # tableau direction store the coordinates of first line (for deplacement)
global Direction_Distance  ;Direction_Distance = 0.1 # step precision deplacement here 0.1 mm
global value              ;value          = 0.0
#global ui                  ;ui              = ""
global selobject           ;selobject       = ""
global sel                 ;sel             = ""

# Form implementation generated from reading ui file 'C:\Cad\Progetti_K\3D-FreeCad-tools\icons-new\mover-tool-docked-v1.6.ui'
#
# Created: Wed Oct 04 14:48:22 2017
#      by: pyside-uic 0.2.15 running on PySide 1.2.2
#
# WARNING! All changes made in this file will be lost!

#from PySide import QtCore, QtGui

###############################################################################################################
### new dock widget
### add def link inside class
#    def link(self, linkStr):
#        QtGui.QDesktopServices.openUrl(QtCore.QUrl(linkStr))

#class Ui_DockWidget(object):
#    def link(self, linkStr):
#        #QtGui.QDesktopServices.openUrl(QtCore.QUrl(linkStr))
#        try:
#            QtGui.QDesktopServices.openUrl(QtCore.QUrl(linkStr))  #workaround Qt5 waiting for PySide2
#        except:
#            #QtGui.QDesktopServices.openUrl(QtCore.QUrl(linkStr.fromLocalFile()))
#            pass
#class Ui_DockWidget(object):
class Ui_DockWidget(object):
    def setupUi(self, DockWidget):
        DockWidget.setObjectName("DockWidget")
        DockWidget.resize(392, 479)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("Move_purple.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        DockWidget.setWindowIcon(icon)
        DockWidget.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Mover Tools"))
        DockWidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        DockWidget.setFeatures(QtGui.QDockWidget.DockWidgetFloatable|QtGui.QDockWidget.DockWidgetMovable)
        DockWidget.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea|QtCore.Qt.RightDockWidgetArea)
        DockWidget.setWindowTitle(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Mover Tools"))
        self.dockWidgetContents = QtGui.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.horizontalLayoutWidget = QtGui.QWidget(self.dockWidgetContents)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(5, 0, 120, 36))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtGui.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setSpacing(2)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.dock_float = QtGui.QPushButton(self.horizontalLayoutWidget)
        self.dock_float.setMaximumSize(QtCore.QSize(28, 28))
        self.dock_float.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "un-dock (floating)"))
        self.dock_float.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("un_dock.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.dock_float.setIcon(icon1)
        self.dock_float.setIconSize(QtCore.QSize(16, 16))
        self.dock_float.setObjectName("dock_float")
        self.horizontalLayout.addWidget(self.dock_float)
        self.dock_minimize = QtGui.QPushButton(self.horizontalLayoutWidget)
        self.dock_minimize.setMaximumSize(QtCore.QSize(28, 28))
        self.dock_minimize.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "minimize"))
        self.dock_minimize.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("minimize.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.dock_minimize.setIcon(icon2)
        self.dock_minimize.setIconSize(QtCore.QSize(24, 24))
        self.dock_minimize.setObjectName("dock_minimize")
        self.horizontalLayout.addWidget(self.dock_minimize)
        self.Help_Mover = QtGui.QPushButton(self.horizontalLayoutWidget)
        self.Help_Mover.setMinimumSize(QtCore.QSize(28, 28))
        self.Help_Mover.setMaximumSize(QtCore.QSize(28, 28))
        self.Help_Mover.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Help on Mover Manipulator"))
        self.Help_Mover.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("help.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Help_Mover.setIcon(icon3)
        self.Help_Mover.setIconSize(QtCore.QSize(24, 24))
        self.Help_Mover.setCheckable(False)
        self.Help_Mover.setChecked(False)
        self.Help_Mover.setObjectName("Help_Mover")
        self.horizontalLayout.addWidget(self.Help_Mover)
        self.close = QtGui.QPushButton(self.horizontalLayoutWidget)
        self.close.setMaximumSize(QtCore.QSize(28, 28))
        self.close.setToolTip("close")
        self.close.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("closeW.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.close.setIcon(icon4)
        self.close.setIconSize(QtCore.QSize(24, 24))
        self.close.setObjectName("close")
        self.horizontalLayout.addWidget(self.close)
        self.Label = QtGui.QLabel(self.dockWidgetContents)
        self.Label.setGeometry(QtCore.QRect(128, 2, 171, 37))
        self.Label.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Mover Tools\nClick on Mover button\nto enable object Manipulation"))
        self.Label.setText(QtCore.QT_TRANSLATE_NOOP("Manipulator", "<b>Mover Tools</b><br/><b>Click on Mover button</b>"))
        self.Label.setObjectName("Label")
        self.ReferenceGroup = QtGui.QGroupBox(self.dockWidgetContents)
        self.ReferenceGroup.setGeometry(QtCore.QRect(4, 56, 296, 90))
        self.ReferenceGroup.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Settings"))
        self.ReferenceGroup.setTitle(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Settings"))
        self.ReferenceGroup.setObjectName("ReferenceGroup")
        self.gridLayoutWidget_7 = QtGui.QWidget(self.ReferenceGroup)
        self.gridLayoutWidget_7.setGeometry(QtCore.QRect(14, 12, 274, 36))
        self.gridLayoutWidget_7.setObjectName("gridLayoutWidget_7")
        self.gridLayout_9 = QtGui.QGridLayout(self.gridLayoutWidget_7)
        self.gridLayout_9.setSpacing(2)
        self.gridLayout_9.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.rbZ = QtGui.QRadioButton(self.gridLayoutWidget_7)
        self.rbZ.setMinimumSize(QtCore.QSize(64, 32))
        self.rbZ.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "move/rotate on Z Axis"))
        self.rbZ.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("Z-axis.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbZ.setIcon(icon5)
        self.rbZ.setIconSize(QtCore.QSize(26, 26))
        self.rbZ.setObjectName("rbZ")
        self.gridLayout_9.addWidget(self.rbZ, 0, 3, 1, 1)
        self.rbY = QtGui.QRadioButton(self.gridLayoutWidget_7)
        self.rbY.setMinimumSize(QtCore.QSize(64, 32))
        self.rbY.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "move/rotate on Y Axis"))
        self.rbY.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("Y-axis.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbY.setIcon(icon6)
        self.rbY.setIconSize(QtCore.QSize(26, 26))
        self.rbY.setObjectName("rbY")
        self.gridLayout_9.addWidget(self.rbY, 0, 2, 1, 1)
        self.rbX = QtGui.QRadioButton(self.gridLayoutWidget_7)
        self.rbX.setMinimumSize(QtCore.QSize(64, 32))
        self.rbX.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "move/rotate on X Axis"))
        self.rbX.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("X-axis.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbX.setIcon(icon7)
        self.rbX.setIconSize(QtCore.QSize(26, 26))
        self.rbX.setChecked(False)
        self.rbX.setObjectName("rbX")
        self.gridLayout_9.addWidget(self.rbX, 0, 1, 1, 1)
        self.rbAxis = QtGui.QRadioButton(self.gridLayoutWidget_7)
        self.rbAxis.setMinimumSize(QtCore.QSize(64, 32))
        self.rbAxis.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "move/rotate on Selected Axis"))
        self.rbAxis.setText("")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("Rotate-Axis.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbAxis.setIcon(icon8)
        self.rbAxis.setIconSize(QtCore.QSize(26, 26))
        self.rbAxis.setChecked(True)
        self.rbAxis.setObjectName("rbAxis")
        self.gridLayout_9.addWidget(self.rbAxis, 0, 0, 1, 1)
        self.gridLayoutWidget_12 = QtGui.QWidget(self.ReferenceGroup)
        self.gridLayoutWidget_12.setGeometry(QtCore.QRect(12, 48, 132, 38))
        self.gridLayoutWidget_12.setObjectName("gridLayoutWidget_12")
        self.gridLayout_14 = QtGui.QGridLayout(self.gridLayoutWidget_12)
        self.gridLayout_14.setSpacing(2)
        self.gridLayout_14.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_14.setObjectName("gridLayout_14")
        self.rbOneObj = QtGui.QRadioButton(self.gridLayoutWidget_12)
        self.rbOneObj.setMinimumSize(QtCore.QSize(64, 32))
        self.rbOneObj.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Single Object\nselect Face or Edge to Move/Rotate object"))
        self.rbOneObj.setText("")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("one_obj.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbOneObj.setIcon(icon9)
        self.rbOneObj.setIconSize(QtCore.QSize(26, 26))
        self.rbOneObj.setChecked(True)
        self.rbOneObj.setObjectName("rbOneObj")
        self.gridLayout_14.addWidget(self.rbOneObj, 0, 0, 1, 1)
        self.gridLayoutWidget_13 = QtGui.QWidget(self.ReferenceGroup)
        self.gridLayoutWidget_13.setGeometry(QtCore.QRect(196, 48, 93, 38))
        self.gridLayoutWidget_13.setObjectName("gridLayoutWidget_13")
        self.gridLayout_15 = QtGui.QGridLayout(self.gridLayoutWidget_13)
        self.gridLayout_15.setSpacing(2)
        self.gridLayout_15.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_15.setObjectName("gridLayout_15")
        self.cbHierarchy = QtGui.QCheckBox(self.gridLayoutWidget_13)
        self.cbHierarchy.setMinimumSize(QtCore.QSize(47, 32))
        self.cbHierarchy.setMaximumSize(QtCore.QSize(64, 128))
        self.cbHierarchy.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Move/Rotate App::Part and Body\nhierarchy"))
        self.cbHierarchy.setText("")
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("hierarchy.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cbHierarchy.setIcon(icon10)
        self.cbHierarchy.setIconSize(QtCore.QSize(26, 26))
        self.cbHierarchy.setChecked(False)
        self.cbHierarchy.setObjectName("cbHierarchy")
        self.gridLayout_15.addWidget(self.cbHierarchy, 0, 0, 1, 1)
        self.ViewAlign = QtGui.QPushButton(self.gridLayoutWidget_13)
        self.ViewAlign.setEnabled(True)
        self.ViewAlign.setMinimumSize(QtCore.QSize(32, 32))
        self.ViewAlign.setMaximumSize(QtCore.QSize(32, 32))
        self.ViewAlign.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Align View to the selected Face"))
        self.ViewAlign.setText("")
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("face_view.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ViewAlign.setIcon(icon11)
        self.ViewAlign.setIconSize(QtCore.QSize(24, 24))
        self.ViewAlign.setCheckable(False)
        self.ViewAlign.setChecked(False)
        self.ViewAlign.setObjectName("ViewAlign")
        self.gridLayout_15.addWidget(self.ViewAlign, 0, 1, 1, 1)
        self.Controls_Group = QtGui.QGroupBox(self.dockWidgetContents)
        self.Controls_Group.setGeometry(QtCore.QRect(4, 140, 296, 93))
        self.Controls_Group.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Controls"))
        self.Controls_Group.setTitle(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Controls"))
        self.Controls_Group.setObjectName("Controls_Group")
        self.gridLayoutWidget_6 = QtGui.QWidget(self.Controls_Group)
        self.gridLayoutWidget_6.setGeometry(QtCore.QRect(4, 16, 289, 73))
        self.gridLayoutWidget_6.setObjectName("gridLayoutWidget_6")
        self.gridLayout_8 = QtGui.QGridLayout(self.gridLayoutWidget_6)
        self.gridLayout_8.setSizeConstraint(QtGui.QLayout.SetDefaultConstraint)
        self.gridLayout_8.setSpacing(2)
        self.gridLayout_8.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.Confirm_Move = QtGui.QPushButton(self.gridLayoutWidget_6)
        self.Confirm_Move.setMinimumSize(QtCore.QSize(48, 36))
        self.Confirm_Move.setMaximumSize(QtCore.QSize(60, 48))
        self.Confirm_Move.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Mover button\nClick it to enable\nMove/Rotation))
        self.Confirm_Move.setText("")
        self.Confirm_Move.setIcon(icon)
        self.Confirm_Move.setIconSize(QtCore.QSize(28, 28))
        self.Confirm_Move.setCheckable(True)
        self.Confirm_Move.setChecked(False)
        self.Confirm_Move.setObjectName("Confirm_Move")
        self.gridLayout_8.addWidget(self.Confirm_Move, 0, 0, 1, 1)
        self.gridLayout_10 = QtGui.QGridLayout()
        self.gridLayout_10.setSpacing(2)
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.DS_MoveInput = QtGui.QDoubleSpinBox(self.gridLayoutWidget_6)
        self.DS_MoveInput.setEnabled(False)
        self.DS_MoveInput.setMinimumSize(QtCore.QSize(64, 0))
        self.DS_MoveInput.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.DS_MoveInput.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "translate (+/- mm)"))
        self.DS_MoveInput.setDecimals(2)
        self.DS_MoveInput.setMinimum(-999.0)
        self.DS_MoveInput.setMaximum(999.0)
        self.DS_MoveInput.setObjectName("DS_MoveInput")
        self.gridLayout_10.addWidget(self.DS_MoveInput, 0, 1, 1, 1)
        self.label_2 = QtGui.QLabel(self.gridLayoutWidget_6)
        font = QtGui.QFont()
        font.setWeight(75)
        font.setBold(True)
        self.label_2.setFont(font)
        self.label_2.setToolTip("")
        self.label_2.setText("deg")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout_10.addWidget(self.label_2, 1, 0, 1, 1)
        self.label = QtGui.QLabel(self.gridLayoutWidget_6)
        font = QtGui.QFont()
        font.setWeight(75)
        font.setBold(True)
        self.label.setFont(font)
        self.label.setToolTip("")
        self.label.setText("mm")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout_10.addWidget(self.label, 0, 0, 1, 1)
        self.DS_RotateInput = QtGui.QDoubleSpinBox(self.gridLayoutWidget_6)
        self.DS_RotateInput.setEnabled(False)
        self.DS_RotateInput.setMinimumSize(QtCore.QSize(48, 0))
        self.DS_RotateInput.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "rotate (+/- deg)"))
        self.DS_RotateInput.setDecimals(1)
        self.DS_RotateInput.setMinimum(-180.0)
        self.DS_RotateInput.setMaximum(180.0)
        self.DS_RotateInput.setObjectName("DS_RotateInput")
        self.gridLayout_10.addWidget(self.DS_RotateInput, 1, 1, 1, 1)
        self.gridLayout_8.addLayout(self.gridLayout_10, 0, 1, 1, 1)
        self.Undo_Move = QtGui.QPushButton(self.gridLayoutWidget_6)
        self.Undo_Move.setEnabled(False)
        self.Undo_Move.setMinimumSize(QtCore.QSize(48, 36))
        self.Undo_Move.setMaximumSize(QtCore.QSize(60, 48))
        self.Undo_Move.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Undo last action"))
        self.Undo_Move.setText("")
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("Undo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Undo_Move.setIcon(icon12)
        self.Undo_Move.setIconSize(QtCore.QSize(24, 24))
        self.Undo_Move.setCheckable(False)
        self.Undo_Move.setChecked(False)
        self.Undo_Move.setObjectName(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Undo_Move"))
        self.gridLayout_8.addWidget(self.Undo_Move, 0, 3, 1, 1)
        self.gridLayout_11 = QtGui.QGridLayout()
        self.gridLayout_11.setSpacing(2)
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.DS_MoveInput_Delta = QtGui.QDoubleSpinBox(self.gridLayoutWidget_6)
        self.DS_MoveInput_Delta.setEnabled(False)
        self.DS_MoveInput_Delta.setMinimumSize(QtCore.QSize(64, 0))
        self.DS_MoveInput_Delta.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.DS_MoveInput_Delta.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "translation\nincrement"))
        self.DS_MoveInput_Delta.setDecimals(2)
        self.DS_MoveInput_Delta.setMinimum(0.01)
        self.DS_MoveInput_Delta.setMaximum(500.0)
        self.DS_MoveInput_Delta.setProperty("value", 1.0)
        self.DS_MoveInput_Delta.setObjectName("DS_MoveInput_Delta")
        self.gridLayout_11.addWidget(self.DS_MoveInput_Delta, 0, 1, 1, 1)
        self.label_3 = QtGui.QLabel(self.gridLayoutWidget_6)
        font = QtGui.QFont()
        font.setWeight(75)
        font.setBold(True)
        self.label_3.setFont(font)
        self.label_3.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "rotation\nincrement"))
        self.label_3.setText("+/-")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.gridLayout_11.addWidget(self.label_3, 1, 0, 1, 1)
        self.label_4 = QtGui.QLabel(self.gridLayoutWidget_6)
        font = QtGui.QFont()
        font.setWeight(75)
        font.setBold(True)
        self.label_4.setFont(font)
        self.label_4.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "translation\nincrement"))
        self.label_4.setStatusTip("")
        self.label_4.setWhatsThis("")
        self.label_4.setText("+/-")
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.gridLayout_11.addWidget(self.label_4, 0, 0, 1, 1)
        self.DS_RotateInput_Delta = QtGui.QDoubleSpinBox(self.gridLayoutWidget_6)
        self.DS_RotateInput_Delta.setEnabled(False)
        self.DS_RotateInput_Delta.setMinimumSize(QtCore.QSize(48, 0))
        self.DS_RotateInput_Delta.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "rotation\nincrement"))
        self.DS_RotateInput_Delta.setDecimals(1)
        self.DS_RotateInput_Delta.setMinimum(0.1)
        self.DS_RotateInput_Delta.setMaximum(180.0)
        self.DS_RotateInput_Delta.setProperty("value", 15.0)
        self.DS_RotateInput_Delta.setObjectName("DS_RotateInput_Delta")
        self.gridLayout_11.addWidget(self.DS_RotateInput_Delta, 1, 1, 1, 1)
        self.gridLayout_8.addLayout(self.gridLayout_11, 0, 2, 1, 1)
        self.Label_2 = QtGui.QLabel(self.dockWidgetContents)
        self.Label_2.setGeometry(QtCore.QRect(102, 30, 186, 33))
        self.Label_2.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Mover Tools\nClick on Mover button\nto enable object Manipulation"))
        self.Label_2.setText(QtCore.QT_TRANSLATE_NOOP("Manipulator", "To enable object Manipulation"))
        self.Label_2.setObjectName("Label_2")
        DockWidget.setWidget(self.dockWidgetContents)

###############################################################################################################
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(closeW_b64))
        self.close.setIconSize(QtCore.QSize(btn_sm_sizeX,btn_sm_sizeY))
        self.close.setIcon(QtGui.QIcon(pm))
        self.close.clicked.connect(close_mover)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(minimize_b64))
        self.dock_minimize.setIconSize(QtCore.QSize(btn_sm_sizeX,btn_sm_sizeY))
        self.dock_minimize.setIcon(QtGui.QIcon(pm))
        self.dock_minimize.clicked.connect(Mv_minimz)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(un_dock_b64))
        self.dock_float.setIconSize(QtCore.QSize(btn_sm_sizeX,btn_sm_sizeY))
        self.dock_float.setIcon(QtGui.QIcon(pm))
        self.dock_float.clicked.connect(Mv_undock)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Move_purple_b64))
        self.Confirm_Move.setIconSize(QtCore.QSize(btn_sizeX,btn_sizeY))
        self.Confirm_Move.setIcon(QtGui.QIcon(pm))
        #self.Confirm_Move.clicked.connect(self.onMove)
        self.Confirm_Move.toggled.connect(self.onMove_toggled)
        # http://www.qtcentre.org/threads/61391-QPushButton-State-(in-PyQt)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Undo_b64))
        self.Undo_Move.setIconSize(QtCore.QSize(btn_sizeX,btn_sizeY))
        self.Undo_Move.setIcon(QtGui.QIcon(pm))
        self.Undo_Move.clicked.connect(self.onUndo)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(help_b64))
        self.Help_Mover.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.Help_Mover.setIcon(QtGui.QIcon(pm))
        self.Help_Mover.clicked.connect(self.onHelp)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(X_b64))
        self.rbX.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbX.setIcon(QtGui.QIcon(pm))
        self.rbX.clicked.connect(self.onAxis)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Y_b64))
        self.rbY.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbY.setIcon(QtGui.QIcon(pm))
        self.rbY.clicked.connect(self.onAxis)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Z_b64))
        self.rbZ.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbZ.setIcon(QtGui.QIcon(pm))
        self.rbZ.clicked.connect(self.onAxis)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Rotate_Axis_b64))
        self.rbAxis.setIconSize(QtCore.QSize(btn_sm_sizeX,btn_sm_sizeY))
        self.rbAxis.setIcon(QtGui.QIcon(pm))
        self.rbAxis.clicked.connect(self.onAxis)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(One_Obj_b64))
        self.rbOneObj.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbOneObj.setIcon(QtGui.QIcon(pm))
        self.rbOneObj.setEnabled(False)
        #self.rbOneObj.setCheckable(False)
        #self.rbOneObj.setChecked(True)
        # self.rbNormal_Inv.clicked.connect(self.setNormal)
        # pm = QtGui.QPixmap()
        # pm.loadFromData(base64.b64decode(Two_Objs_b64))
        # self.rbTwoObjs.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        # self.rbTwoObjs.setIcon(QtGui.QIcon(pm))
        # self.rbTwoObjs.setEnabled(False)
        # self.rbNormal_Inv.clicked.connect(self.setNormal)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Hierarchy_b64))
        self.cbHierarchy.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.cbHierarchy.setIcon(QtGui.QIcon(pm))
        self.cbHierarchy.setChecked(True)
        #self.cbHierarchy.setEnabled(False)
        self.cbHierarchy.clicked.connect(self.onHierarchy)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Face_View_b64))
        self.ViewAlign.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.ViewAlign.setIcon(QtGui.QIcon(pm))
        self.ViewAlign.clicked.connect(self.onViewAlign)
        ####
        self.DS_RotateInput.setMinimum(-Max_angle)
        self.DS_RotateInput.setMaximum(Max_angle)
        self.DS_MoveInput.setMinimum(-Max_move)
        self.DS_MoveInput.setMaximum(Max_move)
        self.DS_RotateInput_Delta.setProperty("value", Step_initial_angle)
        self.DS_RotateInput.setSingleStep(self.DS_RotateInput_Delta.value())

        ####
        #self.MoveDial.valueChanged.connect(self.on_MoveDial)       # connection
        #self.RotateDial.valueChanged.connect(self.on_RotateDial)       # connection
        self.DS_MoveInput.valueChanged.connect(self.on_MoveDS)
        self.DS_RotateInput.valueChanged.connect(self.on_RotateDS)
        self.DS_MoveInput_Delta.valueChanged.connect(self.on_MoveDS_Delta)
        self.DS_RotateInput_Delta.valueChanged.connect(self.on_RotateDS_Delta)

###############################################################################################################
        self.retranslateUi(DockWidget)
        QtCore.QMetaObject.connectSlotsByName(DockWidget)
        DockWidget.setTabOrder(self.dock_float, self.dock_minimize)
        DockWidget.setTabOrder(self.dock_minimize, self.close)
        DockWidget.setTabOrder(self.close, self.Confirm_Move)


## retraslateUi Qt5 compatibility #############################################################################################################
    def retranslateUi(self, DockWidget):
        pass
    #    DockWidget.setWindowTitle("Moving tool")
    #    self.dock_float.setToolTip("expand")
    #    self.dock_minimize.setToolTip("minimize")
    #    self.close.setToolTip("close")
        #self.Move.setToolTip("Move selected")
        #self.Align.setToolTip("Align objects\nFirst object is the Reference")
        #self.Help_Align.setToolTip("Help tips")
        #self.Undo_Align.setToolTip("Undo last Alignment")
        #self.Label_Align_Gui.setText("<b>Ctrl+Click to add selection:<br>Planes/Faces and Edges/Axis</b>")
        #self.ReferenceGroup.setTitle("Reference")
        #self.AlignGroup.setTitle("Align on")

### ------------------------------------------------------------------------------------ ###
### ---------code to be inserted and remove from new generation------------------------- ###
### ------------------------------------------------------------------------------------ ###
###############################################################################################################
# widgets connected functions

    def onDoubleClick(self):
        global inv_view

        inv_view = False
##
    def onViewAlign(self):
        """ macro Macro_Align_View_to_Face
            App:Part and Body compliant"""
        global selobject, sel, double_click_dly, inv_view, use_hierarchy

        def pointAt(normal, up):
            z = normal
            y = up
            x = y.cross(z)
            y = z.cross(x)

            rot = FreeCAD.Matrix()
            rot.A11 = x.x
            rot.A21 = x.y
            rot.A31 = x.z
            rot.A12 = y.x
            rot.A22 = y.y
            rot.A32 = y.z
            rot.A13 = z.x
            rot.A23 = z.y
            rot.A33 = z.z

            return FreeCAD.Placement(rot).Rotation

        #try:
        sl=FreeCADGui.Selection.getSelectionEx()
        if len (sl)>0:
            if len (sl[0].SubObjects)>0:
                if 'Vertex' not in str(sl[0].SubObjects[0]) and 'Edge' not in str(sl[0].SubObjects[0]):
                    QtCore.QTimer.singleShot(double_click_dly,self.onDoubleClick)
                    ob=sl[0]
                    #faceSel = ob.SubObjects[0]
                    norm, plcm, top, bbC = get_normal_placement_hierarchy (sl[0])
                    cam = FreeCADGui.ActiveDocument.ActiveView.getCameraNode()

                    if inv_view==1:
                        sayerr('double click: inversion View')
                        #dir = faceSel.normalAt(0,0)*-1
                        dir = norm*-1
                    else:
                        sayw('single click: standard View')
                        #dir = faceSel.normalAt(0,0)
                        dir = norm
                    if dir.z == 1 :
                        rot = pointAt(dir, FreeCAD.Vector(0.0,1.0,0.0))
                    elif dir.z == -1 :
                        rot = pointAt(dir, FreeCAD.Vector(0.0,1.0,0.0))
                    else :
                        rot = pointAt(dir, FreeCAD.Vector(0.0,0.0,-1.0))

                    cam.orientation.setValue(rot.Q)
                    #FreeCADGui.SendMsgToActiveView("ViewSelection")
                    FreeCADGui.SendMsgToActiveView("ViewFit")
                    inv_view = True
                else:
                    sayerr('select a Face!')
            else:
                sayerr('select a Face!')
##
    def onAxis(self):
        global DSMove_prev_Val, DSRotate_prev_Val
        global selobject, sel
        global initial_placement, last_selection, objs

        last_selection.append(sel[0].Object)
        obj = sel[0].Object
        initial_placement.append(obj.Placement)
        objs.append(obj)
        DSMove_prev_Val=0
        DSRotate_prev_Val=0
        self.DS_MoveInput.setValue(0.0)
        self.DS_RotateInput.setValue(0.0)
##

    def on_MoveDS_Delta(self, val):
        self.DS_MoveInput.setSingleStep(self.DS_MoveInput_Delta.value())
        # print self.DS_MoveInput_Delta.value()
        # print self.DS_MoveInput.singleStep
##

    def on_RotateDS_Delta(self, val):
        self.DS_RotateInput.setSingleStep(self.DS_RotateInput_Delta.value())
##

    #def on_MoveDial(self, val):
    def on_MoveDS(self, val):
        global selobject, sel
        global initial_placement, last_selection, objs
        global DSMove_prev_Val, in_hierarchy, use_hierarchy

        #x=self.DS_MoveInput.value()
        #sign = lambda x: x and (1, -1)[x < 0]
        #delta=math.copysign(1,x)

        #print val
        self.DS_MoveInput.setSingleStep(self.DS_MoveInput_Delta.value())
        #print self.DS_MoveInput.singleStep
        delta=self.DS_MoveInput.value()-DSMove_prev_Val
        DSMove_prev_Val=self.DS_MoveInput.value()
        #delta=sign
        #print 'delta '+str(delta)
        o = objs[0]
        #top_lvl=None
        ##if use_hierarchy:
        #top_lvl=get_top_level(o)
        #if top_lvl is not None:
        #    say('object in App::Part hierarchy or Body')
        #    #say(top_lvl.Name)
        #    pass

        #print 'delta '+str(delta)
        #deltaVect = FreeCAD.Vector(v.x,v.y,v.z)*delta
        norm=FreeCAD.Vector(1,0,0)
        #if self.rbAxis.isChecked:
        if len(sel[0].SubObjects)>0: #Faces or Edges
            if 'Face' in str(sel[0].SubObjects[0]) or 'Edge' in str(sel[0].SubObjects[0]):
                #say('Face or Edge selected'); sayw(sel[0].Object.Name)
                #norm = sel[0].SubObjects[0].normalAt(0,0)
                norm, plcm, top_level_obj, bbC = get_normal_placement_hierarchy (sel[0])
                if top_level_obj is not None:
                    top_level_obj_Name=top_level_obj.Name
                else:
                    top_level_obj_Name=sel[0].Object.Name
                rot_center=bbC

                # if in_hierarchy and not use_hierarchy:
                #     norm = sel[0].SubObjects[0].normalAt(0,0)
                #     rot_center=sel[0].SubObjects[0].BoundBox.Center
                # else:
                #     rot_center=bbC
                #Draft.makePoint(rot_center) #  creating a point takes selection
                say('norm '+str(norm)+' plcm '+str(plcm)+' top '+top_level_obj_Name)
        #        rot_center=sel[0].SubObjects[0].BoundBox.Center
        else: ## Object selected
            #say('Object selected')
            if hasattr(o,'Shape'):
                norm = o.Shape.Faces[0].normalAt(0,0)
                top_level_obj=o
            else: #App::Part
                norm=FreeCAD.Vector(1,0,0)
                top_level_obj=o
            #say('selected object, using Face[0]')
        #norm=FreeCAD.Vector(1,0,0)
        #print 'rbX', self.rbX.isChecked()
        #say('Vector '+str(norm))
        if self.rbX.isChecked():
            norm=FreeCAD.Vector(1,0,0)
        elif self.rbY.isChecked():
            norm=FreeCAD.Vector(0,1,0)
        elif self.rbZ.isChecked():
            norm=FreeCAD.Vector(0,0,1)
        if in_hierarchy and use_hierarchy:  ## only ok for Faces and not for Normal ATM
            deltaVect = norm*delta
            newshape = Part.Shape() #o.Shape.copy()
            #newshape = Part.Shape
            newshape.Placement = top_level_obj.Placement
            newshape.translate(deltaVect)
            #o.Placement=newshape.Placement
            top_level_obj.Placement=newshape.Placement
        elif in_hierarchy and not use_hierarchy:  ## only ok for Faces and not for Normal ATM
            sayerr('subobject moved alone')
            deltaVect = norm*delta
            #newshape = o.Shape.copy()
            newshape = Part.Shape()
            newshape.Placement = o.Placement #o.Placement
            newshape.translate(deltaVect)
            o.Placement=newshape.Placement
        else:
            deltaVect = norm*delta
            newshape = o.Shape.copy()
            newshape.translate(deltaVect)
            o.Placement=newshape.Placement
        #objs[0].Placement = FreeCAD.Vector(pointsDirection[int(val)])
        #self.label_1.setText("Position (" + str(float(val)/10) + " mm)")
        #self.DS_horizontalSlider.setValue(float(val))
        # FreeCAD.ActiveDocument.recompute()        #say (self.MoveDial.value())

##
    def on_RotateDS(self, val):
        global selobject, sel
        global initial_placement, last_selection, objs
        global DSRotate_prev_Val

        #x=self.DS_MoveInput.value()
        #sign = lambda x: x and (1, -1)[x < 0]
        #delta=math.copysign(1,x)
        self.DS_RotateInput.setSingleStep(self.DS_RotateInput_Delta.value())
        delta=self.DS_RotateInput.value()-DSRotate_prev_Val
        DSRotate_prev_Val=self.DS_RotateInput.value()
        #delta=sign
        o = objs[0]
        #print 'delta '+str(delta)
        #deltaVect = FreeCAD.Vector(v.x,v.y,v.z)*delta
        norm=FreeCAD.Vector(1,0,0)
        if in_hierarchy:
            if sel[0].Object.TypeId == 'App::Link':
                shp = Part.getShape(sel[0].Object)
            else:
                shp = sel[0].Object.Shape
            rot_center=shp.BoundBox.Center
        else:
            if o.TypeId == 'App::Link':
                shp = Part.getShape(o)
            else:
                shp = o.Shape
            rot_center=shp.BoundBox.Center
        #elif self.rbAxis.isChecked:
        if len(sel[0].SubObjects)>0: #Faces or Edges
            if 'Face' in str(sel[0].SubObjects[0]) or 'Edge' in str(sel[0].SubObjects[0]):
                norm, plcm, top_level_obj, bbC = get_normal_placement_hierarchy (sel[0])
                if top_level_obj is not None:
                    top_level_obj_Name=top_level_obj.Name
                else:
                    top_level_obj_Name=sel[0].Object.Name
                #if in_hierarchy and not use_hierarchy:
                #    norm = sel[0].SubObjects[0].normalAt(0,0)
                #    rot_center=sel[0].SubObjects[0].BoundBox.Center
                #else:
                rot_center=bbC
                say('norm '+str(norm)+' plcm '+str(plcm)+' top '+top_level_obj_Name)
                sayw('Face in Hierarchy')
        else: ## Object selected
            if hasattr(o,'Shape'):
                norm = o.Shape.Faces[0].normalAt(0,0).normalize()
                rot_center=o.Shape.BoundBox.Center
                top_level_obj=o
            elif o.TypeId == 'App::Link':
                shp = Part.getShape(o)
                norm = shp.Faces[0].normalAt(0,0).normalize()
                rot_center=shp.BoundBox.Center
                top_level_obj=o
            else: # App::Part container
                norm=FreeCAD.Vector(1,0,0)
                rot_center=o.Placement.Base
                top_level_obj=o
            #say('selected object, using Face[0]')
        if self.rbX.isChecked():
            norm=FreeCAD.Vector(1,0,0)
        elif self.rbY.isChecked():
            norm=FreeCAD.Vector(0,1,0)
        elif self.rbZ.isChecked():
            norm=FreeCAD.Vector(0,0,1)
        #    norm=FreeCAD.Vector(1,0,0)
        #say('Vector '+str(norm))
        #deltaVect = norm*delta
        ## OK rotation on axis
        #rot_center=o.Shape.BoundBox.Center
        if in_hierarchy and use_hierarchy:  ## only ok for Faces and not for Normal ATM
            rot_axis=norm
            rot_angle=delta
            newshape = Part.Shape() #o.Shape.copy()
            #newshape = Part.Shape
            newshape.Placement = top_level_obj.Placement
            # prevSel=sel
            # prevSelObj=selobject
            # Draft.makePoint(rot_center) # creating a point takes selection
            # sel=prevSel
            # selobject=prevSelObj
            # FreeCADGui.Selection.addSelection(selobject[0])         # Select an object
            # #FreeCADGui.Selection.addSelectionEx(sel[0])
            newshape.rotate(DraftVecUtils.tup(rot_center), DraftVecUtils.tup(rot_axis), rot_angle)
            #o.Placement=newshape.Placement
            top_level_obj.Placement=newshape.Placement
        elif in_hierarchy and not use_hierarchy:  ## only ok for Faces and not for Normal ATM
            sayerr('subobject moved alone')
            rot_axis=norm
            rot_angle=delta
            newshape = Part.Shape()
            newshape.Placement = o.Placement #o.Placement
            newshape.rotate(DraftVecUtils.tup(rot_center), DraftVecUtils.tup(rot_axis), rot_angle)
            o.Placement=newshape.Placement
        else:
            rot_axis=norm
            rot_angle=delta
            newshape = o.Shape.copy()
            #shape.Placement = o.Placement
            newshape.rotate(DraftVecUtils.tup(rot_center), DraftVecUtils.tup(rot_axis), rot_angle)
            o.Placement = newshape.Placement

        #rot_axis=norm
        #rot_angle=delta
        #newshape = o.Shape.copy()
        # #shape.Placement = o.Placement
        #newshape.rotate(DraftVecUtils.tup(rot_center), DraftVecUtils.tup(rot_axis), rot_angle)
        #o.Placement = newshape.Placement
        # FreeCAD.ActiveDocument.recompute()        #say (self.MoveDial.value())
##

    def setReference(self):
        if self.rbBBox.isChecked():
            say("centering on Bounding Boxes")
            type=0
        else:
            say("centering on Center of Mass")
            type=1
##
    def setNormal(self):
        if self.rbNormal.isChecked():
            normal=0
            say("Align on NormalAt")
        else:
            say("Align on Inverted NormalAt")
            normal=1
##
    def onHierarchy(self):
        pass
##

    def onMove_toggled(self,checked):
        global selobject, sel
        global initial_placement, last_selection, objs
        global sO, DSMove_prev_Val, DSRotate_prev_Val

        #say("Move clicked")
        #Move()
        #self.MoveDial.setValue(0.0)
        #self.RotateDial.setValue(0.0)
        #self.RotateDial.setValue("{0:.2f}".format(0.0))
        #if self.Confirm_Move.isChecked:
        if FreeCAD.ActiveDocument is not None:
            if checked:
                for ob in FreeCAD.ActiveDocument.Objects:
                    FreeCADGui.Selection.removeSelection(ob)
                sayerr('starting!')
                self.rowOverride = True
                self.DS_MoveInput.setValue(0.0)
                self.DS_RotateInput.setValue(0.0)
                DSMove_prev_Val=0
                DSRotate_prev_Val=0
                #self.DS_MoveInput.setEnabled(True)
                #self.DS_RotateInput.setEnabled(True)
                #selobject = FreeCADGui.Selection.getSelection()           # Select an object
                #sel       = FreeCADGui.Selection.getSelectionEx()         # Select an subObject
                self.Undo_Move.setEnabled(False)
                self.cbHierarchy.setEnabled(False)
                sO=SelObserver()
                FreeCADGui.Selection.addObserver(sO) # install resident function
            else:
                sayerr('removing observer')
                self.rowOverride = False
                self.DS_MoveInput.setEnabled(False)
                self.DS_RotateInput.setEnabled(False)
                self.DS_MoveInput_Delta.setEnabled(False)
                self.DS_RotateInput_Delta.setEnabled(False)
                self.Undo_Move.setEnabled(True)
                self.cbHierarchy.setEnabled(True)
                DSMove_prev_Val=0
                DSRotate_prev_Val=0
                try:
                    FreeCADGui.Selection.removeObserver(sO)   # desinstalle la fonction residente SelObserver
                except:
                    sayerr('not able to remove observer')
                for obj in FreeCAD.ActiveDocument.Objects:
                    FreeCADGui.Selection.removeSelection(obj)
                #self.MoveDial.setValue(0.0)
                #self.RotateDial.setValue(0.0)
##
    def onUndo(self):
        say("Undo clicked")
        self.DS_MoveInput.setValue(0.0)
        self.DS_RotateInput.setValue(0.0)
        Undo()
##
    def onHelp(self):
        msg="""<b>Mover Tools</b><br>
        <b>Clik on Mover button</b> to start the Manipulation.<br>
        Select Face or Plane (Normal At), Edge or Axis<br>
        as reference Axis to be moved/rotated<br>
        and change the Rotation/Position with the <i>'Move/Rotate'</i> spin boxes.<br>
        <i>Note:</i><br>The <b>first Selection</b> is the
        Reference for Moving/Rotating<br>
        <br><b>Mover Tools</b> work with <b>Part, App::Part Body</b> and <b>Link</b> objects<br>
        <font color = blue><b>Version:
        """+__version__+"""</b></font>"""
        QtGui.QApplication.restoreOverrideCursor()
        res=''
        QtGui.QApplication.restoreOverrideCursor()
        res = QtGui.QMessageBox.question(None,"Help",msg,QtGui.QMessageBox.Ok)
##

###############################################################################################################
def Mv_centerOnScreen (widg):
    '''centerOnScreen()
    Centers the window on the screen.'''
    # sayw(widg.width());sayw(widg.height())
    # sayw(widg.pos().x());sayw(widg.pos().y())
    resolution = QtGui.QDesktopWidget().screenGeometry()
    xp=(resolution.width() / 2) - sizeX/2 # - (KSUWidget.frameSize().width() / 2)
    yp=(resolution.height() / 2) - sizeY/2 # - (KSUWidget.frameSize().height() / 2))
    # xp=widg.pos().x()-sizeXMax/2;yp=widg.pos().y()#+sizeY/2
    widg.setGeometry(xp, yp, sizeX, sizeY)
##
def Mv_singleInstance():
    app = QtGui.QApplication #QtGui.qApp
    for i in app.topLevelWidgets():
        #say (str(i.objectName()))
        if i.objectName() == "Mover":
            say (str(i.objectName()))
            #i.close()
            #i.deleteLater()
            say ('closed')
            return False
    t=FreeCADGui.getMainWindow()
    dw=t.findChildren(QtGui.QDockWidget)
    #say( str(dw) )
    for i in dw:
        #say (str(i.objectName()))
        if str(i.objectName()) == "Mover": #"kicad StepUp 3D tools":
            say (str(i.objectName())+' docked')
            #i.deleteLater()
            return False
    return True
##

##############################################################

doc=FreeCAD.ActiveDocument

if Mv_singleInstance():

    MVDockWidget = QtGui.QDockWidget()          # create a new dckwidget
    MVDockWidget.ui = Ui_DockWidget()   #Ui_AlignDockWidget()           # myWidget_Ui()             # load the Ui script
    MVDockWidget.ui.setupUi(MVDockWidget) # setup the ui
    #ui = Ui_AlignDockWidget()
    #ui.setupUi(AlignDockWidget)
    #AlignDockWidget.show()

    MVDockWidget.setObjectName("Mover")

    MVDockWidget.setFloating(True)  #undock
    MVDockWidget.resize(sizeX,sizeY)
    MVDockWidget.activateWindow()
    MVDockWidget.raise_()

    #MVDockWidget.show()

    MVDockWidget.setFeatures( QtGui.QDockWidget.DockWidgetMovable | QtGui.QDockWidget.DockWidgetFloatable) #|QtGui.QDockWidget.DockWidgetClosable )

    paramGet = FreeCAD.ParamGet("User parameter:BaseApp/Preferences/MainWindow")
    if len(paramGet.GetString("StyleSheet"))>0: #we are using a StyleSheet
        MVDockWidget.setStyleSheet('QPushButton {border-radius: 0px; padding: 1px 2px;}')

    MVmw = FreeCADGui.getMainWindow()                 # PySide # the active qt window, = the freecad window since we are inside it
    MVmw.addDockWidget(QtCore.Qt.RightDockWidgetArea,MVDockWidget)
    #MVDockWidget.show()
    Mv_undock()
    Mv_centerOnScreen(MVDockWidget)
    use_hierarchy=MVDockWidget.ui.cbHierarchy.isChecked()

### ------------------------------------------------------------------------------------ ###


def Undo():
    say('Undo')
    global initial_placement, last_selection
    global moving, rotating
    global objs, objs_plc
    global objs_moved, plc_moved

    if len(last_selection) > 0:
        MVDockWidget.ui.Undo_Move.setEnabled(True)
        lls = len(last_selection)
        obj = last_selection[lls-1] #.Object
        say ('last selection: ' + obj.Name)
        #obj.Placement.Base =initial_placement
        lip = len (initial_placement)
        obj.Placement = initial_placement[lip-1]
        initial_placement.pop(lip-1)
        last_selection.pop(lls-1)
        # FreeCAD.ActiveDocument.recompute()
    if len(last_selection) == 0:
        objs = []
        last_selection = []
        MVDockWidget.ui.Undo_Move.setEnabled(False)
##


def reset_prop_shapes(obj):

    s=obj.Shape
    #say('resetting props #2')
    r=[]
    t=s.copy()
    for i in t.childShapes():
        c=i.copy()
        c.Placement=t.Placement.multiply(c.Placement)
        r.append((i,c))

    w=t.replaceShape(r)
    w.Placement=FreeCAD.Placement()
    Part.show(w)
    #say(w)
    #
    #FreeCADGui.ActiveDocument.ActiveObject.ShapeColor=FreeCADGui.ActiveDocument.Part__Feature.ShapeColor
    #FreeCADGui.ActiveDocument.ActiveObject.LineColor=FreeCADGui.ActiveDocument.Part__Feature.LineColor
    #FreeCADGui.ActiveDocument.ActiveObject.PointColor=FreeCADGui.ActiveDocument.Part__Feature.PointColor
    #FreeCADGui.ActiveDocument.ActiveObject.DiffuseColor=FreeCADGui.ActiveDocument.Part__Feature.DiffuseColor
    FreeCADGui.ActiveDocument.ActiveObject.ShapeColor=FreeCADGui.ActiveDocument.getObject(obj.Name).ShapeColor
    FreeCADGui.ActiveDocument.ActiveObject.LineColor=FreeCADGui.ActiveDocument.getObject(obj.Name).LineColor
    FreeCADGui.ActiveDocument.ActiveObject.PointColor=FreeCADGui.ActiveDocument.getObject(obj.Name).PointColor
    FreeCADGui.ActiveDocument.ActiveObject.DiffuseColor=FreeCADGui.ActiveDocument.getObject(obj.Name).DiffuseColor
    new_label=obj.Label
    FreeCAD.ActiveDocument.removeObject(obj.Name)
    FreeCAD.ActiveDocument.recompute()
    FreeCAD.ActiveDocument.ActiveObject.Label=new_label
    rstObj=FreeCAD.ActiveDocument.ActiveObject
    #say(rstObj)
    #

    return rstObj
##

##################################################################################################
class SelObserver:
    def addSelection(self, document, object, element, position):  # Selection
        global ui
        global selobject, sel
        global initial_placement, last_selection, objs
        global DSMove_prev_Val, DSRotate_prev_Val, in_hierarchy, use_hierarchy


        use_hierarchy=MVDockWidget.ui.cbHierarchy.isChecked()

        if 1:#try:
            selobject = FreeCADGui.Selection.getSelection()           # Select an object
            sel       = FreeCADGui.Selection.getSelectionEx()         # Select an subObject

            #ui.label_1.setText("Length axis (first object) : " + str(sel[0].SubObjects[0].Length) + " mm")
            if MVDockWidget.ui.rbOneObj.isChecked:
                if len(selobject) == 1 or len(sel) == 1:# or (len(selobject) == 1 and len(sel) == 1):
                    if len(sel[0].SubObjects)>0: #Faces or Edges
                        if 'Face' in str(sel[0].SubObjects[0]) or 'Edge' in str(sel[0].SubObjects[0]):
                            # if 'Edge' in str(sel[0].SubObjects[0]):
                            #     try:
                            #         sayerr(sel[0].SubObjects[0].Curve)
                            #         if 'Circle' in str(sel[0].SubObjects[0].Curve):
                            #             sayerr('Circle radius '+str(sel[0].SubObjects[0].Curve.Radius))
                            #             f1=sel[0].Object.Shape.Faces[0]
                            #             FreeCAD.ActiveDocument.addObject("Part::Circle","testCircle")
                            #             FreeCAD.ActiveDocument.testCircle.Radius=2.000
                            #             FreeCAD.ActiveDocument.testCircle.Angle0=0.000
                            #             FreeCAD.ActiveDocument.testCircle.Angle1=360.000
                            #             FreeCAD.ActiveDocument.testCircle.Placement=f1.Placement
                            #             f=Part.Face(Part.Wire(FreeCAD.ActiveDocument.testCircle.Shape.Edges[0]))
                            #             Part.show(f)
                            #     except:
                            #         pass
                            MVDockWidget.ui.DS_MoveInput.setEnabled(True)
                            MVDockWidget.ui.DS_RotateInput.setEnabled(True)
                            MVDockWidget.ui.DS_MoveInput_Delta.setEnabled(True)
                            MVDockWidget.ui.DS_RotateInput_Delta.setEnabled(True)
                            sayw('starting')
                            objs = []
                            if len (last_selection)>0:
                                say ('last selection: ' + last_selection[0].Name)
                                for o in last_selection:
                                    say('sel list ' + o.Name) #o.Object.Name)
                            sayw('selecting')
                            o = sel[0].Object
                            top_lvl=None
                            #if in_hierarchy:
                            top_lvl=get_top_level(o)
                            #sayerr(top_lvl.Name)
                            if top_lvl is not None:
                                say('object in App::Part hierarchy or Body')
                                in_hierarchy=True
                                #say(top_lvl.Name)
                                #pass
                            else:
                                say('object Part')
                                in_hierarchy=False
                            if in_hierarchy and use_hierarchy:
                                say('in hierarchy and use hierarchy')
                                last_selection.append(top_lvl) #(sel[0])
                                obj = top_lvl #sel[0].Object
                                initial_placement.append(obj.Placement)
                                objs.append(obj)
                                say ('initial Plcm '+str(obj.Placement))
                                DSMove_prev_Val=0
                                DSRotate_prev_Val=0
                                MVDockWidget.ui.DS_MoveInput.setValue(0.0)
                                MVDockWidget.ui.DS_RotateInput.setValue(0.0)
                            else:
                                last_selection.append(sel[0].Object)
                                obj = sel[0].Object
                                initial_placement.append(obj.Placement)
                                objs.append(obj)
                                say ('initial Plcm '+str(obj.Placement))
                                DSMove_prev_Val=0
                                DSRotate_prev_Val=0
                                MVDockWidget.ui.DS_MoveInput.setValue(0.0)
                                MVDockWidget.ui.DS_RotateInput.setValue(0.0)
                            say ('last selection: ' + obj.Name)
                            for o in last_selection:
                                say('sel list ' + o.Name) #o.Object.Name)
                        else: #Vertex not allowed in selection
                            MVDockWidget.ui.DS_MoveInput.setEnabled(False)
                            MVDockWidget.ui.DS_RotateInput.setEnabled(False)
        if 0:#except:
            sayerr('restarted')


#s=SelObserver()
#FreeCADGui.Selection.addObserver(s)                    # installe la fonction en mode resident
###################################################################################################
