#!/usr/bin/python
# -*- coding: utf-8 -*-
#****************************************************************************
#*                                                                          *
#*  Copyright (c) 2020                                                      *
#*  Maurice easyw@katamail.com                                              *
#*                                                                          *
#*   code partially based on:                                               *
#*                                                                          *
# evolution of Macro_CenterFace                                             *
# some part of Macro WorkFeature                                            *
# and assembly2                                                             *
#                                                                           *
# center objs faces/closed_edges to first obj face/closed_edge              *
#                                                                           *
# HDPI improved ui thanks to Mateusz https://github.com/f3nix               *
#                                                                           *
#  (C) Maurice easyw-fc 2020                                                *
#    This program is free software; you can redistribute it and/or modify   *
#    it under the terms of the GNU Library General Public License (LGPL)    *
#    as published by the Free Software Foundation; either version 2 of      *
#    the License, or (at your option) any later version.                    *
#    for detail see the LICENCE text file.                                  *
#****************************************************************************


__title__   = "Aligner"
__author__  = "maurice"
__url__     = "kicad stepup"
__version__ = "1.9.4" #undo alignment with FC native undo redo
__date__    = "04.2025"

testing=False #true for showing helpers
testing2=False #true for showing helpers

## todo
#  better Gui with icons
## done case: invert normal and standard when already aligned planes
## done works for Bodys on FC 0.17
##

#FreeCAD.ActiveDocument.addObject('PartDesign::CoordinateSystem','Local_CS')

## import statements

import FreeCAD, FreeCADGui, Part
import threading 
from FreeCAD import Base
import sys
from PySide import QtCore, QtGui

##  workaround for Draft Grid appearing
def fixDraftGrid():
    modulename = 'DraftTools'
    if modulename not in sys.modules:
        import DraftTools
        FreeCADGui.runCommand('Draft_ToggleGrid',0)
##

import Draft
import DraftVecUtils
fixDraftGrid()


global libraryX,myXRayed
libraryX = {} #dict. Key = object, Value = TempoVis_instance  ##NB this must be in the WB not in the Macro
myXRayed = []

_recompute = False

#print (QtCore.qVersion())

def getFCversion():
    FC_majorV=int(float(FreeCAD.Version()[0]))
    FC_minorV=int(float(FreeCAD.Version()[1]))
    try:
        FC_git_Nbr=int (float(FreeCAD.Version()[2].strip(" (Git)").split(' ')[0])) #+int(FreeCAD.Version()[2].strip(" (Git)").split(' ')[1])
    except:
        FC_git_Nbr=0
    return FC_majorV,FC_minorV,FC_git_Nbr
##    
def getQtversion():
    qtv = str(QtCore.qVersion())
    qtMv = qtv.split('.')[0]
    qtmv = qtv.split('.')[1]
    #print (qtMv,qtmv)
    
    return qtMv,qtmv
##
##--------------------------------------------------------------------------------------

def a_clear_console():
    #clearing previous messages
    mw=FreeCADGui.getMainWindow()
    c=mw.findChild(QtGui.QPlainTextEdit, "Python console")
    c.clear()
    r=mw.findChild(QtGui.QTextEdit, "Report view")
    r.clear()

#if not Mod_ENABLED:
a_clear_console()

from sys import platform as _platform

# window GUI dimensions parameters
wdzX=240#324;
wdzY=307 #256
ctrl_btn='Ctrl'
if _platform == "linux" or _platform == "linux2":
   # linux
   pt_lnx=True
   sizeXmin=128;sizeYmin=34+34
   sizeX=wdzX;sizeY=wdzY-22+34 #516 #536
   sizeXright=172;sizeYright=536 #556
else:
    sizeXmin=128;sizeYmin=34
    sizeX=wdzX;sizeY=wdzY-22 #482#502
    sizeXright=172;sizeYright=502#522
if _platform == "darwin":
    pt_osx=True
    ctrl_btn='Cmd'
##   # MAC OS X
##elif _platform == "win32":
##   # Windows
#sizeXmin=172;sizeYmin=30+34
sizeXMax=487 #487
btn_sizeX=32;btn_sizeY=32;
chkb_sizeX=20;chkb_sizeY=20;
btn_sm_sizeX=20;btn_sm_sizeY=20;
btn_mn_sizeX=24;btn_mn_sizeY=24;
btn_md_sizeX=26;btn_md_sizeY=26;

def close_aligner():
    #def closeEvent(self, e):
    get_ALGposition()
    ALGDockWidget.deleteLater()
    ##ALGDockWidget.close()
    #self.setWindowState(QtCore.Qt.WindowActive)
    if hasattr(FreeCADGui.Selection,"clearPreselection"):
        onXRayB([])
    doc=FreeCAD.ActiveDocument
    if doc is not None:
        FreeCAD.setActiveDocument(doc.Name)
    #FreeCAD.ActiveDocument=FreeCAD.getDocument(doc.Label)
    #FreeCADGui.ActiveDocument=FreeCADGui.getDocument(doc.Label)

def Alg_undock():
    global alg_dock_mode
    
    ALGDockWidget.setFloating(True)  #undock
    Alg_internal(True)
    ALGDockWidget.resize(sizeX,sizeY)
    ALGDockWidget.activateWindow()
    ALGDockWidget.raise_()
    ag = ALGDockWidget.geometry()
    #(int(a_geo[1]), int(a_geo[2]),int(a_geo[3]), int(a_geo[4]))
    alg_dock_mode = 'float/'+str(ag.x())+'/'+str(ag.y())+'/'+str(ag.width())+'/'+str(ag.height())
    pg = FreeCAD.ParamGet("User parameter:BaseApp/Preferences/Mod/Manipulator")
    pg.SetString("ALG_dock",alg_dock_mode)
    say("position written "+alg_dock_mode)
    #Alg_centerOnScreen (ALGDockWidget)
    #AlgWidget.resize(QtCore.QSize(300,100).expandedTo(AlgWidget.maximumSize())) # sets size of the widget
    #AlgWidget.setFloating(False)  #dock
    #say ("now!")

def Alg_internal(show):
    ALGDockWidget.ui.Label_Align_Gui.setVisible(show)
    ALGDockWidget.ui.AlignGroup.setVisible(show)
    ALGDockWidget.ui.ReferenceGroup.setVisible(show)
    ALGDockWidget.ui.ControlsGroup.setVisible(show)

def Alg_resize():
    ALGDockWidget.resize(sizeXmin,sizeYmin)
    ALGDockWidget.activateWindow()
    ALGDockWidget.raise_()


def Alg_minimz():
    global alg_dock_mode
    #clear_console()
    alg_dock_mode = 'float'
    pg = FreeCAD.ParamGet("User parameter:BaseApp/Preferences/Mod/Manipulator")
    pg.SetString("ALG_dock",alg_dock_mode)
    say("position written "+alg_dock_mode)
    #ALGDockWidget.setFloating(True)  #undock
    # AlgWidget.hide();
    # AlgWidget.setWindowState(QtCore.Qt.WindowMinimized)
    #AlgWidget.resize(500, 500)
    Alg_internal(False)
    timer = threading.Timer(.1, Alg_resize)
    timer.start()
    ALGDockWidget.setFloating(True)  #undock
    ALGDockWidget.resize(sizeXmin,sizeYmin)
    ALGDockWidget.activateWindow()
    ALGDockWidget.raise_()
    

    
####################################
# embedded button images
import base64
# "b64_data" is a variable containing your base64 encoded jpeg

closeW_b64=\
"""
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhLS0gQ3JlYXRlZCB3aXRoIElua3NjYXBlIChodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy8pIC0tPgoKPHN2ZwogICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgIHhtbG5zOmNjPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyMiCiAgIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyIKICAgeG1sbnM6c3ZnPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIKICAgeG1sbnM6c29kaXBvZGk9Imh0dHA6Ly9zb2RpcG9kaS5zb3VyY2Vmb3JnZS5uZXQvRFREL3NvZGlwb2RpLTAuZHRkIgogICB4bWxuczppbmtzY2FwZT0iaHR0cDovL3d3dy5pbmtzY2FwZS5vcmcvbmFtZXNwYWNlcy9pbmtzY2FwZSIKICAgd2lkdGg9IjY0IgogICBoZWlnaHQ9IjY0IgogICBpZD0ic3ZnMiIKICAgdmVyc2lvbj0iMS4xIgogICBpbmtzY2FwZTp2ZXJzaW9uPSIwLjQ4LjUgcjEwMDQwIgogICBzb2RpcG9kaTpkb2NuYW1lPSJlZGl0X0NhbmNlbC5zdmciCiAgIHZpZXdCb3g9IjAgMCA2NCA2NCI+CiAgPGRlZnMKICAgICBpZD0iZGVmczQiPgogICAgPGxpbmVhckdyYWRpZW50CiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQzODc5IgogICAgICAgaW5rc2NhcGU6Y29sbGVjdD0iYWx3YXlzIj4KICAgICAgPHN0b3AKICAgICAgICAgaWQ9InN0b3AzODgxIgogICAgICAgICBvZmZzZXQ9IjAiCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiNhNDAwMDA7c3RvcC1vcGFjaXR5OjEiIC8+CiAgICAgIDxzdG9wCiAgICAgICAgIGlkPSJzdG9wMzg4MyIKICAgICAgICAgb2Zmc2V0PSIxIgogICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojZWYyOTI5O3N0b3Atb3BhY2l0eToxIiAvPgogICAgPC9saW5lYXJHcmFkaWVudD4KICAgIDxsaW5lYXJHcmFkaWVudAogICAgICAgaW5rc2NhcGU6Y29sbGVjdD0iYWx3YXlzIgogICAgICAgaWQ9ImxpbmVhckdyYWRpZW50Mzg2OSI+CiAgICAgIDxzdG9wCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiNhNDAwMDA7c3RvcC1vcGFjaXR5OjEiCiAgICAgICAgIG9mZnNldD0iMCIKICAgICAgICAgaWQ9InN0b3AzODcxIiAvPgogICAgICA8c3RvcAogICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojZWYyOTI5O3N0b3Atb3BhY2l0eToxIgogICAgICAgICBvZmZzZXQ9IjEiCiAgICAgICAgIGlkPSJzdG9wMzg3MyIgLz4KICAgIDwvbGluZWFyR3JhZGllbnQ+CiAgICA8bGluZWFyR3JhZGllbnQKICAgICAgIGlua3NjYXBlOmNvbGxlY3Q9ImFsd2F5cyIKICAgICAgIHhsaW5rOmhyZWY9IiNsaW5lYXJHcmFkaWVudDM4NjkiCiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQzODc1IgogICAgICAgeDE9Ii00NSIKICAgICAgIHkxPSIxMDQ0LjM2MjIiCiAgICAgICB4Mj0iLTU1IgogICAgICAgeTI9Ijk5NC4zNjIxOCIKICAgICAgIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIgogICAgICAgZ3JhZGllbnRUcmFuc2Zvcm09Im1hdHJpeCgwLjg2NjQ3NzI3LDAsMCwwLjg2NjQ3NzM5LDczLjY1MzQwOSwxMzYuMzAzOTEpIiAvPgogICAgPGxpbmVhckdyYWRpZW50CiAgICAgICBpbmtzY2FwZTpjb2xsZWN0PSJhbHdheXMiCiAgICAgICB4bGluazpocmVmPSIjbGluZWFyR3JhZGllbnQzODc5IgogICAgICAgaWQ9ImxpbmVhckdyYWRpZW50Mzg3NyIKICAgICAgIHgxPSItNDUiCiAgICAgICB5MT0iMTA0NC4zNjIyIgogICAgICAgeDI9Ii01NSIKICAgICAgIHkyPSI5OTQuMzYyMTgiCiAgICAgICBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIKICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPSJtYXRyaXgoMC44NjY0NzcyNywwLDAsMC44NjY0NzczOSw3My42NTM0MDksMTM2LjMwMzkxKSIgLz4KICA8L2RlZnM+CiAgPHNvZGlwb2RpOm5hbWVkdmlldwogICAgIGlkPSJiYXNlIgogICAgIHBhZ2Vjb2xvcj0iI2ZmZmZmZiIKICAgICBib3JkZXJjb2xvcj0iIzY2NjY2NiIKICAgICBib3JkZXJvcGFjaXR5PSIxLjAiCiAgICAgaW5rc2NhcGU6cGFnZW9wYWNpdHk9IjAuMCIKICAgICBpbmtzY2FwZTpwYWdlc2hhZG93PSIyIgogICAgIGlua3NjYXBlOnpvb209IjYuNTU3NzM4IgogICAgIGlua3NjYXBlOmN4PSI1MC4yNzE5NTgiCiAgICAgaW5rc2NhcGU6Y3k9IjMyLjkwMDkyNCIKICAgICBpbmtzY2FwZTpkb2N1bWVudC11bml0cz0icHgiCiAgICAgaW5rc2NhcGU6Y3VycmVudC1sYXllcj0ibGF5ZXIxIgogICAgIHNob3dncmlkPSJ0cnVlIgogICAgIGlua3NjYXBlOndpbmRvdy13aWR0aD0iMTU5OCIKICAgICBpbmtzY2FwZTp3aW5kb3ctaGVpZ2h0PSI4MzYiCiAgICAgaW5rc2NhcGU6d2luZG93LXg9IjAiCiAgICAgaW5rc2NhcGU6d2luZG93LXk9IjI3IgogICAgIGlua3NjYXBlOndpbmRvdy1tYXhpbWl6ZWQ9IjAiCiAgICAgaW5rc2NhcGU6c25hcC1nbG9iYWw9InRydWUiCiAgICAgaW5rc2NhcGU6c25hcC1iYm94PSJ0cnVlIgogICAgIGlua3NjYXBlOnNuYXAtbm9kZXM9InRydWUiPgogICAgPGlua3NjYXBlOmdyaWQKICAgICAgIHR5cGU9Inh5Z3JpZCIKICAgICAgIGlkPSJncmlkMTE1MjEiCiAgICAgICBlbXBzcGFjaW5nPSIyIgogICAgICAgZG90dGVkPSJmYWxzZSIKICAgICAgIHZpc2libGU9InRydWUiCiAgICAgICBlbmFibGVkPSJ0cnVlIgogICAgICAgc25hcHZpc2libGVncmlkbGluZXNvbmx5PSJ0cnVlIiAvPgogIDwvc29kaXBvZGk6bmFtZWR2aWV3PgogIDxtZXRhZGF0YQogICAgIGlkPSJtZXRhZGF0YTciPgogICAgPHJkZjpSREY+CiAgICAgIDxjYzpXb3JrCiAgICAgICAgIHJkZjphYm91dD0iIj4KICAgICAgICA8ZGM6Zm9ybWF0PmltYWdlL3N2Zyt4bWw8L2RjOmZvcm1hdD4KICAgICAgICA8ZGM6dHlwZQogICAgICAgICAgIHJkZjpyZXNvdXJjZT0iaHR0cDovL3B1cmwub3JnL2RjL2RjbWl0eXBlL1N0aWxsSW1hZ2UiIC8+CiAgICAgICAgPGRjOnRpdGxlPjwvZGM6dGl0bGU+CiAgICAgIDwvY2M6V29yaz4KICAgIDwvcmRmOlJERj4KICA8L21ldGFkYXRhPgogIDxnCiAgICAgaW5rc2NhcGU6bGFiZWw9IkxheWVyIDEiCiAgICAgaW5rc2NhcGU6Z3JvdXBtb2RlPSJsYXllciIKICAgICBpZD0ibGF5ZXIxIgogICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAsLTk4OC4zNjIxOCkiPgogICAgPHBhdGgKICAgICAgIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOiMyODAwMDA7c3Ryb2tlLXdpZHRoOjE2O3N0cm9rZS1saW5lY2FwOnNxdWFyZTtzdHJva2UtbGluZWpvaW46bWl0ZXI7c3Ryb2tlLW9wYWNpdHk6MSIKICAgICAgIGQ9Im0gMTMsMTAwMS4zNjIyIDM4LjEyNSwzOC4xMjUiCiAgICAgICBpZD0icGF0aDMwMDIiCiAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgc29kaXBvZGk6bm9kZXR5cGVzPSJjYyIgLz4KICAgIDxwYXRoCiAgICAgICBzdHlsZT0iZmlsbDpub25lO3N0cm9rZTojMjgwMDAwO3N0cm9rZS13aWR0aDoxNjtzdHJva2UtbGluZWNhcDpzcXVhcmU7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1vcGFjaXR5OjEiCiAgICAgICBkPSJNIDUxLjEyNSwxMDAxLjM2MjIgMTMsMTAzOS40ODcyIgogICAgICAgaWQ9InBhdGgzMDAyLTYiCiAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgc29kaXBvZGk6bm9kZXR5cGVzPSJjYyIgLz4KICAgIDxwYXRoCiAgICAgICBzdHlsZT0iZmlsbDpub25lO3N0cm9rZTojZWYyOTI5O3N0cm9rZS13aWR0aDoxMjtzdHJva2UtbGluZWNhcDpzcXVhcmU7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1taXRlcmxpbWl0OjQ7c3Ryb2tlLW9wYWNpdHk6MTtzdHJva2UtZGFzaGFycmF5Om5vbmUiCiAgICAgICBkPSJtIDEzLDEwMDEuMzYyMiAzOC4xMjUsMzguMTI1IgogICAgICAgaWQ9InBhdGgzMDAyLTciCiAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgc29kaXBvZGk6bm9kZXR5cGVzPSJjYyIgLz4KICAgIDxwYXRoCiAgICAgICBzdHlsZT0iZmlsbDpub25lO3N0cm9rZTojZWYyOTI5O3N0cm9rZS13aWR0aDoxMjtzdHJva2UtbGluZWNhcDpzcXVhcmU7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1taXRlcmxpbWl0OjQ7c3Ryb2tlLW9wYWNpdHk6MTtzdHJva2UtZGFzaGFycmF5Om5vbmUiCiAgICAgICBkPSJNIDUxLjEyNSwxMDAxLjM2MjIgMTMsMTAzOS40ODcyIgogICAgICAgaWQ9InBhdGgzMDAyLTYtNSIKICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICBzb2RpcG9kaTpub2RldHlwZXM9ImNjIiAvPgogICAgPHBhdGgKICAgICAgIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOnVybCgjbGluZWFyR3JhZGllbnQzODc3KTtzdHJva2Utd2lkdGg6ODtzdHJva2UtbGluZWNhcDpzcXVhcmU7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1taXRlcmxpbWl0OjQ7c3Ryb2tlLW9wYWNpdHk6MTtzdHJva2UtZGFzaGFycmF5Om5vbmUiCiAgICAgICBkPSJtIDEzLDEwMDEuMzYyMiAzOC4xMjUsMzguMTI1IgogICAgICAgaWQ9InBhdGgzMDAyLTctNiIKICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICBzb2RpcG9kaTpub2RldHlwZXM9ImNjIiAvPgogICAgPHBhdGgKICAgICAgIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOnVybCgjbGluZWFyR3JhZGllbnQzODc1KTtzdHJva2Utd2lkdGg6ODtzdHJva2UtbGluZWNhcDpzcXVhcmU7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1taXRlcmxpbWl0OjQ7c3Ryb2tlLW9wYWNpdHk6MTtzdHJva2UtZGFzaGFycmF5Om5vbmUiCiAgICAgICBkPSJNIDUxLjEyNSwxMDAxLjM2MjIgMTMsMTAzOS40ODcyIgogICAgICAgaWQ9InBhdGgzMDAyLTYtNS0yIgogICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICAgIHNvZGlwb2RpOm5vZGV0eXBlcz0iY2MiIC8+CiAgPC9nPgo8L3N2Zz4K
"""
un_dock_b64=\
"""

"""
minimize_b64=\
"""
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhLS0gQ3JlYXRlZCB3aXRoIElua3NjYXBlIChodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy8pIC0tPgoKPHN2ZwogICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgIHhtbG5zOmNjPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyMiCiAgIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyIKICAgeG1sbnM6c3ZnPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICB4bWxuczpzb2RpcG9kaT0iaHR0cDovL3NvZGlwb2RpLnNvdXJjZWZvcmdlLm5ldC9EVEQvc29kaXBvZGktMC5kdGQiCiAgIHhtbG5zOmlua3NjYXBlPSJodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy9uYW1lc3BhY2VzL2lua3NjYXBlIgogICB3aWR0aD0iNjRweCIKICAgaGVpZ2h0PSI2NHB4IgogICBpZD0ic3ZnMjk4NSIKICAgdmVyc2lvbj0iMS4xIgogICBpbmtzY2FwZTp2ZXJzaW9uPSIwLjQ4LjQgcjk5MzkiCiAgIHNvZGlwb2RpOmRvY25hbWU9Im1pbmltaXplLnN2ZyI+CiAgPGRlZnMKICAgICBpZD0iZGVmczI5ODciIC8+CiAgPHNvZGlwb2RpOm5hbWVkdmlldwogICAgIGlkPSJiYXNlIgogICAgIHBhZ2Vjb2xvcj0iI2ZmZmZmZiIKICAgICBib3JkZXJjb2xvcj0iIzY2NjY2NiIKICAgICBib3JkZXJvcGFjaXR5PSIxLjAiCiAgICAgaW5rc2NhcGU6cGFnZW9wYWNpdHk9IjAuMCIKICAgICBpbmtzY2FwZTpwYWdlc2hhZG93PSIyIgogICAgIGlua3NjYXBlOnpvb209IjUuMDk2ODMxMiIKICAgICBpbmtzY2FwZTpjeD0iLTU5Ljk3Mjg4NSIKICAgICBpbmtzY2FwZTpjeT0iMTYuMTkzNDEzIgogICAgIGlua3NjYXBlOmN1cnJlbnQtbGF5ZXI9ImxheWVyMSIKICAgICBzaG93Z3JpZD0idHJ1ZSIKICAgICBpbmtzY2FwZTpkb2N1bWVudC11bml0cz0icHgiCiAgICAgaW5rc2NhcGU6Z3JpZC1iYm94PSJ0cnVlIgogICAgIGlua3NjYXBlOndpbmRvdy13aWR0aD0iMjU2MCIKICAgICBpbmtzY2FwZTp3aW5kb3ctaGVpZ2h0PSIxMzYxIgogICAgIGlua3NjYXBlOndpbmRvdy14PSItOSIKICAgICBpbmtzY2FwZTp3aW5kb3cteT0iLTkiCiAgICAgaW5rc2NhcGU6d2luZG93LW1heGltaXplZD0iMSIKICAgICBpbmtzY2FwZTpzbmFwLWJib3g9InRydWUiCiAgICAgaW5rc2NhcGU6c25hcC1ub2Rlcz0iZmFsc2UiPgogICAgPGlua3NjYXBlOmdyaWQKICAgICAgIHR5cGU9Inh5Z3JpZCIKICAgICAgIGlkPSJncmlkMjk4NyIKICAgICAgIGVtcHNwYWNpbmc9IjIiCiAgICAgICB2aXNpYmxlPSJ0cnVlIgogICAgICAgZW5hYmxlZD0idHJ1ZSIKICAgICAgIHNuYXB2aXNpYmxlZ3JpZGxpbmVzb25seT0idHJ1ZSIgLz4KICA8L3NvZGlwb2RpOm5hbWVkdmlldz4KICA8bWV0YWRhdGEKICAgICBpZD0ibWV0YWRhdGEyOTkwIj4KICAgIDxyZGY6UkRGPgogICAgICA8Y2M6V29yawogICAgICAgICByZGY6YWJvdXQ9IiI+CiAgICAgICAgPGRjOmZvcm1hdD5pbWFnZS9zdmcreG1sPC9kYzpmb3JtYXQ+CiAgICAgICAgPGRjOnR5cGUKICAgICAgICAgICByZGY6cmVzb3VyY2U9Imh0dHA6Ly9wdXJsLm9yZy9kYy9kY21pdHlwZS9TdGlsbEltYWdlIiAvPgogICAgICAgIDxkYzp0aXRsZSAvPgogICAgICAgIDxkYzpjcmVhdG9yPgogICAgICAgICAgPGNjOkFnZW50PgogICAgICAgICAgICA8ZGM6dGl0bGU+W3lvcmlrdmFuaGF2cmVdPC9kYzp0aXRsZT4KICAgICAgICAgIDwvY2M6QWdlbnQ+CiAgICAgICAgPC9kYzpjcmVhdG9yPgogICAgICAgIDxkYzp0aXRsZT5BcmNoX1NlY3Rpb25QbGFuZV9UcmVlPC9kYzp0aXRsZT4KICAgICAgICA8ZGM6ZGF0ZT4yMDExLTEyLTA2PC9kYzpkYXRlPgogICAgICAgIDxkYzpyZWxhdGlvbj5odHRwOi8vd3d3LmZyZWVjYWR3ZWIub3JnL3dpa2kvaW5kZXgucGhwP3RpdGxlPUFydHdvcms8L2RjOnJlbGF0aW9uPgogICAgICAgIDxkYzpwdWJsaXNoZXI+CiAgICAgICAgICA8Y2M6QWdlbnQ+CiAgICAgICAgICAgIDxkYzp0aXRsZT5GcmVlQ0FEPC9kYzp0aXRsZT4KICAgICAgICAgIDwvY2M6QWdlbnQ+CiAgICAgICAgPC9kYzpwdWJsaXNoZXI+CiAgICAgICAgPGRjOmlkZW50aWZpZXI+RnJlZUNBRC9zcmMvTW9kL0FyY2gvUmVzb3VyY2VzL2ljb25zL0FyY2hfU2VjdGlvblBsYW5lX1RyZWUuc3ZnPC9kYzppZGVudGlmaWVyPgogICAgICAgIDxkYzpyaWdodHM+CiAgICAgICAgICA8Y2M6QWdlbnQ+CiAgICAgICAgICAgIDxkYzp0aXRsZT5GcmVlQ0FEIExHUEwyKzwvZGM6dGl0bGU+CiAgICAgICAgICA8L2NjOkFnZW50PgogICAgICAgIDwvZGM6cmlnaHRzPgogICAgICAgIDxjYzpsaWNlbnNlPmh0dHBzOi8vd3d3LmdudS5vcmcvY29weWxlZnQvbGVzc2VyLmh0bWw8L2NjOmxpY2Vuc2U+CiAgICAgICAgPGRjOmNvbnRyaWJ1dG9yPgogICAgICAgICAgPGNjOkFnZW50PgogICAgICAgICAgICA8ZGM6dGl0bGU+W2Fncnlzb25dIEFsZXhhbmRlciBHcnlzb248L2RjOnRpdGxlPgogICAgICAgICAgPC9jYzpBZ2VudD4KICAgICAgICA8L2RjOmNvbnRyaWJ1dG9yPgogICAgICA8L2NjOldvcms+CiAgICA8L3JkZjpSREY+CiAgPC9tZXRhZGF0YT4KICA8ZwogICAgIGlkPSJsYXllcjEiCiAgICAgaW5rc2NhcGU6bGFiZWw9IkxheWVyIDEiCiAgICAgaW5rc2NhcGU6Z3JvdXBtb2RlPSJsYXllciI+CiAgICA8cGF0aAogICAgICAgc29kaXBvZGk6dHlwZT0ic3RhciIKICAgICAgIHN0eWxlPSJjb2xvcjojMDAwMDAwO2ZpbGw6Izk5OTk5OTtmaWxsLW9wYWNpdHk6MTtmaWxsLXJ1bGU6bm9uemVybztzdHJva2U6IzRkNGQ0ZDtzdHJva2Utd2lkdGg6MS41NzQ4ODIyNztzdHJva2UtbGluZWNhcDpidXR0O3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDo0O3N0cm9rZS1vcGFjaXR5OjE7c3Ryb2tlLWRhc2hhcnJheTpub25lO3N0cm9rZS1kYXNob2Zmc2V0OjA7bWFya2VyOm5vbmU7dmlzaWJpbGl0eTp2aXNpYmxlO2Rpc3BsYXk6aW5saW5lO292ZXJmbG93OnZpc2libGU7ZW5hYmxlLWJhY2tncm91bmQ6YWNjdW11bGF0ZSIKICAgICAgIGlkPSJwYXRoMjk5NyIKICAgICAgIHNvZGlwb2RpOnNpZGVzPSIzIgogICAgICAgc29kaXBvZGk6Y3g9IjIyIgogICAgICAgc29kaXBvZGk6Y3k9IjE3LjA5MDkwOCIKICAgICAgIHNvZGlwb2RpOnIxPSIyMC40MzI1MTIiCiAgICAgICBzb2RpcG9kaTpyMj0iMTAuMjE2MjU3IgogICAgICAgc29kaXBvZGk6YXJnMT0iMi4wOTQzOTUxIgogICAgICAgc29kaXBvZGk6YXJnMj0iMy4xNDE1OTI3IgogICAgICAgaW5rc2NhcGU6ZmxhdHNpZGVkPSJ0cnVlIgogICAgICAgaW5rc2NhcGU6cm91bmRlZD0iMCIKICAgICAgIGlua3NjYXBlOnJhbmRvbWl6ZWQ9IjAiCiAgICAgICBkPSJtIDExLjc4Mzc0NCwzNC43ODU5ODMgMCwtMzUuMzkwMTQ5NjMgMzAuNjQ4NzY4LDE3LjY5NTA3NDYzIHoiCiAgICAgICB0cmFuc2Zvcm09Im1hdHJpeCgwLDAuNTk3OTI3MDMsMS4xNDcyNDA3LDAsMTIuMzkyNjE0LDIxLjYwNjM2NCkiCiAgICAgICBpbmtzY2FwZTp0cmFuc2Zvcm0tY2VudGVyLXk9IjMuMDU0Mjg1NyIgLz4KICA8L2c+Cjwvc3ZnPgo=
"""
Bbox_b64=\
"""

"""
Mass_b64=\
"""

"""
Normal_b64=\
"""

"""
Normal_Inv_b64=\
"""

"""
Planes_b64=\
"""

"""
Planes_Centers_b64=\
"""

"""
Centers_b64=\
"""

"""
X_b64=\
"""

"""
Y_b64=\
"""

"""
Z_b64=\
"""

"""
Undo_b64=\
"""

"""
# """
# 
# """
Move_b64=\
"""

"""
hierachy_b64=\
"""

"""

help_b64=\
"""

"""
Confirm_b64=\
"""
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhLS0gQ3JlYXRlZCB3aXRoIElua3NjYXBlIChodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy8pIC0tPgoKPHN2ZwogICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgIHhtbG5zOmNjPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyMiCiAgIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyIKICAgeG1sbnM6c3ZnPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIKICAgeG1sbnM6c29kaXBvZGk9Imh0dHA6Ly9zb2RpcG9kaS5zb3VyY2Vmb3JnZS5uZXQvRFREL3NvZGlwb2RpLTAuZHRkIgogICB4bWxuczppbmtzY2FwZT0iaHR0cDovL3d3dy5pbmtzY2FwZS5vcmcvbmFtZXNwYWNlcy9pbmtzY2FwZSIKICAgd2lkdGg9IjY0IgogICBoZWlnaHQ9IjY0IgogICBpZD0ic3ZnMjk4NSIKICAgdmVyc2lvbj0iMS4xIgogICBpbmtzY2FwZTp2ZXJzaW9uPSIwLjkyLjAgcjE1Mjk5IgogICBzb2RpcG9kaTpkb2NuYW1lPSJDb25maXJtLnN2ZyI+CiAgPGRlZnMKICAgICBpZD0iZGVmczI5ODciPgogICAgPGxpbmVhckdyYWRpZW50CiAgICAgICBpbmtzY2FwZTpjb2xsZWN0PSJhbHdheXMiCiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQzNzc0Ij4KICAgICAgPHN0b3AKICAgICAgICAgc3R5bGU9InN0b3AtY29sb3I6IzRlOWEwNjtzdG9wLW9wYWNpdHk6MSIKICAgICAgICAgb2Zmc2V0PSIwIgogICAgICAgICBpZD0ic3RvcDM3NzYiIC8+CiAgICAgIDxzdG9wCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiM4YWUyMzQ7c3RvcC1vcGFjaXR5OjEiCiAgICAgICAgIG9mZnNldD0iMSIKICAgICAgICAgaWQ9InN0b3AzNzc4IiAvPgogICAgPC9saW5lYXJHcmFkaWVudD4KICAgIDxsaW5lYXJHcmFkaWVudAogICAgICAgaW5rc2NhcGU6Y29sbGVjdD0iYWx3YXlzIgogICAgICAgeGxpbms6aHJlZj0iI2xpbmVhckdyYWRpZW50NDA4MiIKICAgICAgIGlkPSJsaW5lYXJHcmFkaWVudDM5MjItMCIKICAgICAgIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIgogICAgICAgZ3JhZGllbnRUcmFuc2Zvcm09Im1hdHJpeCgtMC41NjA5MTI2NCwtMC40OTg2NDYsMC40ODAzNTE3OSwtMC41ODIyNzUzOSwtMTc3Ljg5ODEzLDI2OS4xNTYzNSkiCiAgICAgICB4MT0iMTAuMzg3IgogICAgICAgeTE9IjQ1My43Nzg3NSIKICAgICAgIHgyPSI1Ni4zMTk0MTIiCiAgICAgICB5Mj0iNDgzLjk5NTI0IiAvPgogICAgPGxpbmVhckdyYWRpZW50CiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQ0MDgyIj4KICAgICAgPHN0b3AKICAgICAgICAgaWQ9InN0b3A0MDg0IgogICAgICAgICBvZmZzZXQ9IjAiCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiM0ZTlhMDY7c3RvcC1vcGFjaXR5OjEiIC8+CiAgICAgIDxzdG9wCiAgICAgICAgIGlkPSJzdG9wNDA4NiIKICAgICAgICAgb2Zmc2V0PSIxIgogICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojOGFlMjM0O3N0b3Atb3BhY2l0eToxIiAvPgogICAgPC9saW5lYXJHcmFkaWVudD4KICAgIDxsaW5lYXJHcmFkaWVudAogICAgICAgaW5rc2NhcGU6Y29sbGVjdD0iYWx3YXlzIgogICAgICAgeGxpbms6aHJlZj0iI2xpbmVhckdyYWRpZW50Mzc3NCIKICAgICAgIGlkPSJsaW5lYXJHcmFkaWVudDM3ODAiCiAgICAgICB4MT0iMzAiCiAgICAgICB5MT0iLTIiCiAgICAgICB4Mj0iMjYiCiAgICAgICB5Mj0iLTI2IgogICAgICAgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiIC8+CiAgICA8bGluZWFyR3JhZGllbnQKICAgICAgIGlua3NjYXBlOmNvbGxlY3Q9ImFsd2F5cyIKICAgICAgIHhsaW5rOmhyZWY9IiNsaW5lYXJHcmFkaWVudDM3NzQiCiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQyOTk5IgogICAgICAgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiCiAgICAgICB4MT0iMzAiCiAgICAgICB5MT0iLTIiCiAgICAgICB4Mj0iMjYiCiAgICAgICB5Mj0iLTI2IiAvPgogIDwvZGVmcz4KICA8c29kaXBvZGk6bmFtZWR2aWV3CiAgICAgaWQ9ImJhc2UiCiAgICAgcGFnZWNvbG9yPSIjZmZmZmZmIgogICAgIGJvcmRlcmNvbG9yPSIjNjY2NjY2IgogICAgIGJvcmRlcm9wYWNpdHk9IjEuMCIKICAgICBpbmtzY2FwZTpwYWdlb3BhY2l0eT0iMC4wIgogICAgIGlua3NjYXBlOnBhZ2VzaGFkb3c9IjIiCiAgICAgaW5rc2NhcGU6em9vbT0iOS42ODc1IgogICAgIGlua3NjYXBlOmN4PSIzMiIKICAgICBpbmtzY2FwZTpjeT0iMzIiCiAgICAgaW5rc2NhcGU6Y3VycmVudC1sYXllcj0iZzI5OTUiCiAgICAgc2hvd2dyaWQ9InRydWUiCiAgICAgaW5rc2NhcGU6Z3JpZC1iYm94PSJ0cnVlIgogICAgIGlua3NjYXBlOmRvY3VtZW50LXVuaXRzPSJweCIKICAgICBpbmtzY2FwZTp3aW5kb3ctd2lkdGg9IjE1MzYiCiAgICAgaW5rc2NhcGU6d2luZG93LWhlaWdodD0iODAxIgogICAgIGlua3NjYXBlOndpbmRvdy14PSItOCIKICAgICBpbmtzY2FwZTp3aW5kb3cteT0iLTgiCiAgICAgaW5rc2NhcGU6d2luZG93LW1heGltaXplZD0iMSI+CiAgICA8aW5rc2NhcGU6Z3JpZAogICAgICAgdHlwZT0ieHlncmlkIgogICAgICAgaWQ9ImdyaWQyOTgzIgogICAgICAgZW1wc3BhY2luZz0iMiIKICAgICAgIHZpc2libGU9InRydWUiCiAgICAgICBlbmFibGVkPSJ0cnVlIgogICAgICAgc25hcHZpc2libGVncmlkbGluZXNvbmx5PSJ0cnVlIiAvPgogIDwvc29kaXBvZGk6bmFtZWR2aWV3PgogIDxtZXRhZGF0YQogICAgIGlkPSJtZXRhZGF0YTI5OTAiPgogICAgPHJkZjpSREY+CiAgICAgIDxjYzpXb3JrCiAgICAgICAgIHJkZjphYm91dD0iIj4KICAgICAgICA8ZGM6Zm9ybWF0PmltYWdlL3N2Zyt4bWw8L2RjOmZvcm1hdD4KICAgICAgICA8ZGM6dHlwZQogICAgICAgICAgIHJkZjpyZXNvdXJjZT0iaHR0cDovL3B1cmwub3JnL2RjL2RjbWl0eXBlL1N0aWxsSW1hZ2UiIC8+CiAgICAgICAgPGRjOnRpdGxlPjwvZGM6dGl0bGU+CiAgICAgIDwvY2M6V29yaz4KICAgIDwvcmRmOlJERj4KICA8L21ldGFkYXRhPgogIDxnCiAgICAgaWQ9ImxheWVyMSIKICAgICBpbmtzY2FwZTpsYWJlbD0iTGF5ZXIgMSIKICAgICBpbmtzY2FwZTpncm91cG1vZGU9ImxheWVyIgogICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAsNDgpIj4KICAgIDxnCiAgICAgICBpZD0iZzI5OTUiCiAgICAgICB0cmFuc2Zvcm09Im1hdHJpeCgxLjIyNTI2ODMsMCwwLDEuMjI1MjY4MywtNi4zMDE0MTc5LDIuNDMzMDg5MSkiPgogICAgICA8cGF0aAogICAgICAgICBzb2RpcG9kaTpub2RldHlwZXM9ImNjY2NjY2MiCiAgICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICAgIGlkPSJwYXRoNDA4OCIKICAgICAgICAgZD0ibSAxNS40ODA3NiwtMjEuMjQ2NTc2IDEwLjUxOTIzOSwxMC41MTkyMzIgMjEuMDM4NDc0LC0yMS4wMzg0NjQgNy44ODk0MjgsNy44ODk0MjQgTCAyNS45OTk5OTksNS4wNTE1MDY1IDcuNTkxMzMxMiwtMTMuMzU3MTUyIHoiCiAgICAgICAgIHN0eWxlPSJmaWxsOnVybCgjbGluZWFyR3JhZGllbnQyOTk5KTtmaWxsLW9wYWNpdHk6MTtzdHJva2U6IzE3MmEwNDtzdHJva2Utd2lkdGg6MS42MzIyOTUzNztzdHJva2UtbGluZWNhcDpidXR0O3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2Utb3BhY2l0eToxIgogICAgICAgICBpbmtzY2FwZTpleHBvcnQteGRwaT0iNTAuOTQzNTEyIgogICAgICAgICBpbmtzY2FwZTpleHBvcnQteWRwaT0iNTAuOTQzNTEyIiAvPgogICAgICA8cGF0aAogICAgICAgICBzb2RpcG9kaTpub2RldHlwZXM9ImNjY2NjY2MiCiAgICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICAgIGlkPSJwYXRoMzAwNCIKICAgICAgICAgZD0iTSA5Ljk1MTA5NzgsLTEzLjM1MDQwMyAxNS40Nzc4MjIsLTE4Ljg4OTYyOCAyNiwtOC40Mzc1NTgzIDQ3LjAzMTg1NSwtMjkuNDQ4NTczIDUyLjU3MTA4LC0yMy44NzI1ODEgMjYsMi43MzUyNjYyIHoiCiAgICAgICAgIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOiM4YWUyMzQ7c3Ryb2tlLXdpZHRoOjEuNjMyMjk1NDk7c3Ryb2tlLWxpbmVjYXA6YnV0dDtzdHJva2UtbGluZWpvaW46bWl0ZXI7c3Ryb2tlLW9wYWNpdHk6MSIKICAgICAgICAgaW5rc2NhcGU6ZXhwb3J0LXhkcGk9IjUwLjk0MzUxMiIKICAgICAgICAgaW5rc2NhcGU6ZXhwb3J0LXlkcGk9IjUwLjk0MzUxMiIgLz4KICAgIDwvZz4KICA8L2c+Cjwvc3ZnPgo=
"""
Center_Align_b64=\
"""

"""
XRayM_b64=\
"""

"""

###############################################


##############################################################
global initial_placement, last_selection
global moving, rotating
global objs_moved, plc_moved
global objs, objs_plc
global alg_dock_mode

alg_dock_mode = ''
#init
initial_placement = FreeCAD.Placement(FreeCAD.Vector(0,0,0), FreeCAD.Rotation(0,0,0), FreeCAD.Vector(0,0,0)) #Placement [Pos=(0,0,0), Yaw-Pitch-Roll=(0,0,0)]
moving = [] #[FreeCAD.Vector(0,0,0)]
rotating = [] #[0, FreeCAD.Vector(0,0,0), FreeCAD.Vector(0,0,0)]
objs = [] ; objs_plc = []
objs_moved = [] ; plc_moved = []
#Draft.rotate(objs[j],-rot_angle,rot_center,rot_axis)
#rotating=[rot_angle,rot_center,rot_axis]

last_selection = []

#################################################################

def say(msg):
    FreeCAD.Console.PrintMessage(msg)
    FreeCAD.Console.PrintMessage('\n')

def sayw(msg):
    FreeCAD.Console.PrintWarning(msg)
    FreeCAD.Console.PrintWarning('\n')

def sayerr(msg):
    FreeCAD.Console.PrintError(msg)
    FreeCAD.Console.PrintWarning('\n')

def make_string(input):
    if (sys.version_info > (3, 0)):  #py3
        if isinstance(input, str):
            return input
        else:
            input =  input.encode('utf-8')
            return input
    else:  #py2
        if type(input) == unicode:
            input =  input.encode('utf-8')
            return input
        else:
            return input

sayw("Aligner version "+str(__version__))

# Form implementation generated from reading ui file 'C:\Cad\Progetti_K\3D-FreeCad-tools\icons-new\align-tool-docked-v1.2.ui'
#
# Created: Mon Oct 02 12:55:07 2017
#      by: pyside-uic 0.2.15 running on PySide 1.2.2
#
# WARNING! All changes made in this file will be lost!

#from PySide import QtCore, QtGui

###############################################################################################################
### new dock widget
### add def link inside class
#    def link(self, linkStr):
#        QtGui.QDesktopServices.openUrl(QtCore.QUrl(linkStr))

#class Ui_DockWidget(object):
#    def link(self, linkStr):
#        #QtGui.QDesktopServices.openUrl(QtCore.QUrl(linkStr))
#        try:
#            QtGui.QDesktopServices.openUrl(QtCore.QUrl(linkStr))  #workaround Qt5 waiting for PySide2
#        except:
#            #QtGui.QDesktopServices.openUrl(QtCore.QUrl(linkStr.fromLocalFile()))
#            pass


QtWidgets = QtGui
#class Ui_DockWidget(object):
class Ui_DockWidget(object):
    def setupUi(self, DockWidget):
        DockWidget.setObjectName("DockWidget")
        DockWidget.resize(316, 466)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/Center-Align.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        DockWidget.setWindowIcon(icon)
        DockWidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        DockWidget.setFeatures(QtWidgets.QDockWidget.DockWidgetFloatable|QtWidgets.QDockWidget.DockWidgetMovable)
        DockWidget.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea|QtCore.Qt.RightDockWidgetArea)
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.dockWidgetContents)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.ReferenceGroup = QtWidgets.QGroupBox(self.dockWidgetContents)
        self.ReferenceGroup.setTitle("Reference")
        self.ReferenceGroup.setObjectName("ReferenceGroup")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.ReferenceGroup)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.rbBBox = QtWidgets.QRadioButton(self.ReferenceGroup)
        self.rbBBox.setMinimumSize(QtCore.QSize(48, 32))
        self.rbBBox.setToolTip("Center of\n"
"Bounding Box")
        self.rbBBox.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/Bbox.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbBBox.setIcon(icon1)
        self.rbBBox.setIconSize(QtCore.QSize(26, 26))
        self.rbBBox.setChecked(False)
        self.rbBBox.setAutoExclusive(False)
        self.rbBBox.setObjectName("rbBBox")
        self.gridLayout_3.addWidget(self.rbBBox, 0, 0, 1, 1)
        self.rbMass = QtWidgets.QRadioButton(self.ReferenceGroup)
        self.rbMass.setMinimumSize(QtCore.QSize(48, 32))
        self.rbMass.setToolTip("Center of\n"
"Mass")
        self.rbMass.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/Mass.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbMass.setIcon(icon2)
        self.rbMass.setIconSize(QtCore.QSize(26, 26))
        self.rbMass.setChecked(True)
        self.rbMass.setAutoExclusive(False)
        self.rbMass.setObjectName("rbMass")
        self.gridLayout_3.addWidget(self.rbMass, 0, 1, 1, 1)
        self.rbNormal = QtWidgets.QRadioButton(self.ReferenceGroup)
        self.rbNormal.setMinimumSize(QtCore.QSize(48, 32))
        self.rbNormal.setToolTip("Alignment Normal")
        self.rbNormal.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/Normal-Up.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbNormal.setIcon(icon3)
        self.rbNormal.setIconSize(QtCore.QSize(26, 26))
        self.rbNormal.setChecked(True)
        self.rbNormal.setAutoExclusive(False)
        self.rbNormal.setObjectName("rbNormal")
        self.gridLayout_3.addWidget(self.rbNormal, 1, 0, 1, 1)
        self.rbNormal_Inv = QtWidgets.QRadioButton(self.ReferenceGroup)
        self.rbNormal_Inv.setMinimumSize(QtCore.QSize(48, 32))
        self.rbNormal_Inv.setToolTip("Alignment Normal\n"
"Inverted")
        self.rbNormal_Inv.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/Normal-Down.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbNormal_Inv.setIcon(icon4)
        self.rbNormal_Inv.setIconSize(QtCore.QSize(26, 26))
        self.rbNormal_Inv.setChecked(False)
        self.rbNormal_Inv.setAutoExclusive(False)
        self.rbNormal_Inv.setObjectName("rbNormal_Inv")
        self.gridLayout_3.addWidget(self.rbNormal_Inv, 1, 1, 1, 1)
        self.verticalLayout_2.addLayout(self.gridLayout_3)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem)
        self.gridLayout_4.addWidget(self.ReferenceGroup, 0, 0, 1, 1)
        self.AlignGroup = QtWidgets.QGroupBox(self.dockWidgetContents)
        self.AlignGroup.setTitle("Align on")
        self.AlignGroup.setObjectName("AlignGroup")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.AlignGroup)
        self.verticalLayout.setObjectName("verticalLayout")
        self.gridLayout_12 = QtWidgets.QGridLayout()
        self.gridLayout_12.setSpacing(2)
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.cbX = QtWidgets.QCheckBox(self.AlignGroup)
        self.cbX.setMinimumSize(QtCore.QSize(48, 32))
        self.cbX.setMaximumSize(QtCore.QSize(64, 128))
        self.cbX.setToolTip("center on X")
        self.cbX.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/Xaxis.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cbX.setIcon(icon5)
        self.cbX.setIconSize(QtCore.QSize(16, 16))
        self.cbX.setChecked(True)
        self.cbX.setObjectName("cbX")
        self.gridLayout_12.addWidget(self.cbX, 0, 1, 1, 1)
        self.cbZ = QtWidgets.QCheckBox(self.AlignGroup)
        self.cbZ.setMinimumSize(QtCore.QSize(48, 32))
        self.cbZ.setMaximumSize(QtCore.QSize(64, 128))
        self.cbZ.setToolTip("center on Z")
        self.cbZ.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/Zaxis.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cbZ.setIcon(icon6)
        self.cbZ.setIconSize(QtCore.QSize(16, 16))
        self.cbZ.setChecked(True)
        self.cbZ.setObjectName("cbZ")
        self.gridLayout_12.addWidget(self.cbZ, 2, 1, 1, 1)
        self.cbY = QtWidgets.QCheckBox(self.AlignGroup)
        self.cbY.setMinimumSize(QtCore.QSize(48, 32))
        self.cbY.setMaximumSize(QtCore.QSize(64, 128))
        self.cbY.setToolTip("center on Y")
        self.cbY.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/Yaxis.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cbY.setIcon(icon7)
        self.cbY.setIconSize(QtCore.QSize(16, 16))
        self.cbY.setChecked(True)
        self.cbY.setObjectName("cbY")
        self.gridLayout_12.addWidget(self.cbY, 1, 1, 1, 1)
        self.rbCenters = QtWidgets.QRadioButton(self.AlignGroup)
        self.rbCenters.setMinimumSize(QtCore.QSize(48, 32))
        self.rbCenters.setToolTip("Align Centers")
        self.rbCenters.setText("")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/Centers.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbCenters.setIcon(icon8)
        self.rbCenters.setIconSize(QtCore.QSize(26, 26))
        self.rbCenters.setChecked(False)
        self.rbCenters.setObjectName("rbCenters")
        self.gridLayout_12.addWidget(self.rbCenters, 0, 0, 1, 1)
        self.rbPlanes = QtWidgets.QRadioButton(self.AlignGroup)
        self.rbPlanes.setMinimumSize(QtCore.QSize(48, 32))
        self.rbPlanes.setToolTip("Align Planes")
        self.rbPlanes.setText("")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/Planes.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbPlanes.setIcon(icon9)
        self.rbPlanes.setIconSize(QtCore.QSize(26, 26))
        self.rbPlanes.setChecked(False)
        self.rbPlanes.setObjectName("rbPlanes")
        self.gridLayout_12.addWidget(self.rbPlanes, 1, 0, 1, 1)
        self.rbPlanesCenters = QtWidgets.QRadioButton(self.AlignGroup)
        self.rbPlanesCenters.setMinimumSize(QtCore.QSize(48, 32))
        self.rbPlanesCenters.setToolTip("Align Centers & Planes")
        self.rbPlanesCenters.setText("")
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/Planes-Centers.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbPlanesCenters.setIcon(icon10)
        self.rbPlanesCenters.setIconSize(QtCore.QSize(26, 26))
        self.rbPlanesCenters.setChecked(True)
        self.rbPlanesCenters.setObjectName("rbPlanesCenters")
        self.gridLayout_12.addWidget(self.rbPlanesCenters, 2, 0, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout_12)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem1)
        self.gridLayout_4.addWidget(self.AlignGroup, 0, 1, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem2, 0, 2, 1, 1)
        self.gridLayout_5.addLayout(self.gridLayout_4, 1, 0, 1, 1)
        self.gridLayout_6 = QtWidgets.QGridLayout()
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.ControlsGroup = QtWidgets.QGroupBox(self.dockWidgetContents)
        self.ControlsGroup.setTitle("Controls")
        self.ControlsGroup.setObjectName("ControlsGroup")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.ControlsGroup)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.gridLayout_14 = QtWidgets.QGridLayout()
        self.gridLayout_14.setSpacing(2)
        self.gridLayout_14.setObjectName("gridLayout_14")
        self.Origin_Align = QtWidgets.QPushButton(self.ControlsGroup)
        self.Origin_Align.setMinimumSize(QtCore.QSize(48, 48))
        self.Origin_Align.setMaximumSize(QtCore.QSize(64, 64))
        self.Origin_Align.setText("")
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/Undo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Origin_Align.setIcon(icon11)
        self.Origin_Align.setIconSize(QtCore.QSize(24, 24))
        self.Origin_Align.setCheckable(False)
        self.Origin_Align.setChecked(False)
        self.Origin_Align.setObjectName("Origin_Align")
        self.gridLayout_14.addWidget(self.Origin_Align, 0, 3, 1, 1)
        self.Align = QtWidgets.QPushButton(self.ControlsGroup)
        self.Align.setMinimumSize(QtCore.QSize(48, 48))
        self.Align.setMaximumSize(QtCore.QSize(64, 64))
        self.Align.setText("")
        self.Align.setIcon(icon)
        self.Align.setIconSize(QtCore.QSize(32, 32))
        self.Align.setCheckable(False)
        self.Align.setChecked(False)
        self.Align.setObjectName("Align")
        self.gridLayout_14.addWidget(self.Align, 0, 0, 1, 1)
        self.Move = QtWidgets.QPushButton(self.ControlsGroup)
        self.Move.setMinimumSize(QtCore.QSize(48, 48))
        self.Move.setMaximumSize(QtCore.QSize(64, 64))
        self.Move.setText("")
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/Move.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Move.setIcon(icon12)
        self.Move.setIconSize(QtCore.QSize(24, 24))
        self.Move.setCheckable(False)
        self.Move.setChecked(False)
        self.Move.setObjectName("Move")
        self.gridLayout_14.addWidget(self.Move, 0, 2, 1, 1)
        self.XRayBtn = QtWidgets.QPushButton(self.ControlsGroup)
        self.XRayBtn.setMinimumSize(QtCore.QSize(48, 48))
        self.XRayBtn.setMaximumSize(QtCore.QSize(64, 64))
        self.XRayBtn.setToolTip("XRay toggle")
        self.XRayBtn.setText("")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/xray.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.XRayBtn.setIcon(icon13)
        self.XRayBtn.setIconSize(QtCore.QSize(24, 24))
        self.XRayBtn.setCheckable(False)
        self.XRayBtn.setChecked(False)
        self.XRayBtn.setObjectName("XRayBtn")
        self.gridLayout_14.addWidget(self.XRayBtn, 1, 0, 1, 1)
        self.gridLayout_7.addLayout(self.gridLayout_14, 0, 0, 1, 1)
        self.cbHierarchy = QtWidgets.QCheckBox(self.ControlsGroup)
        self.cbHierarchy.setMinimumSize(QtCore.QSize(52, 48))
        self.cbHierarchy.setMaximumSize(QtCore.QSize(64, 128))
        self.cbHierarchy.setToolTip("use Part and Body\n"
"hierarchy in Aligning")
        self.cbHierarchy.setText("")
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/hierarchy.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cbHierarchy.setIcon(icon14)
        self.cbHierarchy.setIconSize(QtCore.QSize(26, 26))
        self.cbHierarchy.setChecked(True)
        self.cbHierarchy.setObjectName("cbHierarchy")
        self.gridLayout_7.addWidget(self.cbHierarchy, 0, 1, 1, 1, QtCore.Qt.AlignTop)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_7.addItem(spacerItem3, 0, 2, 1, 1)
        self.gridLayout_6.addWidget(self.ControlsGroup, 0, 0, 1, 1)
        self.gridLayout_5.addLayout(self.gridLayout_6, 2, 0, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem4, 0, 1, 1, 1)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.close = QtWidgets.QPushButton(self.dockWidgetContents)
        self.close.setMaximumSize(QtCore.QSize(28, 28))
        self.close.setText("")
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/closeW.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.close.setIcon(icon15)
        self.close.setIconSize(QtCore.QSize(24, 24))
        self.close.setObjectName("close")
        self.gridLayout_2.addWidget(self.close, 0, 5, 1, 1, QtCore.Qt.AlignTop)
        self.dock_minimize = QtWidgets.QPushButton(self.dockWidgetContents)
        self.dock_minimize.setMaximumSize(QtCore.QSize(28, 28))
        self.dock_minimize.setText("")
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/minimize.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.dock_minimize.setIcon(icon16)
        self.dock_minimize.setIconSize(QtCore.QSize(24, 24))
        self.dock_minimize.setObjectName("dock_minimize")
        self.gridLayout_2.addWidget(self.dock_minimize, 0, 2, 1, 1, QtCore.Qt.AlignTop)
        self.Help_Align = QtWidgets.QPushButton(self.dockWidgetContents)
        self.Help_Align.setMaximumSize(QtCore.QSize(28, 28))
        self.Help_Align.setText("")
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/help.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Help_Align.setIcon(icon17)
        self.Help_Align.setIconSize(QtCore.QSize(24, 24))
        self.Help_Align.setObjectName("Help_Align")
        self.gridLayout_2.addWidget(self.Help_Align, 0, 4, 1, 1, QtCore.Qt.AlignTop)
        self.Label_Align_Gui = QtWidgets.QLabel(self.dockWidgetContents)
        self.Label_Align_Gui.setMinimumSize(QtCore.QSize(3, 0))
        self.Label_Align_Gui.setToolTip("Ctrl+Click to add to selection\n"
"Faces/Planes or Edges/Axis")
        self.Label_Align_Gui.setObjectName("Label_Align_Gui")
        self.gridLayout_2.addWidget(self.Label_Align_Gui, 0, 6, 1, 1)
        self.dock_float = QtWidgets.QPushButton(self.dockWidgetContents)
        self.dock_float.setMaximumSize(QtCore.QSize(28, 28))
        self.dock_float.setText("")
        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap("/home/mau/.FreeCAD/Mod/Manipulator/Resources/ui/un_dock.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.dock_float.setIcon(icon18)
        self.dock_float.setIconSize(QtCore.QSize(24, 24))
        self.dock_float.setObjectName("dock_float")
        self.gridLayout_2.addWidget(self.dock_float, 0, 1, 1, 1, QtCore.Qt.AlignTop)
        self.gridLayout_5.addLayout(self.gridLayout_2, 0, 0, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_5.addItem(spacerItem5, 3, 0, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_5.addItem(spacerItem6, 4, 0, 1, 1)
        DockWidget.setWidget(self.dockWidgetContents)

###############################################################################################################

###############################################################################################################
        #self.rbMass.toggled.connect(self.rbBBox.setEnabled)
        #def test_rbMass(self):
        #    if self.rbMass.isChecked():
        #        self.rbBBox.setChecked(False)
        #    else:
        #        self.rbBBox.setChecked(True)
        #self.rbMass.clicked.connect(test_rbMass(self))
        #self.rbBBox.clicked.connect(
        #lambda checked: not checked and self.rbMass.setChecked(True))
        
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(closeW_b64))
        self.close.setIconSize(QtCore.QSize(btn_sm_sizeX,btn_sm_sizeY))
        self.close.setIcon(QtGui.QIcon(pm))
        self.close.clicked.connect(close_aligner)
        if 1:
            pm = QtGui.QPixmap()
            pm.loadFromData(base64.b64decode(minimize_b64))
            self.dock_minimize.setIconSize(QtCore.QSize(btn_sm_sizeX,btn_sm_sizeY))
            self.dock_minimize.setIcon(QtGui.QIcon(pm))
            self.dock_minimize.clicked.connect(Alg_minimz)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(un_dock_b64))
        self.dock_float.setIconSize(QtCore.QSize(btn_sm_sizeX,btn_sm_sizeY))
        self.dock_float.setIcon(QtGui.QIcon(pm))
        self.dock_float.clicked.connect(Alg_undock)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Bbox_b64))
        self.rbBBox.setIconSize(QtCore.QSize(btn_mn_sizeX,btn_mn_sizeY)) #chkb_sizeX,chkb_sizeY))
        self.rbBBox.setIcon(QtGui.QIcon(pm))
        self.rbBBox.clicked.connect(self.setReferenceBB)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Mass_b64))
        self.rbMass.setIconSize(QtCore.QSize(btn_mn_sizeX,btn_mn_sizeY))
        self.rbMass.setIcon(QtGui.QIcon(pm))
        self.rbMass.clicked.connect(self.setReferenceMs)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Normal_b64))
        self.rbNormal.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbNormal.setIcon(QtGui.QIcon(pm))
        self.rbNormal.clicked.connect(self.setNormalNm)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Normal_Inv_b64))
        self.rbNormal_Inv.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbNormal_Inv.setIcon(QtGui.QIcon(pm))
        self.rbNormal_Inv.clicked.connect(self.setNormalNi)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Planes_b64))
        self.rbPlanes.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbPlanes.setIcon(QtGui.QIcon(pm))
        #self.rbPlanes.clicked.connect(AlignOn)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Planes_Centers_b64))
        self.rbPlanesCenters.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbPlanesCenters.setIcon(QtGui.QIcon(pm))
        self.rbPlanesCenters.setChecked(True)
        #self.rbPlanesCenters.clicked.connect(AlignOn)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Centers_b64))
        self.rbCenters.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbCenters.setIcon(QtGui.QIcon(pm))
        #self.rbCenters.clicked.connect(AlignOn)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(X_b64))
        self.cbX.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.cbX.setIcon(QtGui.QIcon(pm))
        #self.cbX.clicked.connect(onAxis)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Y_b64))
        self.cbY.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.cbY.setIcon(QtGui.QIcon(pm))
        #self.cbY.clicked.connect(onAxis)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Z_b64))
        self.cbZ.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.cbZ.setIcon(QtGui.QIcon(pm))
        #self.cbZ.clicked.connect(onAxis)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Center_Align_b64))
        self.Align.setIconSize(QtCore.QSize(btn_sizeX,btn_sizeY))
        self.Align.setIcon(QtGui.QIcon(pm))
        self.Align.clicked.connect(self.onAlign)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Move_b64))
        self.Move.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.Move.setIcon(QtGui.QIcon(pm))
        self.Move.clicked.connect(self.onMove)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Undo_b64))
        self.Origin_Align.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.Origin_Align.setIcon(QtGui.QIcon(pm))
        #self.Origin_Align.setEnabled(False)
        self.Origin_Align.setEnabled(True)
        # self.Origin_Align.clicked.connect(self.onUndo)
        self.Origin_Align.clicked.connect(self.onCenter)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(help_b64))
        self.Help_Align.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.Help_Align.setIcon(QtGui.QIcon(pm))
        self.Help_Align.clicked.connect(self.onHelp)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(XRayM_b64))
        self.XRayBtn.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.XRayBtn.setIcon(QtGui.QIcon(pm))
        self.XRayBtn.clicked.connect(self.onXRayBtn)
        if not hasattr(FreeCADGui.Selection,"clearPreselection"):
            self.XRayBtn.setEnabled(False)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(hierachy_b64))
        self.cbHierarchy.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.cbHierarchy.setIcon(QtGui.QIcon(pm))
        #self.cbHierarchy.setChecked(False)
        #self.cbHierarchy.clicked.connect(self.onHelp)
        
        
        # rBtn_Size = '16px'
        # rBtn_Style="QRadioButton::indicator {  width: "+rBtn_Size+";  height: "+rBtn_Size+"; }"
        # self.rbBBox.setStyleSheet(rBtn_Style)
        # self.rbMass.setStyleSheet(rBtn_Style)
        # self.rbNormal.setStyleSheet(rBtn_Style)
        # self.rbNormal_Inv.setStyleSheet(rBtn_Style)
        # self.rbPlanes.setStyleSheet(rBtn_Style)
        # self.rbPlanesCenters.setStyleSheet(rBtn_Style)
        # self.rbCenters.setStyleSheet(rBtn_Style)
        # cBtn_Style="QCheckBox::indicator {  width: "+rBtn_Size+";  height: "+rBtn_Size+"; }"
        # self.cbHierarchy.setStyleSheet(cBtn_Style)
        # self.cbX.setStyleSheet(cBtn_Style)
        # self.cbY.setStyleSheet(cBtn_Style)
        # self.cbZ.setStyleSheet(cBtn_Style)
        
###############################################################################################################
###############################################################################################################
        self.retranslateUi(DockWidget)
        QtCore.QMetaObject.connectSlotsByName(DockWidget)

## retraslateUi Qt5 compatibility #############################################################################################################
    def retranslateUi(self, DockWidget):
        DockWidget.setWindowTitle("Align tools")
        self.dock_float.setToolTip("expand")
        if 1:
            self.dock_minimize.setToolTip("minimize")
        self.close.setToolTip("close")
        self.Move.setToolTip("Move selected")
        self.Align.setToolTip("Align objects\nFirst object is the Reference")
        self.Help_Align.setToolTip("Help tips")
        #self.Origin_Align.setToolTip("Undo last Alignment")
        self.Origin_Align.setToolTip("Move Selected Object Face [Edge or Point]<br>aligning it to Origin")
        #self.Label_Align_Gui.setText("<b>"+ctrl_btn+"+Click</b> to add selection:<br>Planes/Faces, Edges/Axis")
        self.Label_Align_Gui.setText("<b>"+ctrl_btn+"+Click</b><br>to add selection")
        self.ReferenceGroup.setTitle("Reference")
        self.AlignGroup.setTitle("Align on")

### ------------------------------------------------------------------------------------ ###
### ---------code to be inserted and remove from new generation------------------------- ###
### ------------------------------------------------------------------------------------ ###

  ## NB!!! comment the line      ##self.config_ini_Lbl.setText("<b>TextLabel</b>")
###############################################################################################################
# widgets connected functions
    #def rbMass_clicked(self):
    #def rbMass(self):
    #    prints(self.rbMass)
    #    if self.rbMass.isChecked():
    #        say('rbMass')
    #        #self.rbBBox.setChecked(False)
    #    else:
    #        say('not rbMass')
    #        #self.rbBBox.setChecked(True)
    ##self.rbMass.clicked.connect(rbMass_clicked(self))
    def setReferenceBB(self):  #rbBBox
        say("centering on Bounding Boxes")
        type=0
        self.rbBBox.setChecked(True)
        self.rbMass.setChecked(False)
        
    def setReferenceMs(self):  #rbMass
        say("centering on Center of Mass")
        type=1
        self.rbBBox.setChecked(False)
        self.rbMass.setChecked(True)
            
    def setReference(self):  #rb
        if self.rbBBox.isChecked():
            say("centering on Bounding Boxes")
            type=0
        else:
            say("centering on Center of Mass")
            type=1
##
    def setNormalNm(self):
        normal=0
        say("Align on NormalAt")
        self.rbNormal_Inv.setChecked(False)
        self.rbNormal.setChecked(True)
    def setNormalNi(self):
        normal=0
        say("Align on Inverted NormalAt")
        self.rbNormal_Inv.setChecked(True)
        self.rbNormal.setChecked(False)
        
    def setNormal(self):
        if self.rbNormal.isChecked():
            normal=0
            say("Align on NormalAt")
        else:
            say("Align on Inverted NormalAt")
            normal=1
##
    def onAlign(self):
        global objs_moved
        say("Align clicked")
        if hasattr(FreeCADGui.Selection,"clearPreselection"):
            onXRayB([])
        normal=0;type=0;mode=0
        if self.rbNormal_Inv.isChecked():
            say("Align Normal Inverted")
            normal=1
        if self.rbBBox.isChecked():
            say("centering on Bounding Boxes")
        else:
            say("centering on Center of Mass")
            type=1
        if self.rbPlanesCenters.isChecked():
            say("Centering and aligning Planes")
        elif self.rbCenters.isChecked():
            say("Centering Faces/Edges")
            mode=1
        else:
            say("Aligning Planes")
            mode=2
        cx=0;cy=0;cz=0
        if self.cbX.isChecked():
            cx=1
        if self.cbY.isChecked():
            cy=1
        if self.cbZ.isChecked():
            cz=1
        Align(normal,type,mode,cx,cy,cz)
        if len (objs_moved) > 0:
            #self.Undo_Align.setEnabled(True)
            FreeCAD.ActiveDocument.commitTransaction()
        else:
            #self.Undo_Align.setEnabled(False)
            if FreeCAD.ActiveDocument is not None:
                FreeCAD.ActiveDocument.abortTransaction()
##
    def onCenter(self):
        say('Centering')
        global initial_placement, last_selection
        global moving, rotating
        global objs, objs_plc
        global objs_moved, plc_moved, _recompute
        get_ALGposition()
    
        # selection = [s for s in FreeCADGui.Selection.getSelectionEx() if s.Document == FreeCAD.ActiveDocument ]
        if 'LinkView' in dir(FreeCADGui): #getting the full hierarchy information
            #selEx     = FreeCADGui.Selection.getSelectionEx('', 0) # Select a subObject w/ the full hierarchy information
            selEx     = FreeCADGui.Selection.getSelectionEx('', 1) # Select a subObject w/ resolving subobject
            ## empty string means current document, '*' means all document. 
            ## The second argument 1 means resolve sub-object, which is the default value. 0 means full hierarchy.
        else:
            selEx       = FreeCADGui.Selection.getSelectionEx()         # Select a subObject
        selection = [s for s in selEx if s.Document == FreeCAD.ActiveDocument ]
        
        if len(selection) == 1:
            # if FreeCAD.ActiveDocument is not None:
            #     FreeCAD.ActiveDocument.openTransaction('Centering')
            dirz = (0,0,-1)
            cx=0;cy=0;cz=0
            if ALGDockWidget.ui.cbX.isChecked():
                cx=1
            if ALGDockWidget.ui.cbY.isChecked():
                cy=1
            if ALGDockWidget.ui.cbZ.isChecked():
                cz=1
            say('aligning options x='+str(cx)+';y='+str(cy)+';z='+str(cz))
            #print(Base.Vector(selectedEdge.Point))
            tocenterSel = selection[0]
            # print (tocenterSel)
            rcircle = Part.makeCircle(1.0, Base.Vector(0,0,0), Base.Vector(dirz))
            Part.show(rcircle)
            rcircle_name=FreeCAD.ActiveDocument.ActiveObject.Name
            FreeCAD.ActiveDocument.getObject(rcircle_name).Label='rcircle'
            f=Part.Face(Part.Wire((FreeCAD.ActiveDocument.getObject(rcircle_name).Shape.Edges[0])))
            Part.show(f)
            rface_name=FreeCAD.ActiveDocument.ActiveObject.Name
            rface = FreeCAD.ActiveDocument.getObject(rface_name)
            FreeCAD.ActiveDocument.removeObject(rcircle_name)
            #s0.Object,s0.SubElementNames)
            selOb = selection[0].Object
            selSubEl = selection[0].SubElementNames
            if len (selSubEl) == 0:
                if hasattr(selOb, 'Shape'):
                    shape = selOb.Shape
                    #if shape.ShapeType == 'Solid' or shape.ShapeType == 'Shell':
                    if not self.rbBBox.isChecked() and (shape.ShapeType == 'Solid' or shape.ShapeType == 'Shell'):
                        #shift = shape.CenterOfMass
                        shift = FreeCAD.Vector(shape.CenterOfMass.x*cx,shape.CenterOfMass.y*cy,shape.CenterOfMass.z*cz)
                    else:
                        if not self.rbBBox.isChecked(): #Warn the user (only) if automatically defaulting to BBox centering
                    # elif shape.ShapeType == 'Compound' or shape.ShapeType == 'CompSolid':
                            say('Centering on Bounding Box of Compound '+selOb.Label)
                        bb = shape.BoundBox
                        shift = FreeCAD.Vector(bb.XLength/2*cx+bb.XMin,bb.YLength/2*cy+bb.YMin,bb.ZLength/2*cz+bb.ZMin*cz)
                    #print(shift)
                    FreeCAD.ActiveDocument.openTransaction('Undo Move to Origin')
                    base = selOb.Placement
                    base.move(-shift)
                    #selOb.Placement=-shift
                    FreeCAD.ActiveDocument.commitTransaction()
            FreeCADGui.Selection.clearSelection()
            FreeCADGui.Selection.addSelection(rface,'Face1')
            FreeCADGui.Selection.addSelection(selOb,selSubEl)
            #s0.SubElementNames)
            # print('here1')
            if len (selSubEl) != 0:
                self.onAlign()
                # print('here2')
            FreeCAD.ActiveDocument.removeObject(rface_name)
##
#    def onCenter(self):
#        say("Center clicked")
#        Center()
##
    def onMove(self):
        say("Move clicked")
        Move()
##
    def onUndo(self):
        say("Undo clicked")
        Undo()
##
    def onXRayBtn(self): #XrayM temp
        sel = FreeCADGui.Selection.getSelectionEx()
        onXRayB(sel)
##
    def onHelp(self):
        msg="""<b>Align Tools</b><br>
        <b>"""+ctrl_btn+"""+Click</b> to add selection:<br>
        select Faces, Planes, Edges and Axis<br>
        then click the <i>'Align'</i> button.<br>
        <i>Note:</i><br>The <b>first Selection</b> is the
        Reference for Aligning.<br>
        <br><b>Deselect hierarchy option</b> to align object(s) inside a single hierarchy
        <br><br><i>If it is not possible to align parts in one step, try to align the edges before and then the faces.</i>
        <br><br>Use <i>'Move'</i> button to move a single object.<br>
        <br>Use 'XRay' button to make your selection clickable through it.<br>
        <br>Use 'Center' button to move your selection to Origin.<br>
        <br><b>Align Tools</b> work with <b>Part</b>, <b>App::Part</b> and <b>Body</b> objects.
        <br><font color = blue><b>Version:
        """+__version__+"""</b></font>"""
        QtGui.QApplication.restoreOverrideCursor()
        res=''
        QtGui.QApplication.restoreOverrideCursor()
        res = QtGui.QMessageBox.question(None,"Help",msg,QtGui.QMessageBox.Ok)
##

###############################################################################################################
def onXRayB(sel_list): #XrayM temp
    global libraryX,myXRayed

    #sel = FreeCADGui.Selection.getSelectionEx()
    if len(myXRayed) != 0:
    #if len(sel) == 0:
        XRayM(None)
        myXRayed = []
    else:
        for selobj in sel_list: #sel:
            XRayM(selobj.Object)
            myXRayed.append(selobj.Object)
        # Gui.Selection.clearSelection()
        if hasattr(FreeCADGui.Selection,"clearPreselection"):
            FreeCADGui.Selection.clearPreselection()
##
def XRayM(obj):
    import FreeCAD as App
    import Show

    global libraryX
    if obj is None:
        for itobj in libraryX:
            tv = libraryX[itobj]
            tv.restore()
        libraryX = {}
        return
    if obj in libraryX:
        tv = libraryX.pop(obj)
        tv.restore()
    else:
        tv = Show.TempoVis(App.ActiveDocument)
        tv.modifyVPProperty(obj, 'Transparency', 80)
        #tv.modifyVPProperty(obj, 'DisplayMode', 'Shaded')
        tv.setUnpickable(obj)
        libraryX[obj] = tv
##

def Alg_centerOnScreen (widg):
    '''centerOnScreen()
    Centers the window on the screen.'''
    # sayw(widg.width());sayw(widg.height())
    # sayw(widg.pos().x());sayw(widg.pos().y())
    resolution = QtGui.QDesktopWidget().screenGeometry()
    xp=(resolution.width() / 2) - sizeX/2 # - (KSUWidget.frameSize().width() / 2)
    yp=(resolution.height() / 2) - sizeY/2 # - (KSUWidget.frameSize().height() / 2))
    # xp=widg.pos().x()-sizeXMax/2;yp=widg.pos().y()#+sizeY/2
    widg.setGeometry(xp-sizeX, yp, sizeX, sizeY)
##
global alg_instance_nbr
alg_instance_nbr=0

def Alg_singleInstance():
    app = QtGui.QApplication #QtGui.qApp
    #print(app.screens())
    #setPixelSize(12)
    #app.setAttribute(QtCore.AA_DisableHighDpiScaling)
    #app.setAttribute(QtCore.Qt.AA_Use96Dpi)
    for i in app.topLevelWidgets():
        #say (str(i.objectName()))
        if i.objectName() == "Aligner":
            say (str(i.objectName()))
            #i.close()
            #i.deleteLater()
            say ('closed')
            return False
    t=FreeCADGui.getMainWindow()
    dw=t.findChildren(QtGui.QDockWidget)
    #say( str(dw) )
    for i in dw:
        #say (str(i.objectName()))
        if str(i.objectName()) == "Aligner": #"kicad StepUp 3D tools":
            say (str(i.objectName())+' docked')
            set_ALGposition()
            #i.deleteLater()
            return False
    return True
##

##############################################################
def dock_right_ALG(): ##ok
    global alg_instance_nbr
    
    ALGmw = FreeCADGui.getMainWindow()
    t=FreeCADGui.getMainWindow()
    dw=t.findChildren(QtGui.QDockWidget)
    looping=False
    ldw=len (dw)
    if ldw>0:
        looping=True
    idw=0
    cv=None
    while looping and idw < ldw:
    #for d in dw:
        d=dw[idw]
        idw+=1
        area = t.dockWidgetArea(d)
        #if area == QtCore.Qt.LeftDockWidgetArea:
        #    print (d.windowTitle(), '(Left)')
        if area == QtCore.Qt.RightDockWidgetArea:
            print (d.windowTitle(), '(Right)')
            r_w=str(d.objectName()) #;print(r_w)
            cv = t.findChild(QtGui.QDockWidget, r_w)
            looping=False
    if ALGDockWidget and cv is not None:
        dw=t.findChildren(QtGui.QDockWidget)
        #t.tabifyDockWidget(cv,RHDockWidget)
        try:
            t.tabifyDockWidget(cv,ALGDockWidget)
            say( "Tabified done !")               
            #stop
        except:
            say('exception raised')
            pass
    else:
        ALGmw.addDockWidget(QtCore.Qt.RightDockWidgetArea,ALGDockWidget)
        ALGDockWidget.setFloating(False)  #dock
        #stop
    #RHDockWidget.resize(sizeXright,sizeYright)
    ALGDockWidget.activateWindow()
    ALGDockWidget.raise_()
    if alg_instance_nbr==0:
        alg_instance_nbr=1
        dock_right_ALG()
##

def dock_left_ALG():
    ALGmw = FreeCADGui.getMainWindow()
    # ALGDockWidget = QtGui.QDockWidget()          # create a new dckwidget
    # ALGDockWidget.ui = Ui_DockWidget()   #Ui_AlignDockWidget()           # myWidget_Ui()             # load the Ui script
    # ALGDockWidget.ui.setupUi(ALGDockWidget) # setup the ui

    #ALGDockWidget.setObjectName("Aligner")

    ALGmw.addDockWidget(QtCore.Qt.LeftDockWidgetArea,ALGDockWidget)
    ALGDockWidget.setFloating(False)  #dock
    ALGDockWidget.activateWindow()
    ALGDockWidget.raise_()
    t=FreeCADGui.getMainWindow()
    cv = t.findChild(QtGui.QDockWidget, "Combo View")
    if cv is None:
        cv = t.findChild(QtGui.QDockWidget, "ComboView")
        if cv is None:
            cv = t.findChild(QtGui.QDockWidget, "Model")
            if cv is None:
                cv = t.findChild(QtGui.QDockWidget, "Tree view")
    if ALGDockWidget and cv:
        dw=t.findChildren(QtGui.QDockWidget)
        try:
            t.tabifyDockWidget(cv,ALGDockWidget)
            say( "Tabified done !")              
        except:
            say('exception raised')
            pass
##

doc=FreeCAD.ActiveDocument
#
def set_ALGposition():
    global alg_dock_mode
    
    pg = FreeCAD.ParamGet("User parameter:BaseApp/Preferences/Mod/Manipulator")
    alg_dock_mode = pg.GetString("ALG_dock")
    if len (alg_dock_mode) == 0:
        alg_dock_mode = 'float/350/300/302/268'
    if 'float' in alg_dock_mode:
        ALGDockWidget.setFloating(True)  #undock
        ALGDockWidget.resize(sizeX,sizeY)
        a_geo = alg_dock_mode.split('/')
        # print(a_geo)
        ALGDockWidget.activateWindow()
        ALGDockWidget.raise_()
        if len (a_geo) > 1:
            ALGDockWidget.setGeometry(int(a_geo[1]), int(a_geo[2]),int(a_geo[3]), int(a_geo[4]))
            # print('setting position to: ', a_geo)
    if alg_dock_mode == 'left':
        dock_left_ALG()
        ALGDockWidget.activateWindow()
        ALGDockWidget.raise_()
    elif alg_dock_mode == 'right':
        dock_right_ALG()
        ALGDockWidget.activateWindow()
        ALGDockWidget.raise_()
    say("position set "+alg_dock_mode)
##
def get_ALGposition():
    global alg_dock_mode
    t=FreeCADGui.getMainWindow()
    if ALGDockWidget.isFloating():
        ag = ALGDockWidget.geometry()
        # print(ag)
        alg_dock_mode = 'float/'+str(ag.x())+'/'+str(ag.y())+'/'+str(ag.width())+'/'+str(ag.height())
    elif t.dockWidgetArea(ALGDockWidget) == QtCore.Qt.RightDockWidgetArea:
        alg_dock_mode = 'right'
    else:
        alg_dock_mode = 'left'
    pg = FreeCAD.ParamGet("User parameter:BaseApp/Preferences/Mod/Manipulator")
    pg.SetString("ALG_dock",alg_dock_mode)
    say("position written "+alg_dock_mode)
##



if Alg_singleInstance():

    ALGDockWidget = QtGui.QDockWidget()          # create a new dckwidget
    ALGDockWidget.ui = Ui_DockWidget()   #Ui_AlignDockWidget()           # myWidget_Ui()             # load the Ui script
    ALGDockWidget.ui.setupUi(ALGDockWidget) # setup the ui
    #ui = Ui_AlignDockWidget()
    #ui.setupUi(AlignDockWidget)
    #AlignDockWidget.show()
    #font = ALGDockWidget.font()
    #font.setPixelSize(150)
    # #font.setPointSize(2)
    #ALGDockWidget.setFont(font)
    #self.setPixelSize
    qtM,qtm = getQtversion() 
    if qtM == '5' and qtm == '6':  #workaround for hdpi on Qt 5.6 bugged release
        rBtn_Size = '16px'
        rBtn_Style="QRadioButton::indicator {  width: "+rBtn_Size+";  height: "+rBtn_Size+"; }"
        ALGDockWidget.ui.rbBBox.setStyleSheet(rBtn_Style)
        ALGDockWidget.ui.rbMass.setStyleSheet(rBtn_Style)
        ALGDockWidget.ui.rbNormal.setStyleSheet(rBtn_Style)
        ALGDockWidget.ui.rbNormal_Inv.setStyleSheet(rBtn_Style)
        ALGDockWidget.ui.rbPlanes.setStyleSheet(rBtn_Style)
        ALGDockWidget.ui.rbPlanesCenters.setStyleSheet(rBtn_Style)
        ALGDockWidget.ui.rbCenters.setStyleSheet(rBtn_Style)
        cBtn_Style="QCheckBox::indicator {  width: "+rBtn_Size+";  height: "+rBtn_Size+"; }"
        ALGDockWidget.ui.cbHierarchy.setStyleSheet(cBtn_Style)
        ALGDockWidget.ui.cbX.setStyleSheet(cBtn_Style)
        ALGDockWidget.ui.cbY.setStyleSheet(cBtn_Style)
        ALGDockWidget.ui.cbZ.setStyleSheet(cBtn_Style)

    ALGDockWidget.setObjectName("Aligner")

    ALGDockWidget.setFloating(True)  #undock
    ALGDockWidget.resize(sizeX,sizeY)
    ALGDockWidget.activateWindow()
    ALGDockWidget.raise_()
    #ALGDockWidget.hide()

    #ALGDockWidget.show()

    ALGDockWidget.setFeatures( QtGui.QDockWidget.DockWidgetMovable | QtGui.QDockWidget.DockWidgetFloatable ) #| QtGui.QDockWidget.WindowMinimizeButtonHint) #|QtGui.QDockWidget.DockWidgetClosable )
    #sALGDockWidget.setFeatures( QtGui.QDockWidget.DockWidgetMovable | QtGui.QDockWidget.DockWidgetFloatable) # | QtGui.QDockWidget.DockWidgetVerticalTitleBar ) # | QtGui.QDockWidget.DockWidgetClosable )

    paramGet = FreeCAD.ParamGet("User parameter:BaseApp/Preferences/MainWindow")
    if len(paramGet.GetString("StyleSheet"))>0: #we are using a StyleSheet
        ALGDockWidget.setStyleSheet('QPushButton {border-radius: 0px; padding: 1px 2px;}')

    ALGmw = FreeCADGui.getMainWindow()                 # PySide # the active qt window, = the freecad window since we are inside it
    ALGmw.addDockWidget(QtCore.Qt.RightDockWidgetArea,ALGDockWidget)
    #ALGDockWidget.show()
    set_ALGposition()
    #Alg_undock()
    #Alg_centerOnScreen (ALGDockWidget)

### ------------------------------------------------------------------------------------ ###
def Undo():
    say('Undo')
    global initial_placement, last_selection
    global moving, rotating
    global objs, objs_plc
    global objs_moved, plc_moved, _recompute

    sayw(len(last_selection));sayw(len (objs)); sayw(len(objs_moved))
    if 0: #len(last_selection) > 0:# and len (objs) == 1:
        say ('last selection: ' + obj.Name)
        obj.Placement.Base =initial_placement
        #obj.Placement = initial_placement
        if _recompute:
            FreeCAD.ActiveDocument.recompute()
        objs = []
        last_selection = []
        lls = len(last_selection)
        obj = last_selection[lls-1] #.Object
        say ('last selection: ' + obj.Name)
        #obj.Placement.Base =initial_placement
        lip = len (initial_placement)
        obj.Placement = initial_placement[lip-1]
        initial_placement.pop(lip-1)
        last_selection.pop(lls-1)
        # FreeCAD.ActiveDocument.recompute()
    elif len (objs_moved) > 0:
        say ('Moving: ' + str(moving))
        say ('Rotating: ' + str(rotating))
        #sayerr(len(objs_moved))
        i=0
        lls = len(objs_moved)
        lip = len (plc_moved)
        obj = objs_moved[lls-1] #.Object
        obj.Placement = plc_moved[lip-1]
        plc_moved.pop(lip-1)
        objs_moved.pop(lls-1)
        #for o in objs_moved:
        #    #sayerr (o.Name)
        #    #sayerr (plc_moved[i])
        #    o.Placement = plc_moved[i]
        #    i=i+1

    if len (objs_moved) == 0:
        objs = []
        last_selection = []
        objs_moved = []
        plc_moved = []
        #ALGDockWidget.ui.Undo_Align.setEnabled(False)
        if _recompute:
            FreeCAD.ActiveDocument.recompute()
##

def Move():
    global initial_placement, last_selection
    global objs, objs_plc

    say('Move')
    get_ALGposition()
    #selection = [s for s in FreeCADGui.Selection.getSelectionEx() if s.Document == FreeCAD.ActiveDocument ]
    if 'LinkView' in dir(FreeCADGui): #getting the full hierarchy information
        selEx     = FreeCADGui.Selection.getSelectionEx('', 0) # Select a subObject w/ the full hierarchy information
        ## empty string means current document, '*' means all document. 
        ## The second argument 1 means resolve sub-object, which is the default value. 0 means full hierarchy.
    else:
        selEx       = FreeCADGui.Selection.getSelectionEx()         # Select a subObject
    selection = [s for s in selEx if s.Document == FreeCAD.ActiveDocument ]

    if len(selection) == 1:
        if FreeCAD.ActiveDocument is not None:
                FreeCAD.ActiveDocument.openTransaction('Moving')
        objs = []
        last_selection = selection
        say('Move 1')
        p = selection[0].Object.Placement.Base
        selection[0].Object.Placement.Base = p
        PartMover( FreeCADGui.activeDocument().activeView(), selection[0].Object )
        say('starting '+str(initial_placement))
    else:
        PartMoverSelectionObserver()

class PartMover:
    global initial_placement, final_placement

    def __init__(self, view, obj):
        global initial_placement
        self.obj = obj
        self.initialPosition = self.obj.Placement.Base
        initial_placement = self.initialPosition
        sayw('init '+str(initial_placement))
        obj.Placement.Base = self.initialPosition
        self.copiedObject = False
        self.view = view
        self.callbackMove = self.view.addEventCallback("SoLocation2Event",self.moveMouse)
        self.callbackClick = self.view.addEventCallback("SoMouseButtonEvent",self.clickMouse)
        self.callbackKey = self.view.addEventCallback("SoKeyboardEvent",self.KeyboardEvent)
    def moveMouse(self, info):
        newPos = self.view.getPoint( *info['Position'] )
        # debugPrint(5, 'new position %s' % str(newPos))
        self.obj.Placement.Base = newPos
    def removeCallbacks(self):
        self.view.removeEventCallback("SoLocation2Event",self.callbackMove)
        self.view.removeEventCallback("SoMouseButtonEvent",self.callbackClick)
        self.view.removeEventCallback("SoKeyboardEvent",self.callbackKey)
    def clickMouse(self, info):
        global initial_placement
        # debugPrint(4, 'clickMouse info %s' % str(info))
        if info['Button'] == 'BUTTON1' and info['State'] == 'DOWN':
            if not info['ShiftDown'] and not info['CtrlDown']:
                say('releasing obj')
                if _recompute:
                    FreeCAD.ActiveDocument.recompute()
                #sayw('releasing\ninitial p: '+ str( initial_placement ))
                sayw('final p: '+str(self.obj.Placement.Base))
                final_placement = self.obj.Placement.Base
                self.removeCallbacks()
            elif info['ShiftDown']: #copy object
                self.obj = duplicateImportedPart( self.obj )
                self.copiedObject = True
            elif info['CtrlDown']:
                azi   =  ( numpy.random.rand() - 0.5 )*numpy.pi*2
                ela   =  ( numpy.random.rand() - 0.5 )*numpy.pi
                theta =  ( numpy.random.rand() - 0.5 )*numpy.pi
                axis = azimuth_and_elevation_angles_to_axis( azi, ela )
                self.obj.Placement.Rotation.Q = quaternion( theta, *axis )

    def KeyboardEvent(self, info):
        # debugPrint(4, 'KeyboardEvent info %s' % str(info))
        if info['State'] == 'UP' and info['Key'] == 'ESCAPE':
            if not self.copiedObject:
                self.obj.Placement.Base = self.initialPosition
            else:
                FreeCAD.ActiveDocument.removeObject(self.obj.Name)
            self.removeCallbacks()

class PartMoverSelectionObserver:
    def __init__(self):
        global initial_placement
        
        FreeCADGui.Selection.addObserver(self)
        FreeCADGui.Selection.removeSelectionGate()
        if FreeCAD.ActiveDocument is not None:
            FreeCAD.ActiveDocument.openTransaction('Moving 2')
        if len(FreeCADGui.Selection.getSelection()) > 0:
            p = FreeCADGui.Selection.getSelection()[0].Placement.Base
            FreeCADGui.Selection.getSelection()[0].Placement.Base = p
        
    def addSelection( self, docName, objName, sub, pnt ):
        # debugPrint(4,'addSelection: docName,objName,sub = %s,%s,%s' % (docName, objName, sub))
        FreeCADGui.Selection.removeObserver(self)
        obj = FreeCAD.ActiveDocument.getObject(objName)
        view = FreeCADGui.activeDocument().activeView()
        PartMover( view, obj )

# class MovePartCommand:
#     say('Move')
#     def Activated(self):
#         selection = [s for s in FreeCADGui.Selection.getSelectionEx() if s.Document == FreeCAD.ActiveDocument ]
#         if len(selection) == 1:
#             say('Move2')
#             PartMover( FreeCADGui.activeDocument().activeView(), selection[0].Object )
#         else:
#             PartMoverSelectionObserver()

#FreeCADGui.addCommand('assembly2_movePart', MovePartCommand())

def duplicateImportedPart( part ):
    nameBase = part.Label
    while nameBase[-1] in '0123456789' and len(nameBase) > 0:
        nameBase = nameBase[:-1]
    try:
        newObj = FreeCAD.ActiveDocument.addObject("Part::FeaturePython", findUnusedObjectName(nameBase))
    except UnicodeEncodeError:
        safeName = findUnusedObjectName('import_')
        newObj = FreeCAD.ActiveDocument.addObject("Part::FeaturePython", safeName)
        newObj.Label = findUnusedLabel( nameBase )
    newObj.addProperty("App::PropertyFile",    "sourceFile",    "importPart").sourceFile = part.sourceFile
    newObj.addProperty("App::PropertyFloat", "timeLastImport","importPart").timeLastImport =  part.timeLastImport
    newObj.setEditorMode("timeLastImport",1)
    newObj.addProperty("App::PropertyBool","fixedPosition","importPart").fixedPosition = False# part.fixedPosition
    newObj.addProperty("App::PropertyBool","updateColors","importPart").updateColors = getattr(part,'updateColors',True)
    newObj.Shape = part.Shape.copy()
    for p in part.ViewObject.PropertiesList: #assuming that the user may change the appearance of parts differently depending on their role in the assembly.
        if hasattr(newObj.ViewObject, p) and p not in ['DiffuseColor','Proxy']:
            setattr(newObj.ViewObject, p, getattr( part.ViewObject, p))
    newObj.ViewObject.DiffuseColor = copy.copy( part.ViewObject.DiffuseColor )
    newObj.Proxy = Proxy_importPart()
    newObj.ViewObject.Proxy = ImportedPartViewProviderProxy()
    newObj.Placement.Base = part.Placement.Base
    newObj.Placement.Rotation = part.Placement.Rotation
    return newObj

def recurse_node(obj,plcm,scl):
    sayerr(obj.Name)
    if "App::Part" in obj.TypeId or "Body" in obj.TypeId \
    or "Compound" in obj.TypeId or 'App::LinkGroup' in obj.TypeId:
        for o in obj.Group:
            #sayerr(o.Name)
            if "App::Part" in o.TypeId  or "Body" in o.TypeId \
            or "Compound" in o.TypeId  or 'App::LinkGroup' in obj.TypeId:
                #sayerr(o.Name)#+" * "+obj.Name)
                new_plcm=get_node_plc(o,obj)
                recurse_node(o,new_plcm,scl)
            else:
                if "Sketcher" not in o.TypeId:
                    simple_cpy_plc(o,plcm)
                    scl.append(FreeCAD.ActiveDocument.ActiveObject)
##

def get_top_level (obj):
    lvl=10000
    top=None
    for ap in obj.InListRecursive:
        if hasattr(ap,'Placement') and ap.TypeId!='App::FeaturePython' and ap.TypeId!='Part::Part2DObjectPython':
            if len(ap.InListRecursive) < lvl:
                top = ap
                lvl = len(ap.InListRecursive)
    if top is not None:
        print(top.Label,top.TypeId)
    return top

def get_sorted_list (obj):
    lvl=10000
    completed=0
    listUs=obj.InListRecursive
    #sayerr('unsorted')
    #for p in listUs:
    #    print p.Label
    listUsName=[]
    for o in obj.InListRecursive:
        listUsName.append(o.Name)
    listS=[]
    i=0
    #for i, ap in enumerate(listUs):
    #    top=ap
    #    if len(ap.InListRecursive) < lvl:
    #        lvl = len(ap.InListRecursive)
    #    for ap2 in listUs[(i + 1):]:
    #        if len(ap2.InListRecursive) < lvl:
    #            top = ap2
    #            lvl = len(ap2.InListRecursive)
    #    listS.append(top)
    sayw(listUsName)
    i=0
    while len (listUsName) > 0:
        for apName in listUsName:
            #apName=listUsName[i]
            ap=FreeCAD.ActiveDocument.getObject(apName)
            if len(ap.InListRecursive) < lvl:
                lvl = len(ap.InListRecursive)
                top = ap
                topName = ap.Name
        listS.append(top)
        #print topName
        if top is not None:
            print(top.Label,top.TypeId)
        idx=listUsName.index(topName)
        #sayw(idx)
        listUsName.pop(idx)
        lvl=10000
        #sayerr(listUsName)

    return listS
##

def reset_prop_shapes(obj):

    s=obj.Shape
    #say('resetting props #2')
    r=[]
    t=s.copy()
    for i in t.childShapes():
        c=i.copy()
        c.Placement=t.Placement.multiply(c.Placement)
        r.append((i,c))

    w=t.replaceShape(r)
    w.Placement=FreeCAD.Placement()
    Part.show(w)
    #say(w)
    #
    #FreeCADGui.ActiveDocument.ActiveObject.ShapeColor=FreeCADGui.ActiveDocument.Part__Feature.ShapeColor
    #FreeCADGui.ActiveDocument.ActiveObject.LineColor=FreeCADGui.ActiveDocument.Part__Feature.LineColor
    #FreeCADGui.ActiveDocument.ActiveObject.PointColor=FreeCADGui.ActiveDocument.Part__Feature.PointColor
    #FreeCADGui.ActiveDocument.ActiveObject.DiffuseColor=FreeCADGui.ActiveDocument.Part__Feature.DiffuseColor
    FreeCADGui.ActiveDocument.ActiveObject.ShapeColor=FreeCADGui.ActiveDocument.getObject(obj.Name).ShapeColor
    FreeCADGui.ActiveDocument.ActiveObject.LineColor=FreeCADGui.ActiveDocument.getObject(obj.Name).LineColor
    FreeCADGui.ActiveDocument.ActiveObject.PointColor=FreeCADGui.ActiveDocument.getObject(obj.Name).PointColor
    FreeCADGui.ActiveDocument.ActiveObject.DiffuseColor=FreeCADGui.ActiveDocument.getObject(obj.Name).DiffuseColor
    new_label=obj.Label
    FreeCAD.ActiveDocument.removeObject(obj.Name)
    FreeCAD.ActiveDocument.recompute()
    FreeCAD.ActiveDocument.ActiveObject.Label=new_label
    rstObj=FreeCAD.ActiveDocument.ActiveObject
    #say(rstObj)
    #

    return rstObj

def Align(normal,type,mode,cx,cy,cz):
    global initial_placement, last_selection
    global objs, objs_plc
    global moving, rotating
    global objs_moved, plc_moved
    #objs = [] ; objs_plc = []
    #objs_moved = [] ; plc_moved = []

    get_ALGposition()
    #cx = 1  # center x -> 1
    #cy = 1  # center y -> 1
    #cz = 1  # center z -> 1
    say(str(cx)+str(cy)+str(cz))
    create_points=False
    use_bb = True #align center based on bounding boxes or center of mass
    if type==1:
        use_bb = False #align center based on bounding boxes or center of mass

    sel = FreeCADGui.Selection.getSelection()
    #selEx = FreeCADGui.Selection.getSelectionEx()
    if 'LinkView' in dir(FreeCADGui): #getting the full hierarchy information
        #selEx     = FreeCADGui.Selection.getSelectionEx('', 0) # Select a subObject w/ the full hierarchy information
        selEx     = FreeCADGui.Selection.getSelectionEx('', 1) # Select a subObject w/ resolving subobject
        ## empty string means current document, '*' means all document. 
        ## The second argument 1 means resolve sub-object, which is the default value. 0 means full hierarchy.
    else:
        selEx       = FreeCADGui.Selection.getSelectionEx()         # Select a subObject

    if len(selEx) < 2 and not testing:
        return
    
    if FreeCAD.ActiveDocument is not None:
            FreeCAD.ActiveDocument.openTransaction('Aligner')
    last_selection = []
    say("number of objects: "+ str(len(selEx)))
    objs = [selobj.Object for selobj in selEx]
    #k=0
    for o in objs:
        say ('obj: ' + o.Name)
        objs_plc.append(o.Placement) #.Base)
        say ('Placement: ' + str(o.Placement)) #.Base))
        moving.append([FreeCAD.Vector(0,0,0)])
        rotating.append([0, FreeCAD.Vector(0,0,0), FreeCAD.Vector(0,0,0)])
        #k=k+1

    def edgeToVector(edge):
        """ Return a vector from an edge or a Part.line.
        """
        if isinstance(edge,Part.Shape):
            return edge.Vertexes[-1].Point.sub(edge.Vertexes[0].Point)
        elif isinstance(edge,Part.Line):
            return edge.EndPoint.sub(edge.StartPoint)
        else:
            sayw("Error in edgeToVector(edge) : not a good type of input" + str(type(edge)))
            return None

    def centerLinePoint(edge,info=0):
        """ Return the center point of the Line.
        """
        center = None
        #VVector_A=edge.valueAt( 0.0 )
        Vector_A = edge.Vertexes[0].Point
        if info != 0:
            say("Origin of line selected is : "+str(Vector_A))
        #Vector_B=edge.valueAt( edge.Length )
        Vector_B = edge.Vertexes[-1].Point
        if info != 0:
            say("End of line selected is : "+str(Vector_B))
        Vector_MidPoint = Vector_B + Vector_A
        center = Vector_MidPoint.multiply(0.5)
        if info != 0:
            say("Center of line selected is : "+str(center))
        return center

    def object_alignEdges():
        """
        Align the Edge(s) from selected object(s) to the last Edge selected.
        - Click first to select an Edge of an object or several Edges from several objects.
        - Click second to select an Edge to align to.

        NB:
        The center of rotation is the center of the bounbing box if possible or
        the center of the Edge.

        if the Edge of the object selected is already aligned to the last one,
        a rotation of 180 deg is applied to the object.
        In this case the Axis of rotation is Z vector : Base.Vector(0, 0, 1)

        Two clicks will rotate by 180 deg.
        """
        msg=verbose

        error_msg =\
        "INCORRECT Object(s) Selection :\n" +\
        "You Must Select at least two(2) Edges (from two objects) !\n" +\
        "All Edges will be aligned to the last one !"

        Selection = get_SelectedObjectsWithParent(info=msg, printError=False)
        m_actDoc=get_ActiveDocument(info=1)
        Selection2 = FreeCADGui.Selection.getSelectionEx(m_actDoc.Name)

        try:
            SelectedObjects = Selection
            Number_of_Edges  = SelectedObjects[1]
            if msg!=0:
                print_msg("Number_of_Edges=" + str(Number_of_Edges))

            if Number_of_Edges >= 2 :
                Edge_List = SelectedObjects[4]
                if msg != 0:
                    print_msg(" Edge_List=" + str(Edge_List))

                # Get the Reference Edge : last of the selected
                Ref_Edge_dict = Edge_List[-1]
                for Selected_Edge, Parent_Edge in Ref_Edge_dict.iteritems():
                    Edge_ref = Selected_Edge

                del Edge_List[-1]

                for Selected_Edge_dict in Edge_List:
                    if msg != 0:
                        print_msg("Selected_Edge_dict = " + str(Selected_Edge_dict))
                    for Selected_Edge, Parent_Edge in Selected_Edge_dict.iteritems():
                        if msg != 0:
                            print_msg("Selected_Edge = " + str(Selected_Edge))
                            print_msg("Parent = " + str(Parent_Edge))
                        try:
                            Edge_Point = Parent_Edge.Shape.BoundBox.Center
                        except:
                            Edge_Point = centerLinePoint(Selected_Edge,info=0)

                        if msg != 0:
                            print_point(Edge_Point, msg="Edge_Point = ")
                        Edge = Selected_Edge

                        if colinearEdges(Edge, Edge_ref, info=msg , tolerance=1e-12):
                            rot_axis = Base.Vector(0, 0, 1).cross(edgeToVector(Edge))
                            rot_center = Edge_Point
                            rot_angle = 180. + m_angleAlignEdges
                            Draft.rotate(Parent_Edge,rot_angle,rot_center,rot_axis)
                        else:
                            m_angle, m_angle_rad = angleBetween(Edge,Edge_ref)
                            print_msg("m_angle = " + str(m_angle))
                            rot_axis = edgeToVector(Edge).cross(edgeToVector(Edge_ref))
                            print_msg("rot_axis = " + str(rot_axis))
                            rot_center = Edge_Point
                            rot_angle = m_angle + m_angleAlignEdges
                            Draft.rotate(Parent_Edge,rot_angle,rot_center,rot_axis)
                # Reset the selection changed by Draft.rotate
                reset_SelectedObjects(Selection2, info=0)
            else:
                sayerr(error_msg)
        except:
            sayerr(error_msg)


    def angleBetween(e1, e2):
        """ Return the angle (in degrees) between 2 edges.
        """
        if isinstance(e1,Part.Edge) and isinstance(e2,Part.Edge):
            # Create the Vector for first edge
            v1 = e1.Vertexes[-1].Point
            v2 = e1.Vertexes[0].Point
            ve1 = v1.sub(v2)
            # Create the Vector for second edge
            v3 = e2.Vertexes[-1].Point
            v4 = e2.Vertexes[0].Point
            ve2 = v3.sub(v4)
        elif isinstance(e1,Base.Vector) and isinstance(e2,Base.Vector):
            ve1 = e1
            ve2 = e2
        elif isinstance(e1,Part.Edge) and isinstance(e2,Base.Vector):
            v1 = e1.Vertexes[-1].Point
            v2 = e1.Vertexes[0].Point
            ve1 = v1.sub(v2)
            ve2 = e2
        elif isinstance(e1,Base.Vector) and  isinstance(e2,Part.Edge):
            ve1 = e1
            v3 = e2.Vertexes[-1].Point
            v4 = e2.Vertexes[0].Point
            ve2 = v3.sub(v4)
        else:
            return

        angle = ve1.getAngle(ve2)
        import math
        return math.degrees(angle), angle

    def colinearVectors(A, B, C, info=0, tolerance=1e-12):
        """ Return true if the 3 points are aligned.
        """
        Vector_1 = B - A
        Vector_2 = C - B
        #if info != 0:
        #    print_point(Vector_1, msg="Vector_1 : ")
        #    print_point(Vector_2, msg="Vector_2 : ")
        Vector_3 = Vector_1.cross(Vector_2)
        #if info != 0:
        #    print_point(Vector_3, msg="Vector_1.cross(Vector_2) : ")

        if abs(Vector_3.x) <= tolerance and abs(Vector_3.y) <= tolerance and abs(Vector_3.z) <= tolerance:
            if info != 0:
                sayw("Colinear Vectors !")
            return True
        else:
            if info != 0:
                sayw("NOT Colinear Vectors !")
            return False
        return

    global _recompute
    coords = []
    normals = []
    coordPs = []
    sEdge = []
    j = 0
    p0 =  FreeCAD.Placement (FreeCAD.Vector(0,0,0), FreeCAD.Rotation(0,0,0), FreeCAD.Vector(0,0,0))
    # .BoundBox.Center
    #align faces
    points=False
    if (len(selEx) > 1) and (len(selEx)==len(sel)):
        #s = obj.Shape
        last_selection = [] #removing old Move object
        top_level_obj=[]
        if ALGDockWidget.ui.cbHierarchy.isChecked():
            hierarchy = True
        else:
            hierarchy=False # moving relatively on object inside a Part group
        for i in range (len(selEx)):
            top_level_obj.append('none')
        for fc in selEx:
            say ("j= "+str(j))
            say("len selEx "+str(len(selEx)))
            s=fc
            #selectedEdge = FreeCADGui.Selection.getSelectionEx()[j].SubObjects[0] # select one element SubObjects
            #sayerr(selEx[j].Object.TypeId)
            if (selEx[j].Object.TypeId == 'PartDesign::Plane') or (selEx[j].Object.TypeId == 'App::Placement')\
            or (selEx[j].Object.TypeId == 'PartDesign::CoordinateSystem'): #Datum plane with super Placement #(selEx[j].Object.TypeId == 'App::Plane') or :
                ##print norm
                pad=0
                edge_op=0
                if (selEx[j].Object.TypeId != 'App::Placement') and (selEx[j].Object.TypeId != 'PartDesign::CoordinateSystem'):
                    f1=selEx[j].Object.Shape.Faces[0]
                else:
                    f1 = Part.Shape()
                    f1.Placement = selEx[j].Object.Placement
                FreeCAD.ActiveDocument.addObject("Part::Circle","testCircle")
                FreeCAD.ActiveDocument.testCircle.Radius=2.000
                FreeCAD.ActiveDocument.testCircle.Angle0=0.000
                FreeCAD.ActiveDocument.testCircle.Angle1=360.000
                FreeCAD.ActiveDocument.testCircle.Placement=f1.Placement
                f=Part.Face(Part.Wire(FreeCAD.ActiveDocument.testCircle.Shape.Edges[0]))
                Part.show(f)
                fName= FreeCAD.ActiveDocument.ActiveObject.Name
                s = FreeCAD.ActiveDocument.getObject(fName)
                FreeCAD.ActiveDocument.removeObject(FreeCAD.ActiveDocument.testCircle.Name)
                if _recompute:
                    FreeCAD.ActiveDocument.recompute()
                #stop
                sayerr(str(s.Placement))
                s.Label = 'single-copy-absolute-placement'
                #f.Placement = s.Placement
                say("Label : "+ make_string(sel[j].Label))     # extract the Label
                say("Name  : "+ str(sel[j].Name))     # extract the Name
                say( "Center Face Binder "+str(0)+" "+str(f.Faces[0].CenterOfMass)) # Vector center mass to face
                say( "Center Face Binder bb "+str(0)+" "+str(f.Faces[0].BoundBox.Center)) # Vector center mass to face
            elif (selEx[j].Object.TypeId == 'App::Plane') and ('XY' in selEx[j].Object.Name or 'XZ' in selEx[j].Object.Name or 'YZ' in selEx[j].Object.Name): #Origin Planes
                pad=0
                edge_op=0
                shape = Part.Shape()
                shape.Placement = selEx[j].Object.Placement #selEx[j].Object.superPlacement.multiply(selEx[j].Object.Placement)
                #sayerr(selEx[j].Object.superPlacement)
                #sayw(selEx[j].Object.Placement)
                #sayerr(selEx[j].Object.superPlacement.multiply(selEx[j].Object.Placement))
                FreeCAD.ActiveDocument.addObject("Part::Circle","testCircle")
                FreeCAD.ActiveDocument.testCircle.Radius=2.000
                FreeCAD.ActiveDocument.testCircle.Angle0=0.000
                FreeCAD.ActiveDocument.testCircle.Angle1=360.000
                FreeCAD.ActiveDocument.testCircle.Placement=shape.Placement
                sayw(FreeCAD.ActiveDocument.testCircle.Placement)
                f=Part.Face(Part.Wire(FreeCAD.ActiveDocument.testCircle.Shape.Edges[0]))
                Part.show(f)
                #f.Placement=FreeCAD.ActiveDocument.testCircle.Placement
                sayerr(f.Placement)
                FreeCAD.ActiveDocument.removeObject(FreeCAD.ActiveDocument.testCircle.Name)
                if _recompute:
                    FreeCAD.ActiveDocument.recompute()
                fName= FreeCAD.ActiveDocument.ActiveObject.Name
                s = FreeCAD.ActiveDocument.getObject(fName)
                #f.Placement=shape.Placement
                s.Placement=f.Placement
                #f1=f.copy()
                #Part.show(f1)
                FreeCAD.ActiveDocument.ActiveObject.Label='Testing-'+str(j)
                sayerr(str(s.Placement))
                s.Label = 'single-copy-absolute-placement'
                say("Label : "+ make_string(sel[j].Label))     # extract the Label
                say("Name  : "+ str(sel[j].Name))     # extract the Name
                say( "Center Face Binder "+str(0)+" "+str(f.Faces[0].CenterOfMass)) # Vector center mass to face
                say( "Center Face Binder bb "+str(0)+" "+str(f.Faces[0].BoundBox.Center)) # Vector center mass to face
            elif (selEx[j].Object.TypeId == 'App::Line') or (selEx[j].Object.TypeId == 'PartDesign::Line'):
                FreeCAD.ActiveDocument.addObject("Part::Plane","TempAxis")
                FreeCAD.ActiveDocument.TempAxis.Length=5.000
                FreeCAD.ActiveDocument.TempAxis.Width=5.000
                FreeCAD.ActiveDocument.TempAxis.Placement=selEx[j].Object.Placement
                FreeCAD.ActiveDocument.TempAxis.Label='TempAxis'
                if _recompute:
                    FreeCAD.ActiveDocument.recompute()
                fp = FreeCAD.ActiveDocument.TempAxis.Shape.Faces[0].Edges[1]
                pad=0
                edge_op=2
                f=fp.copy()
                Part.show(f)
                #stop
                FreeCAD.ActiveDocument.removeObject("TempAxis")
                if _recompute:
                    FreeCAD.ActiveDocument.recompute()
                fName= FreeCAD.ActiveDocument.ActiveObject.Name
                s = FreeCAD.ActiveDocument.getObject(fName)
                s.Placement = f.Placement
                sayerr(str(f.Placement))
                s.Label = 'single-copy-absolute-placement'
                #f.Placement = s.Placement
                say("Label : "+ make_string(sel[j].Label))     # extract the Label
                say("Name  : "+ str(sel[j].Name))     # extract the Name
                say( "Center Face Binder "+str(0)+" "+str(f.CenterOfMass)) # Vector center mass to face
                say( "Center Face Binder bb "+str(0)+" "+str(f.BoundBox.Center)) # Vector center mass to face
            else:
                try:
                    selectedEdge = selEx[j].SubObjects[0] # select one element SubObjects
                except:
                    sayerr('select only Faces or closed Edges')
                    return
                sEdge.append(selectedEdge)
                pad=0
                edge_op=0
                if str(fc.SubObjects[0])[1:5] != "Face": #edge
                    # try:
                    #     Edge_Point = centerLinePoint(selectedEdge,info=1)
                    # except:
                    #     stop
                    for o in fc.SubObjects:
                        if 'Vertex' in str(o):
                            points = True
                    if 'Vertex' in str(selectedEdge):
                        dirz = (0,0,1)
                        #print(Base.Vector(selectedEdge.Point))
                        ccircle = Part.makeCircle(1.0, Base.Vector(selectedEdge.Point), Base.Vector(dirz))
                        Part.show(ccircle)
                        ccircle_name=FreeCAD.ActiveDocument.ActiveObject.Name
                        FreeCAD.ActiveDocument.getObject(ccircle_name).Label='ccircle'
                        f=Part.Face(Part.Wire((FreeCAD.ActiveDocument.getObject(ccircle_name).Shape.Edges[0])))
                        FreeCAD.ActiveDocument.removeObject(ccircle_name)
                        #stop
                    elif selectedEdge.isClosed():
                    #if selectedEdge.isClosed():
                    #try:
                        sayerr(str(selectedEdge.Placement))
                        wire = Part.Wire(selectedEdge)
                        #sayw(str(wire.Placement))
                        e = selectedEdge
                        f = Part.Face(wire)
                    #except: # edge not closed
                    else:  # edge not closed
                        if 'Circle' in str(selectedEdge.Curve):
                            sayerr('Circle radius '+str(selectedEdge.Curve.Radius))
                            #f1=subObj.Shape.Faces[0]

                            wf = Part.Face(Part.Wire(selectedEdge))
                            Part.show(wf)
                            wf_name=FreeCAD.ActiveDocument.ActiveObject.Name

                            dirz=wf.normalAt(0,0)
                            #sayw(dirz)
                            # ccircle = Part.makeCircle(r, Base.Vector(cnt), Base.Vector(dirz))
                            # > Circle (Radius : 10, Position : (10, 0, 0), Direction : (1, 0, 0))
                            ccircle = Part.makeCircle(selectedEdge.Curve.Radius, Base.Vector(selectedEdge.Curve.Center), Base.Vector(dirz))
                            #ccircle_face = Part.Face(ccircle)
                            #Part.show(ccircle_face)
                            #ccircle_face_name=FreeCAD.ActiveDocument.ActiveObject.Name
                            #FreeCAD.ActiveDocument.getObject(ccircle_face_name).Label='ccircle_face'
                            Part.show(ccircle)
                            ccircle_name=FreeCAD.ActiveDocument.ActiveObject.Name
                            FreeCAD.ActiveDocument.getObject(ccircle_name).Label='ccircle'
                            f=Part.Face(Part.Wire((FreeCAD.ActiveDocument.getObject(ccircle_name).Shape.Edges[0])))
                            # Part.show(f)
                            # f_name=FreeCAD.ActiveDocument.ActiveObject.Name
                            FreeCAD.ActiveDocument.removeObject(ccircle_name)
                            FreeCAD.ActiveDocument.removeObject(wf_name)
                            # ccircle.Curve
                            # > Circle (Radius : 10, Position : (10, 0, 0), Direction : (1, 0, 0))
                            #bbxCenter = selectedEdge.Curve.Center
                            Edge_Point = selectedEdge.Curve.Center
                            # norm = f.normalAt(0,0)
                            #subObj = f
                            #FreeCAD.ActiveDocument.removeObject(f_name)
                            #PC1=Draft.makePoint(subObj.Curve.Center)
                            #w.close
                            open_circle=True
                        else:
                            wire = Part.Wire(selectedEdge)
                            f = wire
                            edge_op=1
                            #sayerr('edge not closed to be managed')
                            Edge_Point = centerLinePoint(selectedEdge,info=0)
                            #reply = QtGui.QMessageBox.information(None,"info", "edge(s) non closed are not managed atm\n")
                            #stop
                    #Part.show(fw)
                    Part.show(f)
                    #stop
                    #f.Placement=selectedEdge.Placement
                    fName= FreeCAD.ActiveDocument.ActiveObject.Name
                    s = FreeCAD.ActiveDocument.getObject(fName)
                    #sayerr(str(f.Placement))
                    s.Placement = f.Placement
                    s.Label = 'single-copy-absolute-placement-edge'
                    #stop
                    #f.Placement = s.Placement
                    pad=1
                    #FreeCAD.ActiveDocument.recompute()
                    say("Label : "+ make_string(sel[j].Label))     # extract the Label
                    say("Name  : "+ str(sel[j].Name))     # extract the Name
                    if edge_op==0:
                        say( "Center Face Binder "+str(0)+" "+str(f.Faces[0].CenterOfMass)) # Vector center mass to face
                        say( "Center Face Binder bb "+str(0)+" "+str(f.Faces[0].BoundBox.Center)) # Vector center mass to face
                    else:
                        say( "Center Face Binder "+str(0)+" "+str(f.CenterOfMass)) # Vector center mass to face
                        say( "Center Face Binder bb "+str(0)+" "+str(f.BoundBox.Center)) # Vector center mass to face
                else: #face
                    pad=0
                    f=fc.SubObjects[0].Faces[0].copy()
                    Part.show(f)
                    fName= FreeCAD.ActiveDocument.ActiveObject.Name
                    s = FreeCAD.ActiveDocument.getObject(fName)
                    s.Placement = f.Placement
                    sayerr(str(f.Placement))
                    s.Label = 'single-copy-absolute-placement'
                    #f.Placement = s.Placement
                    say("Label : "+ make_string(sel[j].Label))     # extract the Label
                    say("Name  : "+ str(sel[j].Name))     # extract the Name
                    say( "Center Face Binder "+str(0)+" "+str(f.Faces[0].CenterOfMass)) # Vector center mass to face
                    say( "Center Face Binder bb "+str(0)+" "+str(f.Faces[0].BoundBox.Center)) # Vector center mass to face
            # LineColor
            ob = fc.Object
            #print ob.Placement
            ## pOriginal=ob.Placement
            pOriginal=f.Placement
            s.Placement=p0
            #stop
            ##ob.Placement=p0
            #say('resetting props #2')
            #sh=ob.Shape
            sh=s.Shape
            r=[]
            t=sh.copy()
            for i in t.childShapes():
                c=i.copy()
                c.Placement=t.Placement.multiply(c.Placement)
                r.append((i,c))
            acpy=t.replaceShape(r)
            acpy.Placement=FreeCAD.Placement()
            if hasattr(ob,'InListRecursive'):
                lrl=len(ob.InListRecursive)
                for o in ob.InListRecursive:
                    say(o.Name)
                inverted=True
                if len(ob.InList):
                    top_level_obj[j] = get_top_level(ob)
                    #sayerr(top_level_obj[j].Label)
                    listSorted=get_sorted_list (ob)
                    #for p in listSorted:
                    #    print p.Name
                    #print listSorted, ' Sorted; Top ', top_level_obj[j]
                    #stop
                    for i in range (0,lrl):
                        if hasattr(listSorted[i],'Placement'):
                            #if 'Plane' not in ob.InListRecursive[i].TypeId:
                            if listSorted[i].hasExtension("App::GeoFeatureGroupExtension"):
                                acpy.Placement=acpy.Placement.multiply(listSorted[i].Placement)
            say(acpy.Placement)
            #acpy.Placement=acpy.Placement.multiply(pOriginal)
            if pad == 0: #note making wire from edge already resets the original placement
                acpy.Placement=acpy.Placement.multiply(pOriginal)
            s.Placement = acpy.Placement
            ##ob.Placement = pOriginal
            #stop
            f.Placement = s.Placement
            #stop

            red   = 1.0  # 1 = 255
            green = 0.0  #
            blue  = 0.0  #
            if create_points:
                if pad==0:
                    if use_bb:
                        Draft.makePoint(f.Faces[0].BoundBox.Center.x,f.Faces[0].BoundBox.Center.y,f.Faces[0].BoundBox.Center.z) # create a point
                    else:
                        Draft.makePoint(f.Faces[0].CenterOfMass.x,f.Faces[0].CenterOfMass.y,f.Faces[0].CenterOfMass.z) # create a point
                    FreeCADGui.activeDocument().activeObject().PointColor = (red, green, blue)
                else:
                    if use_bb:
                        Draft.makePoint(f.Faces[0].BoundBox.Center.x,f.Faces[0].CenterOfMass.y,f.Faces[0].CenterOfMass.z) # create a point
                    else:
                        Draft.makePoint(f.Faces[0].CenterOfMass.x,f.Faces[0].CenterOfMass.y,f.Faces[0].CenterOfMass.z) # create a point
                    FreeCADGui.activeDocument().activeObject().PointColor = (red, green, blue)
            if pad==0:
                if use_bb:
                    if edge_op == 0:
                        coordNx = f.Faces[0].BoundBox.Center.x
                        coordNy = f.Faces[0].BoundBox.Center.y
                        coordNz = f.Faces[0].BoundBox.Center.z
                        coordP  = f.Faces[0].BoundBox.Center
                    else:
                        coordNx = f.BoundBox.Center.x
                        coordNy = f.BoundBox.Center.y
                        coordNz = f.BoundBox.Center.z
                        coordP  = f.BoundBox.Center
                else:
                    if edge_op == 0:
                        coordNx = f.Faces[0].CenterOfMass.x
                        coordNy = f.Faces[0].CenterOfMass.y
                        coordNz = f.Faces[0].CenterOfMass.z
                        coordP  = f.Faces[0].CenterOfMass
                    else:
                        coordNx = f.CenterOfMass.x
                        coordNy = f.CenterOfMass.y
                        coordNz = f.CenterOfMass.z
                        coordP  = f.CenterOfMass
            else:
                if use_bb:
                    if edge_op == 0:
                        coordNx = f.Faces[0].BoundBox.Center.x
                        coordNy = f.Faces[0].BoundBox.Center.y
                        coordNz = f.Faces[0].BoundBox.Center.z
                        coordP  = f.Faces[0].BoundBox.Center
                    else:
                        coordNx = f.BoundBox.Center.x
                        coordNy = f.BoundBox.Center.y
                        coordNz = f.BoundBox.Center.z
                        coordP  = f.BoundBox.Center
                else:
                    if edge_op == 0:
                        coordNx = f.Faces[0].CenterOfMass.x
                        coordNy = f.Faces[0].CenterOfMass.y
                        coordNz = f.Faces[0].CenterOfMass.z
                        coordP  = f.Faces[0].CenterOfMass
                    else:
                        coordNx = f.CenterOfMass.x
                        coordNy = f.CenterOfMass.y
                        coordNz = f.CenterOfMass.z
                        coordP  = f.CenterOfMass
            coords.append ([coordNx,coordNy,coordNz])
            coordPs.append (coordP)
            #norm = f.Shape.Faces[0].normalAt(0,0)
            if j==0:
                if normal==1: #inverted
                    if edge_op == 0:
                        norm = f.Faces[0].normalAt(0,0)*-1
                    elif edge_op == 1:
                        norm = f.Vertex1.Point - f.Vertex2.Point
                    else:
                        norm = f.Vertex2.Point - f.Vertex1.Point
                else:
                    if edge_op == 0:
                        norm = f.Faces[0].normalAt(0,0)
                    elif edge_op == 1:
                        norm = f.Vertex2.Point - f.Vertex1.Point
                    else:
                        norm = f.Vertex1.Point - f.Vertex2.Point
                        #norm = e.normalAt(0)
            else:
                if edge_op == 0:
                    norm = f.Faces[0].normalAt(0,0)
                else:
                    norm = f.Vertex2.Point - f.Vertex1.Point
                    #norm = e.normalAt(0)
            #else:
            #    norm = f.Shape.Faces[0].normalAt(0,0)
            say (norm)
            normals.append (norm)
            if not testing:
                FreeCAD.ActiveDocument.removeObject(fName)
            else:
                say('testing')
                #stop
            if j>0 and not points:  #rotation only if points not in selection
                pos=FreeCAD.Vector(-coords[j][0]+coords[0][0],-coords[j][1]+coords[0][1],-coords[j][2]+coords[0][2])
                ## objs[j].Placement.move(pos)
                m_angle, m_angle_rad = angleBetween(normals[0],normals[j])
                say (m_angle)
                Origin = Base.Vector(0, 0, 0)
                copl=0
                if colinearVectors(normals[0], Origin, normals[j], info=1, tolerance=1e-12):
                    rot_axis = Base.Vector(0, 0, 1).cross(normals[0])
                    if rot_axis==FreeCAD.Vector (0.0, 0.0, 0.0):
                        rot_axis=Base.Vector(0, 1, 0).cross(normals[0])
                    rot_center = coordPs[j]
                    if normal==1:
                        rot_angle = 180. # + m_angleAlignFaces
                    else:
                        rot_angle=0.
                    copl=1
                    #Draft.rotate(Parent_Plane,rot_angle,rot_center,rot_axis)
                else:
                    #m_angle, m_angle_rad = angleBetween(Plane_Normal,Plane_Normal_ref)
                    rot_axis = normals[0].cross(normals[j])
                    rot_center = coordPs[j]
                    rot_angle = m_angle # + m_angleAlignFaces
                    #Draft.rotate(Parent_Plane,rot_angle,rot_center,rot_axis)
                #rot_axis = normals[0].cross(normals[j])
                #rot_center = coordPs[j]
                #rot_angle = m_angle # + m_angleAlignFaces
                sayw("axis,center,angle")
                say(rot_axis)
                say(rot_center)
                say(rot_angle)

                object_added=0
                if not testing2:
                    #print 'not testing2, mode  ', mode, ' rot_angle ',rot_angle
                    if rot_angle!=0: # and rot_axis!=FreeCAD.Vector (0.0, 0.0, 0.0):
                        if mode==0 or mode==2:
                            if rot_axis!=FreeCAD.Vector (0.0, 0.0, 0.0):
                                if top_level_obj[j] != 'none' and top_level_obj[j] is not None and hierarchy:
                                    o = top_level_obj[j]
                                else:
                                    o = objs[j]
                                #sayerr(o.Name+' '+o.Label+' '+str(o.Placement)+' rotation')
                                objs_moved.append(o)
                                plc_moved.append(o.Placement)
                                object_added=1
                                ##Draft.rotate(o,-rot_angle,rot_center,rot_axis)
                                shape = Part.Shape()
                                shape.Placement = o.Placement
                                shape.rotate(DraftVecUtils.tup(rot_center), DraftVecUtils.tup(rot_axis), -rot_angle)
                                o.Placement = shape.Placement
                                rotating[j] = [rot_angle,rot_center,rot_axis]
                                say("Rotated   "+o.Label+"  : angle "+str(-rot_angle)+" center "+str(rot_center)+" axis "+str(rot_axis))
                            else:
                                rotating[j] = [0, FreeCAD.Vector(0,0,0), FreeCAD.Vector(0,0,0)]
                    else:
                        rotating[j] = [0, FreeCAD.Vector(0,0,0), FreeCAD.Vector(0,0,0)]
            ##align centers
            if j>0:
                pos=FreeCAD.Vector((-coords[j][0]+coords[0][0])*cx,(-coords[j][1]+coords[0][1])*cy,(-coords[j][2]+coords[0][2])*cz)
                if mode==0 or mode==1:
                    #objs[j].Placement.move(pos)
                    if object_added==0:
                        #print top_level_obj[j]
                        if top_level_obj[j] != 'none' and top_level_obj[j] is not None and hierarchy:
                            o = top_level_obj[j]
                        else:
                            o = objs[j]
                        objs_moved.append(o)
                        plc_moved.append(o.Placement)
                        #sayerr(o.Name+' '+o.Label+' '+str(o.Placement)+' centers')
                        object_added=1
                    if not testing2:
                        o.Placement.move(pos)
                    moving[j] = pos
                    say("Moved   "+o.Label+"  : "+str(coordNx-coords[0][0])+" "+str(coordNy-coords[0][1])+" "+str(coordNz-coords[0][2]))
                    if mode==1:
                        rotating[j] = [0, FreeCAD.Vector(0,0,0), FreeCAD.Vector(0,0,0)]
                else:
                    moving[j] = FreeCAD.Vector(0,0,0)

            object_added=0
            j=j+1

    if _recompute:
        FreeCAD.ActiveDocument.recompute()
    #for obj in objs:
    for obj in FreeCAD.ActiveDocument.Objects:
        FreeCADGui.Selection.removeSelection(obj)

    # except:
    #     FreeCAD.Console.PrintError( "select a face"+"\n")
