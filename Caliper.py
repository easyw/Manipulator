#!/usr/bin/python
# -*- coding: utf-8 -*-
#****************************************************************************
#*                                                                          *
#*  Copyright (c) 2017                                                      *
#*  Maurice easyw@katamail.com                                              *
#*                                                                          *
#*   code partially based on:                                               *
#*                                                                          *
# evolution of Macro_CenterFace                                             *
# some part of Macro WorkFeature                                            *
# and Macro Rotate To Point, Macro_Delta_xyz                                *
# and assembly2                                                             *
#                                                                           *
# Move objs along obj face Normal or edge                                   *
#                                                                           *
#  (C) Maurice easyw-fc 2016                                                *
#    This program is free software; you can redistribute it and/or modify   *
#    it under the terms of the GNU Library General Public License (LGPL)    *
#    as published by the Free Software Foundation; either version 2 of      *
#    the License, or (at your option) any later version.                    *
#    for detail see the LICENCE text file.                                  *
#****************************************************************************


__title__   = "Caliper for Measuring Part, App::Part & Body objects"
__author__  = "maurice"
__url__     = "kicad stepup"
__version__ = "1.4.5" #Manipulator for Parts
__date__    = "09.2018"

testing=False #true for showing helpers
testing2=False #true for showing helpers

## todo
#  better Gui with icons
#  fix dist snap point in asm3 branch
##  ##App::Part hierarchical objects & Bodys on FC 0.17
##


## import statements
# oDraft -> Draft from FreeCAD_0.17.13488

import FreeCAD, FreeCADGui
from PySide.QtCore import QT_TRANSLATE_NOOP

def getFCversion():

    FC_majorV=int(FreeCAD.Version()[0])
    FC_minorV=int(FreeCAD.Version()[1])
    try:
        FC_git_Nbr=int(FreeCAD.Version()[2].strip(" (Git)"))
    except:
        FC_git_Nbr=0
    return FC_majorV,FC_minorV,FC_git_Nbr

if getFCversion()[0]==0 and getFCversion()[1]>17:
    import oDraft
    mDraft = oDraft
else:
    import Draft
    mDraft = Draft

import Part, PartGui, DraftTools, DraftVecUtils, DraftGeomUtils
from FreeCAD import Base
import sys, math
from PySide import QtCore, QtGui
from pivy import coin

import numpy as np

angle_tolerance = 1e-5 #
ninst = 0
global tobiarc_tol
tobiarc_tol = 0.001 #0.0001

def closestDistanceBetweenLines(a0,a1,b0,b1,clampAll=False,clampA0=False,clampA1=False,clampB0=False,clampB1=False):
    ## https://stackoverflow.com/questions/2824478/shortest-distance-between-two-line-segments
    ''' Given two lines defined by numpy.array pairs (a0,a1,b0,b1)
        Return the closest points on each segment and their distance
    '''

    # If clampAll=True, set all clamps to True
    if clampAll:
        clampA0=True
        clampA1=True
        clampB0=True
        clampB1=True


    # Calculate denomitator
    A = a1 - a0
    B = b1 - b0
    magA = np.linalg.norm(A)
    magB = np.linalg.norm(B)

    _A = A / magA
    _B = B / magB

    cross = np.cross(_A, _B);
    denom = np.linalg.norm(cross)**2


    # If lines are parallel (denom=0) test if lines overlap.
    # If they don't overlap then there is a closest point solution.
    # If they do overlap, there are infinite closest positions, but there is a closest distance
    if not denom:
        d0 = np.dot(_A,(b0-a0))

        # Overlap only possible with clamping
        if clampA0 or clampA1 or clampB0 or clampB1:
            d1 = np.dot(_A,(b1-a0))

            # Is segment B before A?
            if d0 <= 0 >= d1:
                if clampA0 and clampB1:
                    if np.absolute(d0) < np.absolute(d1):
                        return a0,b0,np.linalg.norm(a0-b0)
                    return a0,b1,np.linalg.norm(a0-b1)


            # Is segment B after A?
            elif d0 >= magA <= d1:
                if clampA1 and clampB0:
                    if np.absolute(d0) < np.absolute(d1):
                        return a1,b0,np.linalg.norm(a1-b0)
                    return a1,b1,np.linalg.norm(a1-b1)


        # Segments overlap, return distance between parallel segments
        return None,None,np.linalg.norm(((d0*_A)+a0)-b0)



    # Lines criss-cross: Calculate the projected closest points
    t = (b0 - a0);
    detA = np.linalg.det([t, _B, cross])
    detB = np.linalg.det([t, _A, cross])

    t0 = detA/denom;
    t1 = detB/denom;

    pA = a0 + (_A * t0) # Projected closest point on segment A
    pB = b0 + (_B * t1) # Projected closest point on segment B


    # Clamp projections
    if clampA0 or clampA1 or clampB0 or clampB1:
        if clampA0 and t0 < 0:
            pA = a0
        elif clampA1 and t0 > magA:
            pA = a1

        if clampB0 and t1 < 0:
            pB = b0
        elif clampB1 and t1 > magB:
            pB = b1

        # Clamp projection A
        if (clampA0 and t0 < 0) or (clampA1 and t0 > magA):
            dot = np.dot(_B,(pA-b0))
            if clampB0 and dot < 0:
                dot = 0
            elif clampB1 and dot > magB:
                dot = magB
            pB = b0 + (_B * dot)

        # Clamp projection B
        if (clampB0 and t1 < 0) or (clampB1 and t1 > magB):
            dot = np.dot(_A,(pB-a0))
            if clampA0 and dot < 0:
                dot = 0
            elif clampA1 and dot > magA:
                dot = magA
            pA = a0 + (_A * dot)


    return pA,pB,np.linalg.norm(pA-pB)


def normalized(first):
	"normalized(Vector) - returns a unit vector"
	if isinstance(first,FreeCAD.Vector):
		l=length(first)
		return FreeCAD.Vector(first.x/l, first.y/l, first.z/l)

def dotproduct(first, other):
	"dotproduct(Vector,Vector) - returns the dot product of both vectors"
	if isinstance(first,FreeCAD.Vector) and isinstance(other,FreeCAD.Vector):
		return (first.x*other.x + first.y*other.y + first.z*other.z)
###
def colinearVectors(A, B, C, info=0, tolerance=1e-12):
    """ Return true if the 3 points are aligned.
    """
    Vector_1 = B - A
    Vector_2 = C - B
    #if info != 0:
    #    print_point(Vector_1, msg="Vector_1 : ")
    #    print_point(Vector_2, msg="Vector_2 : ")
    Vector_3 = Vector_1.cross(Vector_2)
    #if info != 0:
    #    print_point(Vector_3, msg="Vector_1.cross(Vector_2) : ")

    if abs(Vector_3.x) <= tolerance and abs(Vector_3.y) <= tolerance and abs(Vector_3.z) <= tolerance:
        if info != 0:
            sayw("Colinear Vectors !")
        return True
    else:
        if info != 0:
            sayw("NOT Colinear Vectors !")
        return False
    return
###
def point_plane_distance(point, plane_normal, plane_point):
    """signed distance between plane and point"""
    dist = float (dotproduct(plane_normal, (point.sub(plane_point))))

    return dist
##

def reset_prop_shapes(obj):

    s=obj.Shape
    #say('resetting props #2')
    r=[]
    t=s.copy()
    for i in t.childShapes():
        c=i.copy()
        c.Placement=t.Placement.multiply(c.Placement)
        r.append((i,c))

    w=t.replaceShape(r)
    w.Placement=FreeCAD.Placement()
    Part.show(w)
    FreeCADGui.ActiveDocument.ActiveObject.ShapeColor=FreeCADGui.ActiveDocument.getObject(obj.Name).ShapeColor
    FreeCADGui.ActiveDocument.ActiveObject.LineColor=FreeCADGui.ActiveDocument.getObject(obj.Name).LineColor
    FreeCADGui.ActiveDocument.ActiveObject.PointColor=FreeCADGui.ActiveDocument.getObject(obj.Name).PointColor
    FreeCADGui.ActiveDocument.ActiveObject.DiffuseColor=FreeCADGui.ActiveDocument.getObject(obj.Name).DiffuseColor
    FreeCADGui.ActiveDocument.ActiveObject.Transparency=FreeCADGui.ActiveDocument.getObject(obj.Name).Transparency
    new_label=obj.Label
    FreeCAD.ActiveDocument.removeObject(obj.Name)
    FreeCAD.ActiveDocument.recompute()
    FreeCAD.ActiveDocument.ActiveObject.Label=new_label
    rstObj=FreeCAD.ActiveDocument.ActiveObject
    #say(rstObj)
    #
    return rstObj
###

def makeAPlane(w, w_multipl,norm,plcm,PC):
    """ creating an Annotation Plane and reference for Dimension
        aligned to the selected Face and centered on its center"""

    #FreeCAD.ActiveDocument.addObject("Part::Plane","AnnotationPlane")
    #APT=FreeCAD.ActiveDocument.ActiveObject
    #APTName=APT.Name
    #lng=w*w_multipl
    #FreeCAD.ActiveDocument.getObject(APTName).Length=lng
    #FreeCAD.ActiveDocument.getObject(APTName).Width=lng
    #FreeCAD.ActiveDocument.getObject(APTName).Placement=Base.Placement(Base.Vector(0.0,0.0,0.0),Base.Rotation(0.000,0.000,0.000,1.000))
    #FreeCAD.ActiveDocument.getObject(APTName).Label='APlane'
    #FreeCADGui.ActiveDocument.getObject(APTName).ShapeColor = (0.667,0.667,0.498)
    #FreeCADGui.ActiveDocument.getObject(APTName).Transparency = 50 #99
    #
    #FreeCAD.ActiveDocument.recompute()
    #
    ##Draft.rotate(FreeCAD.ActiveDocument.getObject(APEdgeName),45,FreeCAD.Vector(0,0,0),FreeCAD.Vector(0,0,1))
    #
    #sh1=FreeCAD.ActiveDocument.getObject(APTName).Shape.copy()
    ##print sh1.normalAt(0,0)
    #sh1.Placement=plcm
    ##print PC
    #sh1.translate(FreeCAD.Vector(PC[0]-lng/2,PC[1]-lng/2,PC[2]))
    #rot_angle = math.degrees(FreeCAD.Vector(0.0,0.0,1.0).getAngle(norm))
    #rot_axis = FreeCAD.Vector(0.0,0.0,1.0).cross(norm)
    #Origin = Base.Vector(0, 0, 0)
    #if colinearVectors(norm, Origin, FreeCAD.Vector(0.0,0.0,1.0), info=0, tolerance=1e-12):
    #    rot_axis = Base.Vector(0, 0, 1).cross(norm)
    #    if rot_axis==FreeCAD.Vector (0.0, 0.0, 0.0):
    #        rot_axis=Base.Vector(0, 1, 0).cross(norm)
    #    #rot_angle = 180. # + m_angleAlignFaces
    #    rot_angle=0.
    ##print rot_axis
    #sh1.rotate(DraftVecUtils.tup(PC), DraftVecUtils.tup(rot_axis), rot_angle)
    #FreeCAD.ActiveDocument.getObject(APTName).Placement=sh1.Placement
    #
    #FreeCAD.ActiveDocument.recompute()

    lng=w*w_multipl
    FreeCAD.ActiveDocument.addObject("Part::RegularPolygon","AnnotationPlane")
    APE=FreeCAD.ActiveDocument.ActiveObject
    APEName=APE.Name
    FreeCAD.ActiveDocument.getObject(APEName).Polygon=8
    FreeCAD.ActiveDocument.getObject(APEName).Circumradius=lng*1.41421
    FreeCAD.ActiveDocument.getObject(APEName).Placement=Base.Placement(Base.Vector(0.000,0.000,0.000),Base.Rotation(0.000,0.000,0.000,1.000))
    FreeCAD.ActiveDocument.getObject(APEName).Label='APEdge'
    FreeCAD.ActiveDocument.recompute()
    mDraft.upgrade(FreeCAD.ActiveDocument.getObject(APEName),delete=True)
    APT=FreeCAD.ActiveDocument.ActiveObject
    APTName=APT.Name

    FreeCAD.ActiveDocument.getObject(APTName).Label='APLane'
    FreeCADGui.ActiveDocument.getObject(APTName).ShapeColor = (0.667,0.667,0.498)
    FreeCADGui.ActiveDocument.getObject(APTName).Transparency = 50 #99

    sh1=FreeCAD.ActiveDocument.getObject(APTName).Shape.copy()
    #print sh1.normalAt(0,0)
    sh1.Placement=plcm
    #print PC
    sh1.translate(FreeCAD.Vector(PC[0],PC[1],PC[2]))
    rot_angle = math.degrees(FreeCAD.Vector(0.0,0.0,1.0).getAngle(norm))
    rot_axis = FreeCAD.Vector(0.0,0.0,1.0).cross(norm)
    Origin = Base.Vector(0, 0, 0)
    if colinearVectors(norm, Origin, FreeCAD.Vector(0.0,0.0,1.0), info=0, tolerance=1e-12):
        rot_axis = Base.Vector(0, 0, 1).cross(norm)
        if rot_axis==FreeCAD.Vector (0.0, 0.0, 0.0):
            rot_axis=Base.Vector(0, 1, 0).cross(norm)
        #rot_angle = 180. # + m_angleAlignFaces
        rot_angle=0.
    #print rot_axis
    sh1.rotate(DraftVecUtils.tup(PC), DraftVecUtils.tup(rot_axis), rot_angle)
    sh1.rotate(DraftVecUtils.tup(PC), DraftVecUtils.tup(norm), 45)

    FreeCAD.ActiveDocument.getObject(APTName).Placement=sh1.Placement
    FreeCAD.ActiveDocument.recompute()

    # PLN=FreeCAD.ActiveDocument.getObject(APT.Name)
    # AP=reset_prop_shapes(PLN)

    #sh1=FreeCAD.ActiveDocument.getObject(AP.Name).Shape.copy()
    #sh1.translate(FreeCAD.Vector(-w/2,-w/2,0))
    #FreeCAD.ActiveDocument.getObject(AP.Name).Placement=sh1.Placement

    return APTName
##
def remove_all_selection():
    if FreeCAD.ActiveDocument is not None:
        FreeCAD.ActiveDocument.recompute()
        for ob in FreeCAD.ActiveDocument.Objects:
            FreeCADGui.Selection.removeSelection(ob)

##

##--------------------------------------------------------------------------------------
class SelObserverCaliper:
    def addSelection(self, document, object, element, position):  # Selection
        global ui
        global selobject, sel, posz, P,P1,P2,PE,PC,APName
        global initial_placement, last_selection, objs
        global added_dim, in_hierarchy, vec1, mid, midP, va, vb, P_T
        global ornt_1, sel1, has_radius, w, angle, dstP

        fntsize='0.2mm'
        ticksize='0.1mm'
        Vtx_sel=False
        dx=0;dy=0;dz=0
        #dstP=-1
        #use_hierarchy=CPDockWidget.ui.cbHierarchy.isChecked()

        if 1:#try:
            selobject = FreeCADGui.Selection.getSelection()           # Select an object
            sel       = FreeCADGui.Selection.getSelectionEx()         # Select a  subObject

            #ui.label_1.setText("Length axis (first object) : " + str(sel[0].SubObjects[0].Length) + " mm")
            if len(selobject) == 1 or len(sel) == 1:# or (len(selobject) == 1 and len(sel) == 1):
                if len(sel[0].SubObjects)>0: #Faces or Edges
                    if 'Face' in str(sel[0].SubObjects[0]) or 'Edge' in str(sel[0].SubObjects[0])\
                                                           or 'Vertex' in str(sel[0].SubObjects[0]):
                        #sayw('starting')
                        if 'Vertex' in str(sel[0].SubObjects[0]):
                            Vtx_sel=True
                        objs = []
                        #if len (last_selection)>0:
                        #    say ('last selection: ' + last_selection[0].Name)
                        #    for o in last_selection:
                        #        say('sel list ' + o.Name) #o.Object.Name)
                        #sayw('selecting')
                        o = sel[0].Object
                        #top_lvl=None
                        #if in_hierarchy:
                        posz=position
                        #sayw('posz '+str(posz))
                        plcm, top_level_obj, bbC, pnt, orient, norm = get_placement_hierarchy (sel[0])
                        #print(top_level_obj);stop
                        if top_level_obj is not None:
                            #say('object in App::Part hierarchy or Body')
                            top_level_obj_Name=top_level_obj.Name
                            in_hierarchy=True
                        else:
                            #say('object Part')
                            top_level_obj_Name=sel[0].Object.Name
                            in_hierarchy=False
                        rot_center=bbC
                        has_Placement=False
                        if hasattr(top_level_obj,'Placement'):
                            has_Placement=True
                        if in_hierarchy and has_Placement:
                            #say('in hierarchy and use hierarchy')
                            last_selection.append(top_level_obj) #(sel[0])
                            obj = top_level_obj #sel[0].Object
                            initial_placement.append(obj.Placement)
                            objs.append(obj)
                            #say ('initial Plcm '+str(obj.Placement))
                        else:
                            last_selection.append(sel[0].Object)
                            obj = sel[0].Object
                            initial_placement.append(obj.Placement)
                            objs.append(obj)
                            #say ('initial Plcm '+str(obj.Placement))
                        #say ('last selection: ' + obj.Name)
                        #for o in last_selection:
                        #    say('sel list ' + o.Name) #o.Object.Name)

                        if CPDockWidget.ui.rbSnap.isChecked()\
                              or CPDockWidget.ui.rbBbox.isChecked() or CPDockWidget.ui.rbMass.isChecked():    ### Snap
                            #print (sel[0].SubObjects[0].Vertexes[0].Point,sel[0].SubObjects[0].Vertexes[1].Point)
                            #print 'pnt=',pnt[0]
                            if CPDockWidget.ui.DimensionP1.isEnabled(): #step #1
                                P1=pnt
                                PC=mDraft.makePoint(pnt[0],pnt[1],pnt[2])
                                added_dim.append(FreeCAD.ActiveDocument.getObject(PC.Name))
                                FreeCADGui.ActiveDocument.getObject(PC.Name).PointSize = 10.000
                                FreeCADGui.ActiveDocument.getObject(PC.Name).PointColor = (1.000,0.667,0.000)
                                CPDockWidget.ui.DimensionP1.setEnabled(False)
                                CPDockWidget.ui.DimensionP2.setEnabled(True)
                            elif CPDockWidget.ui.DimensionP2.isEnabled(): #step #2
                                CPDockWidget.ui.DimensionP2.setEnabled(False)
                                w=dist(P1, pnt)*5
                                P2=pnt
                                dx=abs(pnt[0]-P1[0]);dy=abs(pnt[1]-P1[1]);dz=abs(pnt[2]-P1[2])
                                if CPDockWidget.ui.cbAPlane.isChecked():
                                    PE=mDraft.makePoint(pnt[0],pnt[1],pnt[2])
                                    added_dim.append(FreeCAD.ActiveDocument.getObject(PE.Name))
                                    FreeCADGui.ActiveDocument.getObject(PE.Name).PointSize = 10.000
                                    FreeCADGui.ActiveDocument.getObject(PE.Name).PointColor = (1.000,0.667,0.000)
                                    CPDockWidget.ui.APlane.setEnabled(True)
                                    CPDockWidget.ui.DimensionP1.setEnabled(False)
                                else:
                                    CPDockWidget.ui.DimensionP1.setEnabled(True)
                                    FreeCAD.ActiveDocument.removeObject(PC.Name)
                                    halfedge = (pnt.sub(P1)).multiply(.5)
                                    mid=FreeCAD.Vector.add(P1,halfedge)
                                    if mid!=P1: #non coincident points
                                        dim=mDraft.makeDimension(pnt,P1,mid)
                                        try:
                                            mDraft.autogroup(dim)
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowType = u"Tick"
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).DisplayMode = u"3D"
                                        except:
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowType = "Tick"
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).DisplayMode = "3D"
                                            pass
                                        dst=FreeCAD.ActiveDocument.getObject(dim.Name).Distance
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).FontSize = fntsize
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowSize = ticksize
                                        #FreeCADGui.ActiveDocument.getObject(dim.Name).LineColor = (0.333,1.000,0.498)
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).LineColor = (1.000,0.667,0.000)
                                        FreeCAD.ActiveDocument.getObject(dim.Name).Label = "Distance"
                                        say("Distance : "+str(dim.Distance))
                                        added_dim.append(FreeCAD.ActiveDocument.getObject(dim.Name))
                                    else:
                                        say("Distance : 0.0")
                                sayw("Delta X  : "+str(abs(pnt[0]-P1[0])))
                                sayw("Delta Y  : "+str(abs(pnt[1]-P1[1])))
                                sayw("Delta Z  : "+str(abs(pnt[2]-P1[2])))
                            elif CPDockWidget.ui.APlane.isEnabled(): ## step #2
                                CPDockWidget.ui.APlane.setEnabled(False)
                                CPDockWidget.ui.DimensionP3.setEnabled(True)
                                #print 'step#2 norm ', norm, ' plcm ',plcm, ' P1 ',P1
                                plcmT=FreeCAD.Placement(FreeCAD.Vector(0,0,0), FreeCAD.Rotation(0,0,0), FreeCAD.Vector(0,0,0))
                                APName=makeAPlane(w,0.7,norm,plcmT,P1)
                                added_dim.append(FreeCAD.ActiveDocument.getObject(APName))
                            elif CPDockWidget.ui.DimensionP3.isEnabled(): ## step #3
                                CPDockWidget.ui.DimensionP3.setEnabled(False)
                                CPDockWidget.ui.DimensionP1.setEnabled(True)

                                dim=mDraft.makeDimension(P2,P1,posz)
                                try:
                                    mDraft.autogroup(dim)
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowType = u"Tick"
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).DisplayMode = u"3D"
                                except:
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowType = "Tick"
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).DisplayMode = "3D"
                                    pass
                                #FreeCADGui.ActiveDocument.getObject(dim.Name).FlipArrows = True
                                dst=FreeCAD.ActiveDocument.getObject(dim.Name).Distance
                                FreeCADGui.ActiveDocument.getObject(dim.Name).FontSize = fntsize
                                FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowSize = ticksize
                                FreeCADGui.ActiveDocument.getObject(dim.Name).LineColor = (1.000,0.667,0.000)
                                FreeCADGui.ActiveDocument.getObject(dim.Name).ExtLines = '0 mm'
                                FreeCAD.ActiveDocument.getObject(dim.Name).Label = "Distance"
                                say("Distance : "+str(dim.Distance))
                                sayw("Delta X  : "+str(dx))
                                sayw("Delta Y  : "+str(dy))
                                sayw("Delta Z  : "+str(dz))
                                added_dim.append(FreeCAD.ActiveDocument.getObject(dim.Name))
                                FreeCAD.ActiveDocument.removeObject(PC.Name)
                                FreeCAD.ActiveDocument.removeObject(PE.Name)
                                FreeCAD.ActiveDocument.removeObject(APName)

                            FreeCAD.ActiveDocument.recompute()
### -------------------------------------------------- end Snap ------------------------------------------------------------- ###

                        elif (CPDockWidget.ui.rbRadius.isChecked() and not Vtx_sel): ### Radius
                            if CPDockWidget.ui.DimensionP1.isEnabled():# and not CPDockWidget.ui.APlane.isEnabled(): #step #1
                                if 'Edge' in str(sel[0].SubObjects[0]):
                                    CPDockWidget.ui.DimensionP1.setEnabled(False)
                                    CPDockWidget.ui.DimensionP2.setEnabled(False)
                                    #print 'bbC',bbC
                                    has_radius=0
                                    curve_type = type(sel[0].SubObjects[0].Curve)
                                    if curve_type == Part.Circle or curve_type == Part.ArcOfCircle:
                                        has_radius=1
                                    elif curve_type == Part.BSplineCurve: #approx to radius
                                        has_radius=2
                                    P1=FreeCAD.Vector(bbC)
                                    P2=pnt
                                    halfedge = (pnt.sub(P1)).multiply(.5)
                                    mid=FreeCAD.Vector.add(P1,halfedge)
                                    PC=mDraft.makePoint(P1[0],P1[1],P1[2])
                                    PE=mDraft.makePoint(pnt[0],pnt[1],pnt[2])
                                    w=dist(P1, pnt)*5
                                    if CPDockWidget.ui.cbAPlane.isChecked():
                                        CPDockWidget.ui.APlane.setEnabled(True)
                                    else:
                                        CPDockWidget.ui.DimensionP1.setEnabled(True)
                                        #APName,APEdgeName=makeAPlane(w,norm,plcm,P1)
                                        #added_dim.append(FreeCAD.ActiveDocument.getObject(APEdgeName))
                                        #added_dim.append(FreeCAD.ActiveDocument.getObject(APName))
                                    #print norm
                                    #P=Draft.makePoint(pnt[0],pnt[1],pnt[2])
                                    if has_radius != 0:
                                        PC.Label='Center'
                                    else:
                                        PC.Label='Mid'
                                    FreeCADGui.ActiveDocument.getObject(PC.Name).PointColor = (1.000,0.667,0.000)
                                    FreeCADGui.ActiveDocument.getObject(PE.Name).PointColor = (1.000,0.667,0.000)
                                    FreeCADGui.ActiveDocument.getObject(PC.Name).PointSize = 10.000
                                    FreeCADGui.ActiveDocument.getObject(PE.Name).PointSize = 10.000
                                    added_dim.append(FreeCAD.ActiveDocument.getObject(PC.Name))
                                    added_dim.append(FreeCAD.ActiveDocument.getObject(PE.Name))

                                    if not CPDockWidget.ui.cbAPlane.isChecked():
                                        dim=mDraft.makeDimension(pnt,P1,mid)
                                        try:
                                            mDraft.autogroup(dim)
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowType = u"Tick"
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).DisplayMode = u"3D"
                                        except:
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowType = "Tick"
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).DisplayMode = "3D"
                                            pass
                                        #FreeCADGui.ActiveDocument.getObject(dim.Name).FlipArrows = True
                                        dst=FreeCAD.ActiveDocument.getObject(dim.Name).Distance
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).FontSize = fntsize
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowSize = ticksize
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).LineColor = (1.000,0.667,0.000)
                                        if has_radius == 2:
                                            say("Radius approx: "+str(dim.Distance))
                                            FreeCAD.ActiveDocument.getObject(dim.Name).Label = "Radius approx"
                                            sayw("Center Coordinates  : "+'{0:.3f}'.format(P1[0])+'; {0:.3f}'.format(P1[1])+'; {0:.3f}'.format(P1[2]))
                                            FreeCAD.ActiveDocument.removeObject(PE.Name)
                                        elif has_radius == 1:
                                            say("Radius   : "+str(dim.Distance))
                                            FreeCAD.ActiveDocument.getObject(dim.Name).Label = "Radius"
                                            sayw("Center Coordinates  : "+'{0:.3f}'.format(P1[0])+'; {0:.3f}'.format(P1[1])+'; {0:.3f}'.format(P1[2]))
                                            FreeCAD.ActiveDocument.removeObject(PE.Name)
                                        else:
                                            say("Distance : "+str(dim.Distance))
                                            FreeCAD.ActiveDocument.getObject(dim.Name).Label = "Distance"
                                            sayw("Delta X  : "+str(abs(pnt[0]-P1[0])))
                                            sayw("Delta Y  : "+str(abs(pnt[1]-P1[1])))
                                            sayw("Delta Z  : "+str(abs(pnt[2]-P1[2])))
                                            FreeCAD.ActiveDocument.removeObject(PE.Name)
                                            FreeCAD.ActiveDocument.removeObject(PC.Name)
                                        added_dim.append(FreeCAD.ActiveDocument.getObject(dim.Name))
                                    FreeCAD.ActiveDocument.recompute()
                                    #print 'step#1 norm ', norm, ' plcm ',plcm, ' P1 ',P1
                            elif CPDockWidget.ui.APlane.isEnabled(): ## step #2
                                CPDockWidget.ui.APlane.setEnabled(False)
                                CPDockWidget.ui.DimensionP3.setEnabled(True)
                                #print 'step#2 norm ', norm, ' plcm ',plcm, ' P1 ',P1
                                plcmT=FreeCAD.Placement(FreeCAD.Vector(0,0,0), FreeCAD.Rotation(0,0,0), FreeCAD.Vector(0,0,0))
                                APName=makeAPlane(w,2.,norm,plcmT,P1)
                                added_dim.append(FreeCAD.ActiveDocument.getObject(APName))

                            elif CPDockWidget.ui.DimensionP3.isEnabled(): ## step #3
                                CPDockWidget.ui.DimensionP3.setEnabled(False)
                                CPDockWidget.ui.DimensionP1.setEnabled(True)

                                dim=mDraft.makeDimension(P2,P1,posz)
                                try:
                                    mDraft.autogroup(dim)
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowType = u"Tick"
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).DisplayMode = u"3D"
                                except:
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowType = "Tick"
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).DisplayMode = "3D"
                                    pass
                                #FreeCADGui.ActiveDocument.getObject(dim.Name).FlipArrows = True
                                dst=FreeCAD.ActiveDocument.getObject(dim.Name).Distance
                                FreeCADGui.ActiveDocument.getObject(dim.Name).FontSize = fntsize
                                FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowSize = ticksize
                                FreeCADGui.ActiveDocument.getObject(dim.Name).LineColor = (1.000,0.667,0.000)
                                FreeCADGui.ActiveDocument.getObject(dim.Name).ExtLines = '0 mm'
                                if has_radius == 2:
                                    say("Radius approx: "+str(dim.Distance))
                                    FreeCAD.ActiveDocument.getObject(dim.Name).Label = "Radius approx"
                                    sayw("Center Coordinates  : "+'{0:.3f}'.format(P1[0])+'; {0:.3f}'.format(P1[1])+'; {0:.3f}'.format(P1[2]))
                                elif has_radius == 1:
                                    say("Radius   : "+str(dim.Distance))
                                    FreeCAD.ActiveDocument.getObject(dim.Name).Label = "Radius"
                                    sayw("Center Coordinates  : "+'{0:.3f}'.format(P1[0])+'; {0:.3f}'.format(P1[1])+'; {0:.3f}'.format(P1[2]))
                                else:
                                    say("Distance : "+str(dim.Distance))
                                    FreeCAD.ActiveDocument.getObject(dim.Name).Label = "Distance"
                                    sayw("Delta X  : "+str(abs(pnt[0]-P1[0])))
                                    sayw("Delta Y  : "+str(abs(pnt[1]-P1[1])))
                                    sayw("Delta Z  : "+str(abs(pnt[2]-P1[2])))
                                    FreeCAD.ActiveDocument.removeObject(PC.Name)
                                added_dim.append(FreeCAD.ActiveDocument.getObject(dim.Name))
                                FreeCAD.ActiveDocument.removeObject(PE.Name)
                                FreeCAD.ActiveDocument.removeObject(APName)

                                FreeCAD.ActiveDocument.recompute()
### ---------------------------- end radius ------------------------------------------ ###

                        elif (CPDockWidget.ui.rbLength.isChecked() and not Vtx_sel):  ### Length
                            if CPDockWidget.ui.DimensionP1.isEnabled():# and not CPDockWidget.ui.APlane.isEnabled(): #step #1
                                if 'Edge' in str(sel[0].SubObjects[0]):
                                    CPDockWidget.ui.DimensionP1.setEnabled(False)
                                    CPDockWidget.ui.DimensionP2.setEnabled(False)
                                    P1=FreeCAD.Vector(bbC)
                                    PC=mDraft.makePoint(P1[0],P1[1],P1[2])
                                    PE=mDraft.makePoint(pnt[0],pnt[1],pnt[2])
                                    w=dist(P1, pnt)*5
                                    P2=pnt
                                    if CPDockWidget.ui.cbAPlane.isChecked():
                                        CPDockWidget.ui.APlane.setEnabled(True)
                                    else:
                                        CPDockWidget.ui.DimensionP1.setEnabled(True)
                                    FreeCADGui.ActiveDocument.getObject(PC.Name).PointColor = (1.000,0.667,0.000)
                                    FreeCADGui.ActiveDocument.getObject(PE.Name).PointColor = (1.000,0.667,0.000)
                                    FreeCADGui.ActiveDocument.getObject(PC.Name).PointSize = 10.000
                                    FreeCADGui.ActiveDocument.getObject(PE.Name).PointSize = 10.000
                                    added_dim.append(FreeCAD.ActiveDocument.getObject(PC.Name))
                                    added_dim.append(FreeCAD.ActiveDocument.getObject(PE.Name))

                                    if not CPDockWidget.ui.cbAPlane.isChecked():
                                        halfedge = (pnt.sub(P1)).multiply(.5)
                                        mid=FreeCAD.Vector.add(P1,halfedge)
                                        dim=mDraft.makeDimension(pnt,P1,mid)
                                        try:
                                            mDraft.autogroup(dim)
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowType = u"Tick"
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).DisplayMode = u"3D"
                                        except:
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowType = "Tick"
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).DisplayMode = "3D"
                                            pass
                                        dst=FreeCAD.ActiveDocument.getObject(dim.Name).Distance
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).FontSize = fntsize
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowSize = ticksize
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).LineColor = (1.000,0.667,0.000)
                                        FreeCAD.ActiveDocument.getObject(dim.Name).Label = "Length"
                                        FreeCAD.ActiveDocument.removeObject(PE.Name)
                                        FreeCAD.ActiveDocument.removeObject(PC.Name)
                                        say("Distance : "+str(dim.Distance))
                                        sayw("Delta X  : "+str(abs(pnt[0]-P1[0])))
                                        sayw("Delta Y  : "+str(abs(pnt[1]-P1[1])))
                                        sayw("Delta Z  : "+str(abs(pnt[2]-P1[2])))
                                        added_dim.append(FreeCAD.ActiveDocument.getObject(dim.Name))
                                    FreeCAD.ActiveDocument.recompute()
                            elif CPDockWidget.ui.APlane.isEnabled(): ## step #2
                                CPDockWidget.ui.APlane.setEnabled(False)
                                CPDockWidget.ui.DimensionP3.setEnabled(True)
                                #print 'step#2 norm ', norm, ' plcm ',plcm, ' P1 ',P1
                                plcmT=FreeCAD.Placement(FreeCAD.Vector(0,0,0), FreeCAD.Rotation(0,0,0), FreeCAD.Vector(0,0,0))
                                APName=makeAPlane(w,0.5,norm,plcmT,P1)
                                added_dim.append(FreeCAD.ActiveDocument.getObject(APName))
                            elif CPDockWidget.ui.DimensionP3.isEnabled(): ## step #3
                                CPDockWidget.ui.DimensionP3.setEnabled(False)
                                CPDockWidget.ui.DimensionP1.setEnabled(True)

                                dim=mDraft.makeDimension(P2,P1,posz)
                                try:
                                    mDraft.autogroup(dim)
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowType = u"Tick"
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).DisplayMode = u"3D"
                                except:
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowType = "Tick"
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).DisplayMode = "3D"
                                    pass
                                #FreeCADGui.ActiveDocument.getObject(dim.Name).FlipArrows = True
                                dst=FreeCAD.ActiveDocument.getObject(dim.Name).Distance
                                FreeCADGui.ActiveDocument.getObject(dim.Name).FontSize = fntsize
                                FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowSize = ticksize
                                FreeCADGui.ActiveDocument.getObject(dim.Name).LineColor = (1.000,0.667,0.000)
                                FreeCADGui.ActiveDocument.getObject(dim.Name).ExtLines = '0 mm'
                                FreeCAD.ActiveDocument.getObject(dim.Name).Label = "Length"
                                say("Distance : "+str(dim.Distance))
                                sayw("Delta X  : "+str(abs(pnt[0]-P1[0])))
                                sayw("Delta Y  : "+str(abs(pnt[1]-P1[1])))
                                sayw("Delta Z  : "+str(abs(pnt[2]-P1[2])))
                                added_dim.append(FreeCAD.ActiveDocument.getObject(dim.Name))
                                FreeCAD.ActiveDocument.removeObject(PE.Name)
                                FreeCAD.ActiveDocument.removeObject(PC.Name)
                                FreeCAD.ActiveDocument.removeObject(APName)

                                FreeCAD.ActiveDocument.recompute()
### -------------------------------------- end Length ---------------------------------------------------------- ###

                        elif (CPDockWidget.ui.rbAngle.isChecked() and not Vtx_sel):   ### Angle
                            if ('Edge' in str(sel[0].SubObjects[0]) or 'Face' in str(sel[0].SubObjects[0])):
                                if CPDockWidget.ui.DimensionP1.isEnabled(): #step #1
                                    if 'Face' in str(sel[0].SubObjects[0]):
                                        P1=FreeCAD.Vector(bbC)
                                        midP=P1
                                        PC=mDraft.makePoint(P1[0],P1[1],P1[2])
                                        vec1 = norm
                                        ornt_1 = orient
                                        sel1='face'
                                        va=P1;
                                        vb=FreeCAD.Vector(bbC[0]+norm[0],bbC[1]+norm[1],bbC[2]+norm[2])
                                    else:
                                        P1=FreeCAD.Vector(bbC)
                                        halfedge = (pnt.sub(P1)).multiply(.5)
                                        midP=FreeCAD.Vector.add(P1,halfedge)
                                        PC=mDraft.makePoint(midP[0],midP[1],midP[2])
                                        va=pnt; vb=P1
                                        vec1 = pnt - P1
                                        ornt_1 = orient
                                        sel1='edge'
                                    added_dim.append(FreeCAD.ActiveDocument.getObject(PC.Name))
                                    FreeCADGui.ActiveDocument.getObject(PC.Name).PointSize = 10.000
                                    FreeCADGui.ActiveDocument.getObject(PC.Name).PointColor = (1.000,0.333,0.498)
                                    CPDockWidget.ui.DimensionP1.setEnabled(False)
                                    CPDockWidget.ui.DimensionP2.setEnabled(True)

                                elif CPDockWidget.ui.DimensionP2.isEnabled(): #step #2
                                    CPDockWidget.ui.DimensionP2.setEnabled(False)
                                    slct=sel[0].SubObjects[0]
                                    P2=pnt
                                    P1=FreeCAD.Vector(bbC)
                                    if 'Face' in str(slct):
                                        v4=P1;
                                        v3=FreeCAD.Vector(bbC[0]+norm[0],bbC[1]+norm[1],bbC[2]+norm[2])
                                        mid=FreeCAD.Vector(bbC)
                                        sel2='face'
                                    else:
                                        v3 = P2 #e2.Vertexes[-1].Point
                                        v4 = P1 #e2.Vertexes[0].Point
                                        halfedge = (pnt.sub(P1)).multiply(.5)
                                        mid=FreeCAD.Vector.add(P1,halfedge)
                                        ##Px=Draft.makePoint(mid[0],mid[1],mid[2])
                                        sel2='edge'
                                    halfedge = (mid.sub(midP)).multiply(.5)
                                    mid2=FreeCAD.Vector.add(midP,halfedge)
                                    PE=mDraft.makePoint(mid[0],mid[1],mid[2])
                                    FreeCADGui.ActiveDocument.getObject(PE.Name).PointSize = 10.000
                                    FreeCADGui.ActiveDocument.getObject(PE.Name).PointColor = (1.000,0.333,0.498)
                                    w=dist(P1, P2)*5
                                    vec2 = P2 - P1
                                    v1 = va #e1.Vertexes[-1].Point
                                    v2 = vb #e1.Vertexes[0].Point
                                    ve1 = v1.sub(v2)
                                    # Create the Vector for second edge
                                    ve2 = v3.sub(v4)
                                    if orient==ornt_1:
                                        # print 'adjusting angle'
                                        ve2 = v4.sub(v3)
                                    angle = math.degrees(ve2.getAngle(ve1))
                                    dstP=-1
                                    #print abs(angle)

                                    if (abs(angle)<angle_tolerance or abs(angle-180)<angle_tolerance) and sel1=='face' and sel2=='face':
                                        ## distance between // planes
                                        dstP = abs(point_plane_distance(P1, norm, midP))
                                    if (abs(angle)<angle_tolerance or abs(angle-180)<angle_tolerance) and sel1!='face' and sel2!='face':
                                        ## perpendicular distance between edges
                                        #sayerr('calculating Distance between // edges')
                                        a1=np.array([v1[0],v1[1],v1[2]])
                                        a0=np.array([v2[0],v2[1],v2[2]])
                                        b0=np.array([v3[0],v3[1],v3[2]])
                                        b1=np.array([v4[0],v4[1],v4[2]])
                                        dstP=closestDistanceBetweenLines(a0,a1,b0,b1,clampAll=False)[2]

                                    if CPDockWidget.ui.cbAPlane.isChecked():
                                        CPDockWidget.ui.APlane.setEnabled(True)
                                    else:
                                        CPDockWidget.ui.DimensionP1.setEnabled(True)
                                        FreeCAD.ActiveDocument.removeObject(PC.Name)
                                        FreeCAD.ActiveDocument.removeObject(PE.Name)
                                        if mid!=midP: #non coincident points
                                            dim=mDraft.makeDimension(mid,midP,mid2)
                                        else:
                                            dim=mDraft.makeDimension(pnt,mid,P1)
                                        try:
                                            mDraft.autogroup(dim)
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowType = u"Tick"
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).DisplayMode = u"3D"
                                        except:
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowType = "Tick"
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).DisplayMode = "3D"
                                            pass
                                        dst=FreeCAD.ActiveDocument.getObject(dim.Name).Distance
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).ShowUnit = False
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).FontSize = fntsize
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowSize = ticksize
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).LineColor = (1.000,0.333,0.498)
                                        FreeCAD.ActiveDocument.getObject(dim.Name).Label = 'Angle'
                                        added_dim.append(FreeCAD.ActiveDocument.getObject(dim.Name))
                                        #print dstP, ' ', angle
                                        if dstP != -1:
                                            say("""Distance // vectors(planes) : """+'{0:.3f}'.format(dstP))
                                            dst_str='{0:.2f}'.format(dstP)
                                            if sel1=='face':
                                                FreeCAD.ActiveDocument.getObject(dim.Name).Label = '//Planes Distance'
                                            else:
                                                FreeCAD.ActiveDocument.getObject(dim.Name).Label = '//Edge Distance'
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).Override = '{0:.1f}'.format(angle).rstrip('0').rstrip('.')+'° //d '+dst_str+' mm'
                                        else:
                                            FreeCADGui.ActiveDocument.getObject(dim.Name).Override = '{0:.2f}'.format(angle)+'°'
                                        sayw("Angle : "+'{0:.2f}'.format(angle))
                                        #FreeCADGui.ActiveDocument.getObject(dim.Name).Override = '{0:.2f}'.format(angle)+'°'

                                elif CPDockWidget.ui.APlane.isEnabled(): ## step #3
                                    CPDockWidget.ui.APlane.setEnabled(False)
                                    CPDockWidget.ui.DimensionP3.setEnabled(True)
                                    #print 'step#2 norm ', norm, ' plcm ',plcm, ' P1 ',P1
                                    plcmT=FreeCAD.Placement(FreeCAD.Vector(0,0,0), FreeCAD.Rotation(0,0,0), FreeCAD.Vector(0,0,0))
                                    APName=makeAPlane(w,0.5,norm,plcmT,P1)
                                    added_dim.append(FreeCAD.ActiveDocument.getObject(APName))

                                elif CPDockWidget.ui.DimensionP3.isEnabled(): ## step #4
                                    CPDockWidget.ui.DimensionP3.setEnabled(False)
                                    CPDockWidget.ui.DimensionP1.setEnabled(True)

                                    dim=mDraft.makeDimension(mid,midP,posz)
                                    try:
                                        mDraft.autogroup(dim)
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowType = u"Tick"
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).DisplayMode = u"3D"
                                    except:
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowType = "Tick"
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).DisplayMode = "3D"
                                        pass
                                    dst=FreeCAD.ActiveDocument.getObject(dim.Name).Distance
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).ShowUnit = False
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).FontSize = fntsize
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).ArrowSize = ticksize
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).LineColor = (1.000,0.333,0.498)
                                    FreeCAD.ActiveDocument.getObject(dim.Name).Label = 'Angle'
                                    FreeCADGui.ActiveDocument.getObject(dim.Name).ExtLines = '0 mm'
                                    added_dim.append(FreeCAD.ActiveDocument.getObject(dim.Name))
                                    sayw("Angle : "+'{0:.2f}'.format(angle))
                                    if dstP != -1:
                                        say("Distance // vectors : "+'{0:.3f}'.format(dstP))
                                        dst_str='{0:.2f}'.format(dstP)
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).Override = '{0:}'.format(angle)+'° //d '+dst_str+' mm'
                                    else:
                                        FreeCADGui.ActiveDocument.getObject(dim.Name).Override = '{0:.2f}'.format(angle)+'°'
                                    sayw("Angle : "+'{0:.2f}'.format(angle))
                                    FreeCAD.ActiveDocument.removeObject(PE.Name)
                                    FreeCAD.ActiveDocument.removeObject(PC.Name)
                                    FreeCAD.ActiveDocument.removeObject(APName)

                                FreeCAD.ActiveDocument.recompute()



                    else: #OLD Vertex not allowed in selection
                        pass
        if 0:#except:
            sayerr('restarted')
##

def a_clear_console():
    #clearing previous messages
    mw=FreeCADGui.getMainWindow()
    c=mw.findChild(QtGui.QPlainTextEdit, "Python console")
    c.clear()
    r=mw.findChild(QtGui.QTextEdit, "Report view")
    r.clear()

#if not Mod_ENABLED:
a_clear_console()

from sys import platform as _platform

# window GUI dimensions parameters
wdszX=302 #304
wdszY=228 #226
##Mover size
wdszMX=304;wdszMY=256
# window GUI dimensions parameters
##Aligner size
wdzX=342;wdzY=256
if _platform == "linux" or _platform == "linux2":
   # linux
   pt_lnx=True
   sizeXmin=110;sizeYmin=34+34
   sizeX=wdszX;sizeY=wdszY-22+34 #516 #536
   sizeXright=172;sizeYright=536 #556
else:
    sizeXmin=110;sizeYmin=34
    sizeX=wdszX;sizeY=wdszY-22 #482#502
    sizeXright=172;sizeYright=502#522
if _platform == "darwin":
    pt_osx=True
##   # MAC OS X
##elif _platform == "win32":
##   # Windows
#sizeXmin=172;sizeYmin=30+34
sizeXMax=487 #487
btn_sizeX=32;btn_sizeY=32;
chkb_sizeX=20;chkb_sizeY=20;
btn_sm_sizeX=20;btn_sm_sizeY=20;
btn_md_sizeX=26;btn_md_sizeY=26;

def close_caliper():
    global s1
    sayerr('close called')
    #def closeEvent(self, e):
    try:
        #FreeCADGui.Selection.removeObserver(SelObserverCaliper())
        FreeCADGui.Selection.removeObserver(s1)   # desinstalle la fonction residente SelObserver
        sayerr('observer removed')
        CPDockWidget.deleteLater()
    except:
        sayerr('error on removing observer')
        CPDockWidget.deleteLater()
        pass
    #CPDockWidget.Measure.toggle()
    #if CPDockWidget.Measure.isChecked():
    #    print 'checked'

    # CPDockWidget.close()

    #self.setWindowState(QtCore.Qt.WindowActive)
    doc=FreeCAD.ActiveDocument
    if doc is not None:
        FreeCAD.setActiveDocument(doc.Name)
    #FreeCAD.ActiveDocument=FreeCAD.getDocument(doc.Label)
    #FreeCADGui.ActiveDocument=FreeCADGui.getDocument(doc.Label)

def Cp_undock():
    CPDockWidget.setFloating(True)  #undock
    CPDockWidget.resize(sizeX,sizeY)
    CPDockWidget.activateWindow()
    CPDockWidget.raise_()
    #AlgWidget.resize(QtCore.QSize(300,100).expandedTo(AlgWidget.maximumSize())) # sets size of the widget
    #AlgWidget.setFloating(False)  #dock
    #say ("now!")

def Cp_minimz():
    #clear_console()
    CPDockWidget.setFloating(True)  #undock
    # AlgWidget.hide();
    # AlgWidget.setWindowState(QtCore.Qt.WindowMinimized)
    #AlgWidget.resize(500, 500)
    CPDockWidget.resize(sizeXmin,sizeYmin)
    CPDockWidget.activateWindow()
    CPDockWidget.raise_()
##

def sub(first, second):
	"sub(Vector,Vector) - subtracts second vector from first one"
	if isinstance(first,FreeCAD.Vector) and isinstance(second,FreeCAD.Vector):
		return FreeCAD.Vector(first.x-second.x, first.y-second.y, first.z-second.z)
def length(first):
	"length(Vector) - gives vector length"
	if isinstance(first,FreeCAD.Vector):
		return math.sqrt(first.x*first.x + first.y*first.y + first.z*first.z)
def dist(first, second):
	"dist(Vector,Vector) - returns the distance between both points/vectors"
	if isinstance(first,FreeCAD.Vector) and isinstance(second,FreeCAD.Vector):
		return length(sub(first,second))
##

def recurse_node(obj,plcm,scl):
    #sayerr(obj.Name)
    if "App::Part" in obj.TypeId or "Body" in obj.TypeId or "Compound" in obj.TypeId or 'App::LinkGroup' in obj.TypeId:
        for o in obj.OutList: #for o in obj.Group:
            #sayerr(o.Name)
            if "App::Part" in o.TypeId  or "Body" in o.TypeId or "Compound" in o.TypeId or 'App::LinkGroup' in obj.TypeId:
                #sayerr(o.Name)#+" * "+obj.Name)
                stop
                new_plcm=get_node_plc(o,obj)
                recurse_node(o,new_plcm,scl)
            else:
                if "Sketcher" not in o.TypeId:
                    simple_cpy_plc(o,plcm)
                    scl.append(FreeCAD.ActiveDocument.ActiveObject)
##

def get_top_level (obj):
    lvl=10000
    top=None
    if hasattr(obj,'InListRecursive'):
        for ap in obj.InListRecursive:
            if hasattr(ap,'Placement'):
                if len(ap.InListRecursive) < lvl:
                    top = ap
                    lvl = len(ap.InListRecursive)
    #print (top);stop
    return top
##

def get_sorted_list (obj):
    lvl=10000
    completed=0
    listUs=obj.InListRecursive
    #sayerr('unsorted')
    #for p in listUs:
    #    print p.Label
    listUsName=[]
    for o in obj.InListRecursive:
        listUsName.append(o.Name)
    listS=[]
    i=0
    #for i, ap in enumerate(listUs):
    #    top=ap
    #    if len(ap.InListRecursive) < lvl:
    #        lvl = len(ap.InListRecursive)
    #    for ap2 in listUs[(i + 1):]:
    #        if len(ap2.InListRecursive) < lvl:
    #            top = ap2
    #            lvl = len(ap2.InListRecursive)
    #    listS.append(top)
    #sayw(listUsName)
    i=0
    while len (listUsName) > 0:
        for apName in listUsName:
            #apName=listUsName[i]
            ap=FreeCAD.ActiveDocument.getObject(apName)
            if len(ap.InListRecursive) < lvl:
                lvl = len(ap.InListRecursive)
                top = ap
                topName = ap.Name
        listS.append(top)
        #print topName
        idx=listUsName.index(topName)
        #sayw(idx)
        listUsName.pop(idx)
        lvl=10000
        #sayerr(listUsName)

    return listS
##

def get_placement_hierarchy (sel0):
    """get normal at face and placement relative to hierarchy
       of first selection object/face
       return normal, placement, topObj, bbox center, Pnt absolute"""

    global use_hierarchy, posz, tobiarc_tol

    remove_all_selection()

    Obj=sel0.Object
    subObj=sel0.SubObjects[0]
    edge_op=0
    pad=0
    pV1= FreeCAD.Vector(0.0, 0.0, 0.0)
    pV2= FreeCAD.Vector(0.0, 0.0, 0.0)
    Pnt= FreeCAD.Vector(0.0, 0.0, 0.0)
    orient = None; nwnorm = None; Vtx=False

    top_level_obj = get_top_level(Obj)
    if top_level_obj is not None: #hierarchy object
        face=subObj
        if 'Face' in str(subObj):
            #say('Hierarchy obj Face')
            face=sel0.SubObjects[0]
        #say('Hierarchy obj')
        if 'Face' in str(subObj):
            #say('Hierarchy obj Face')
            pad=0 #face
        elif 'Edge' in str(subObj):
            #pV1=subObj.Vertex1.Point
            orient=subObj.Orientation
            wire = Part.Wire(subObj)
            if subObj.isClosed():
                subObj = Part.Face(wire)
                face=subObj
                circ=subObj.copy()
            else:
                #pV2=subObj.Vertex2.Point
                subObj = wire
                face=subObj
                #print subObj.Vertex2.Point
                edge_op=1
            pad=1 #edge
        elif 'Vertex' in str(subObj):
            #sayerr('vertex')
            Vtx=True
            Pt=subObj.Point
            #point = subObj.Point
            #P=subObj.Point
            nP=mDraft.makePoint(Pt)
            #wire = Part.Wire(nP)
            subObj = nP.Shape
            FreeCAD.ActiveDocument.removeObject(nP.Name)
        if CPDockWidget.ui.rbBbox.isChecked() or CPDockWidget.ui.rbMass.isChecked():
            subObj=Obj.Shape #forcing object to evaluate center of BBox
        if 1: #use_hierarchy:
            nwshp = subObj.copy()
            pOriginal=subObj.Placement
            p0 =  FreeCAD.Placement (FreeCAD.Vector(0,0,0), FreeCAD.Rotation(0,0,0), FreeCAD.Vector(0,0,0))
            nwshp.Placement=p0
            r=[]
            t=nwshp.copy()
            #resetting Placement
            for i in t.childShapes():
                c=i.copy()
                c.Placement=t.Placement.multiply(c.Placement)
                r.append((i,c))
            acpy=t.replaceShape(r)
            acpy.Placement=FreeCAD.Placement()
            if hasattr(Obj,'InListRecursive'):
                lrl=len(Obj.InListRecursive)
                #for o_ in Obj.InListRecursive:
                #    say(o_.Name)
                if len(Obj.InList):
                    top_level_obj = get_top_level(Obj)
                    #sayerr(top_level_obj.Label)
                    listSorted=get_sorted_list (Obj)
                    #for p in listSorted:
                    #    print p.Name
                    #print listSorted, ' Sorted; Top ', top_level_obj[j]
                    #stop
                    for i in range (0,lrl):
                        if hasattr(listSorted[i],'Placement'):
                            #if 'Plane' not in ob.InListRecursive[i].TypeId:
                            #print(listSorted[i].TypeId)
                            if listSorted[i].hasExtension("App::GeoFeatureGroupExtension") or listSorted[i].TypeId == 'App::LinkGroup':
                                acpy.Placement=acpy.Placement.multiply(listSorted[i].Placement)
            #say(acpy.Placement)
            #acpy.Placement=acpy.Placement.multiply(pOriginal)
            #acpy.Placement=acpy.Placement.multiply(pOriginal)
            if pad == 0: #note making wire from edge already resets the original placement
                acpy.Placement=acpy.Placement.multiply(pOriginal)
            nwshp.Placement = acpy.Placement
            if edge_op==1:
                #nwnorm = (subObj.Vertex2.Point - subObj.Vertex1.Point).normalize()
                #pV1=nwshp.Vertex1.Point; pV2=nwshp.Vertex2.Point
                pV1=nwshp.Vertexes[0].Point; pV2=nwshp.Vertexes[1].Point

                ss=subObj.copy()#SubObjects[0] is the edge list
                pointsDirection  = []
                pointsDirection = ss.discretize(Number=5) # discretize the path line
                nwnorm=pointsDirection[0].sub(pointsDirection[1])
            #print edge_op
            if pad==0 and not Vtx:
                face.Placement=nwshp.Placement
                nwnorm = face.normalAt(0,0)
            #else:
            #    pV1=findMidpoint(nwshp)
            #    nwnorm = nwshp.normalAt(0,0)
            if CPDockWidget.ui.rbBbox.isChecked():
                bbxCenter = nwshp.BoundBox.Center
            else:
            #    if hasattr(nwshp,'CenterOfMass'):
            #        bbxCenter = nwshp.CenterOfMass
            #    else:
            #        bbxCenter = nwshp.BoundBox.Center
                try:
                    if hasattr(nwshp,'Solids'):
                        if hasattr(nwshp.Solids[0],'CenterOfMass'):
                            bbxCenter = nwshp.Solids[0].CenterOfMass
                            #print 'Mass 1'
                    else:
                        bbxCenter = nwshp.BoundBox.Center
                except:
                    bbxCenter = nwshp.BoundBox.Center
        # else:
        #     nwshp = subObj.copy()
        #     if edge_op==1:
        #         #nwnorm = (subObj.Vertex2.Point - subObj.Vertex1.Point).normalize()
        #         pV1=nwshp.Vertex1.Point; pV2=nwshp.Vertex2.Point
        #     #else:
        #     #    nwnorm = nwshp.normalAt(0,0)
        #     bbxCenter = nwshp.BoundBox.Center
        if CPDockWidget.ui.rbSnap.isChecked():
            pCkd=FreeCAD.Vector(posz)
            #print 'points ',pV1, pV2, pCkd
            if edge_op==1:
                if 'Vertex' not in str(subObj):
                    d1=dist(pV1,pCkd);d2=dist(pV2,pCkd)
                    halfedge = (pV1.sub(pV2)).multiply(.5)
                    mid=FreeCAD.Vector.add(pV2,halfedge)
                    #mDraft.makePoint(mid[0],mid[1],mid[2]) #  creating a point takes selection
                    #sayw(mid)
                    d3=dist(pCkd,mid)
                    d=min(d1,d2,d3)
                    #sayerr('d1 '+str(d1)+' d2 '+str(d2)+' d3 '+str(d3)+' d '+str(d))
                    if d==d1:
                        Pnt=pV1
                    elif d==d2:
                        Pnt=pV2
                    else:
                        Pnt=mid
                else:
                    #Pnt=nwshp.Vertex1.Point
                    Pnt=nwshp.Vertexes[0].Point
            else: #edge_op=0
                Pnt=FreeCAD.Vector(bbxCenter)
            return nwshp.Placement, top_level_obj, bbxCenter, Pnt, orient, nwnorm
        elif (CPDockWidget.ui.rbSnap.isChecked() or CPDockWidget.ui.rbBbox.isChecked() or CPDockWidget.ui.rbMass.isChecked())\
                             and (edge_op==0 or pad==0):
            Pnt=FreeCAD.Vector(bbxCenter)
            return nwshp.Placement, top_level_obj, bbxCenter, Pnt, orient, nwnorm
        elif CPDockWidget.ui.rbRadius.isChecked():
            #bbxCenter=DraftGeomUtils.findMidpoint(circ)
            #bbxCenter=subObj.BoundBox.Center
            if edge_op==1:
                curve_type = type(nwshp.Edges[0].Curve)
                if curve_type == Part.Circle or curve_type == Part.ArcOfCircle:
                    circ=nwshp.Edges[0].Curve
                    bbxCenter=circ.Center
                elif 'BSpline' in str(curve_type):
                    arcs=nwshp.Edges[0].Curve.toBiArcs(tobiarc_tol)
                    sayerr('BSpline approximated to Arc')
                    #print (arcs[0].Radius)
                    #circ=arcs[0].Curve
                    bbxCenter=arcs[0].Center
                    rads = []
                    for a in arcs:
                        rads.append(a.Radius)
                    r0 = rads[0]; delta_tol = False
                    for r in rads:
                        if abs(r0 - r) > tobiarc_tol:
                            delta_tol = True
                    if delta_tol:
                        sayerr("more than an Arc in Bspline approximation!")
                        sayerr("only the first is dimensioned!")
                        for a in arcs:
                            say('Radius: '+str(a.Radius))
                    #print (arcs[0].Center)
                    #arcs[1].Radius
                else:
                    #bbxCenter=nwshp.BoundBox.Center
                    #bbxCenter=(nwshp.Vertex2.Point[0],nwshp.Vertex2.Point[1],nwshp.Vertex2.Point[2])
                    bbxCenter=(nwshp.Vertexes[1].Point[0],nwshp.Vertexes[1].Point[1],nwshp.Vertexes[1].Point[2])
            else:
                if CPDockWidget.ui.rbBbox.isChecked():
                    bbxCenter = nwshp.BoundBox.Center
                else:
                    try:
                        if hasattr(nwshp,'Solids'):
                            if hasattr(nwshp.Solids[0],'CenterOfMass'):
                                bbxCenter = nwshp.Solids[0].CenterOfMass
                                #print 'Mass 1'
                        else:
                            bbxCenter = nwshp.BoundBox.Center
                    except:
                        bbxCenter = nwshp.BoundBox.Center
                    #if hasattr(nwshp,'CenterOfMass'):
                    #    bbxCenter = nwshp.CenterOfMass
                    #else:
                    #    bbxCenter = nwshp.BoundBox.Center
            if pad==1:
                #Pnt=nwshp.Vertex1.Point
                Pnt=nwshp.Vertexes[0].Point
            else:
                Pnt=FreeCAD.Vector(bbxCenter)
            return Obj.Placement, top_level_obj, bbxCenter, Pnt, orient, nwnorm
            #sayerr(bbxCenter)
            #sayw(Pnt)
        elif CPDockWidget.ui.rbLength.isChecked():
            #bbxCenter=DraftGeomUtils.findMidpoint(circ)
            #bbxCenter=subObj.BoundBox.Center
            if edge_op==1:
                #Pnt=nwshp.Vertex1.Point
                Pnt=nwshp.Vertexes[0].Point
                bbxCenter=(nwshp.Vertexes[1].Point[0],nwshp.Vertexes[1].Point[1],nwshp.Vertexes[1].Point[2])
            else:
                #Pnt=nwshp.Vertex1.Point
                Pnt=nwshp.Vertexes[0].Point
                if CPDockWidget.ui.rbBbox.isChecked():
                    bbxCenter = nwshp.BoundBox.Center
                else:
                    try:
                        if hasattr(nwshp,'Solids'):
                            if hasattr(nwshp.Solids[0],'CenterOfMass'):
                                bbxCenter = nwshp.Solids[0].CenterOfMass
                                #print 'Mass 1'
                        else:
                            bbxCenter = nwshp.BoundBox.Center
                    except:
                        bbxCenter = nwshp.BoundBox.Center
                    #if hasattr(nwshp,'CenterOfMass'):
                    #    bbxCenter = nwshp.CenterOfMass
                    #else:
                    #    bbxCenter = nwshp.BoundBox.Center
            return Obj.Placement, top_level_obj, bbxCenter, Pnt, orient, nwnorm
        elif CPDockWidget.ui.rbAngle.isChecked():
            #bbxCenter=DraftGeomUtils.findMidpoint(circ)
            #bbxCenter=subObj.BoundBox.Center
            if edge_op==1:
                #Pnt=nwshp.Vertex1.Point
                Pnt=nwshp.Vertexes[0].Point
                #bbxCenter=(nwshp.Vertex2.Point[0],nwshp.Vertex2.Point[1],nwshp.Vertex2.Point[2])
                bbxCenter=(nwshp.Vertexes[1].Point[0],nwshp.Vertexes[1].Point[1],nwshp.Vertexes[1].Point[2])
            else:
                #Pnt=nwshp.Vertex1.Point
                Pnt=nwshp.Vertexes[0].Point
                if CPDockWidget.ui.rbBbox.isChecked():
                    bbxCenter = nwshp.BoundBox.Center
                else:
                    try:
                        if hasattr(nwshp,'Solids'):
                            if hasattr(nwshp.Solids[0],'CenterOfMass'):
                                bbxCenter = nwshp.Solids[0].CenterOfMass
                                #print 'Mass 1'
                        else:
                            bbxCenter = nwshp.BoundBox.Center
                    except:
                        bbxCenter = nwshp.BoundBox.Center
                    #if hasattr(nwshp,'CenterOfMass'):
                    #    bbxCenter = nwshp.CenterOfMass
                    #else:
                    #    bbxCenter = nwshp.BoundBox.Center
            return Obj.Placement, top_level_obj, bbxCenter, Pnt, orient, nwnorm


    elif 'Face' in str(subObj) or 'Edge' in str(subObj) or 'Vertex' in str(subObj): # not in hierarchy
        #say('Part obj')
        pad=0 #face
        face=subObj
        plcm=subObj.Placement
        #sayerr(plcm)
        if 'Edge' in str(subObj):
            wire = Part.Wire(subObj)
            orient=subObj.Orientation
            if subObj.isClosed():
                circ=subObj.copy()
                subObj = Part.Face(wire)
                face=subObj
                nwnorm = face.normalAt(0,0)
                plcm=subObj.Placement
                #norm = subObj.normalAt(0,0)
            else:
                edge_op=1
                ss=subObj.copy()#SubObjects[0] is the edge list
                pointsDirection  = []
                pointsDirection = ss.discretize(Number=5) # discretize the path line
                nwnorm=pointsDirection[0].sub(pointsDirection[1])
                #norm = (subObj.Vertex2.Point - subObj.Vertex1.Point).normalize()
                #pV1=subObj.Vertex1.Point; pV2=subObj.Vertex2.Point
                if len(subObj.Vertexes)>=2:
                    pV1=subObj.Vertexes[0].Point; pV2=subObj.Vertexes[1].Point
                else:
                    pV1=subObj.Vertexes[0].Point; pV2=subObj.Vertexes[0].Point
            pad=1 #edge
        if CPDockWidget.ui.rbBbox.isChecked() or CPDockWidget.ui.rbMass.isChecked():
            subObj=Obj.Shape #forcing object to evaluate center of BBox
            #print 'BBox or Mass'
        #else:
        #    norm = subObj.normalAt(0,0)
        if pad==0 and 'Vertex' not in str(subObj):
            try:
                nwnorm = face.normalAt(0,0)
            except:
                nwnorm = subObj.normalAt(0,0)
                #nwnorm = face.normalAt(0,0)
        if CPDockWidget.ui.rbBbox.isChecked():
            bbxCenter = subObj.BoundBox.Center
            #print 'BBox 1'
        else:
            try:
                if hasattr(subObj,'Solids'):
                    if hasattr(subObj.Solids[0],'CenterOfMass'):
                        bbxCenter = subObj.Solids[0].CenterOfMass
                        #print 'Mass 1'
                else:
                    bbxCenter = subObj.BoundBox.Center
            except:
                bbxCenter = subObj.BoundBox.Center
                #print 'BBox 2'
        top_level_obj=None
        #sayerr(str(norm)+str(Obj.Placement)+str(bbxCenter)+str(top_level_obj))
        pCkd=FreeCAD.Vector(posz)
        #print 'points ',pV1, pV2, pCkd
        if CPDockWidget.ui.rbSnap.isChecked():
            #sayw('points '+str(pV1)+str(pV2)+str(pCkd))
            if edge_op==1:
                if 'Vertex' not in str(subObj):
                    d1=dist(pV1,pCkd);d2=dist(pV2,pCkd)
                    halfedge = (pV1.sub(pV2)).multiply(.5)
                    mid=FreeCAD.Vector.add(pV2,halfedge)
                    #Draft.makePoint(mid[0],mid[1],mid[2]) #  creating a point takes selection
                    #sayw(mid)
                    d3=dist(pCkd,mid)
                    #sayerr('d1 '+str(d1)+' d2 '+str(d2)+' d3 '+str(d3))
                    d=min(d1,d2,d3)
                    if d==d1:
                        Pnt=pV1
                    elif d==d2:
                        Pnt=pV2
                    else:
                        Pnt=mid
                else:
                    #Pnt=subObj.Vertex1.Point
                    Pnt=subObj.Vertexes[0].Point
            else: #edge_op=0
                Pnt=FreeCAD.Vector(bbxCenter)
            #sayw(Pnt)
        elif (CPDockWidget.ui.rbSnap.isChecked() or CPDockWidget.ui.rbBbox.isChecked() or CPDockWidget.ui.rbMass.isChecked())\
                and (edge_op==0 or pad==0):
            Pnt=FreeCAD.Vector(bbxCenter)
        elif CPDockWidget.ui.rbRadius.isChecked():
            #bbxCenter=DraftGeomUtils.findMidpoint(circ)
            #bbxCenter=subObj.BoundBox.Center
            # print edge_op, '-', type(subObj.Curve)
            if edge_op==1:
                curve_type = type(subObj.Curve)
                #print (str(curve_type))
                if curve_type == Part.Circle or curve_type == Part.ArcOfCircle:
                    circ=subObj.Curve
                    bbxCenter=circ.Center
                elif 'BSpline' in str(curve_type):
                    #print (curve_type)
                    arcs=subObj.Curve.toBiArcs(tobiarc_tol)
                    sayerr('BSpline approximated to Arc')
                    #print (arcs[0].Radius)
                    #circ=arcs[0].Curve
                    bbxCenter=arcs[0].Center
                    rads = []
                    for a in arcs:
                        rads.append(a.Radius)
                    r0 = rads[0]; delta_tol = False
                    for r in rads:
                        if abs(r0 - r) > tobiarc_tol:
                            delta_tol = True
                    if delta_tol:
                        sayerr("more than an Arc in Bspline approximation!")
                        sayerr("only the first is dimensioned!")
                        for a in arcs:
                            say('Radius: '+str(a.Radius))
                    #print (arcs[0].Center)
                    #arcs[1].Radius
                else:
                    #bbxCenter=subObj.BoundBox.Center
                    #bbxCenter=(subObj.Vertex2.Point[0],subObj.Vertex2.Point[1],subObj.Vertex2.Point[2])
                    bbxCenter=(subObj.Vertexes[1].Point[0],subObj.Vertexes[1].Point[1],subObj.Vertexes[1].Point[2])
            else:
                if CPDockWidget.ui.rbBbox.isChecked():
                    bbxCenter = subObj.BoundBox.Center
                    #print 'BBox 3'
                try:
                    if hasattr(subObj,'Solids'):
                        if hasattr(subObj.Solids[0],'CenterOfMass'):
                            bbxCenter = subObj.Solids[0].CenterOfMass
                            #print 'Mass 1'
                    else:
                        bbxCenter = subObj.BoundBox.Center
                except:
                    bbxCenter = subObj.BoundBox.Center
            if pad==1:
                #Pnt=wire.Vertex1.Point
                Pnt=wire.Vertexes[0].Point
            else:
                Pnt=FreeCAD.Vector(bbxCenter)
            #sayerr(bbxCenter)
            #sayw(Pnt)
        elif CPDockWidget.ui.rbLength.isChecked():
            #bbxCenter=DraftGeomUtils.findMidpoint(circ)
            #bbxCenter=subObj.BoundBox.Center
            if edge_op==1:
                #Pnt=subObj.Vertex1.Point
                Pnt=subObj.Vertexes[0].Point
                #bbxCenter=(subObj.Vertex2.Point[0],subObj.Vertex2.Point[1],subObj.Vertex2.Point[2])
                bbxCenter=(subObj.Vertexes[1].Point[0],subObj.Vertexes[1].Point[1],subObj.Vertexes[1].Point[2])
            else:
                #Pnt=subObj.Vertex1.Point
                Pnt=subObj.Vertexes[0].Point
                if CPDockWidget.ui.rbBbox.isChecked():
                    bbxCenter = subObj.BoundBox.Center
                else:
                    if hasattr(subObj,'CenterOfMass'):
                        bbxCenter = subObj.CenterOfMass
                    else:
                        bbxCenter = subObj.BoundBox.Center
        elif CPDockWidget.ui.rbAngle.isChecked():
            if edge_op==1:
                #Pnt=subObj.Vertex1.Point
                Pnt=subObj.Vertexes[0].Point
                #bbxCenter=(subObj.Vertex2.Point[0],subObj.Vertex2.Point[1],subObj.Vertex2.Point[2])
                bbxCenter=(subObj.Vertexes[1].Point[0],subObj.Vertexes[1].Point[1],subObj.Vertexes[1].Point[2])
            else:
                #Pnt=subObj.Vertex1.Point
                Pnt=subObj.Vertexes[0].Point
                if CPDockWidget.ui.rbBbox.isChecked():
                    bbxCenter = subObj.BoundBox.Center
                else:
                    if hasattr(subObj,'CenterOfMass'):
                        bbxCenter = subObj.CenterOfMass
                    else:
                        bbxCenter = subObj.BoundBox.Center
        return plcm, top_level_obj, bbxCenter, Pnt, orient, nwnorm

##

####################################
# embedded button images
import base64
# "b64_data" is a variable containing your base64 encoded jpeg

closeW_b64=\
"""
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhLS0gQ3JlYXRlZCB3aXRoIElua3NjYXBlIChodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy8pIC0tPgoKPHN2ZwogICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgIHhtbG5zOmNjPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyMiCiAgIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyIKICAgeG1sbnM6c3ZnPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIKICAgeG1sbnM6c29kaXBvZGk9Imh0dHA6Ly9zb2RpcG9kaS5zb3VyY2Vmb3JnZS5uZXQvRFREL3NvZGlwb2RpLTAuZHRkIgogICB4bWxuczppbmtzY2FwZT0iaHR0cDovL3d3dy5pbmtzY2FwZS5vcmcvbmFtZXNwYWNlcy9pbmtzY2FwZSIKICAgd2lkdGg9IjY0IgogICBoZWlnaHQ9IjY0IgogICBpZD0ic3ZnMiIKICAgdmVyc2lvbj0iMS4xIgogICBpbmtzY2FwZTp2ZXJzaW9uPSIwLjQ4LjUgcjEwMDQwIgogICBzb2RpcG9kaTpkb2NuYW1lPSJlZGl0X0NhbmNlbC5zdmciCiAgIHZpZXdCb3g9IjAgMCA2NCA2NCI+CiAgPGRlZnMKICAgICBpZD0iZGVmczQiPgogICAgPGxpbmVhckdyYWRpZW50CiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQzODc5IgogICAgICAgaW5rc2NhcGU6Y29sbGVjdD0iYWx3YXlzIj4KICAgICAgPHN0b3AKICAgICAgICAgaWQ9InN0b3AzODgxIgogICAgICAgICBvZmZzZXQ9IjAiCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiNhNDAwMDA7c3RvcC1vcGFjaXR5OjEiIC8+CiAgICAgIDxzdG9wCiAgICAgICAgIGlkPSJzdG9wMzg4MyIKICAgICAgICAgb2Zmc2V0PSIxIgogICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojZWYyOTI5O3N0b3Atb3BhY2l0eToxIiAvPgogICAgPC9saW5lYXJHcmFkaWVudD4KICAgIDxsaW5lYXJHcmFkaWVudAogICAgICAgaW5rc2NhcGU6Y29sbGVjdD0iYWx3YXlzIgogICAgICAgaWQ9ImxpbmVhckdyYWRpZW50Mzg2OSI+CiAgICAgIDxzdG9wCiAgICAgICAgIHN0eWxlPSJzdG9wLWNvbG9yOiNhNDAwMDA7c3RvcC1vcGFjaXR5OjEiCiAgICAgICAgIG9mZnNldD0iMCIKICAgICAgICAgaWQ9InN0b3AzODcxIiAvPgogICAgICA8c3RvcAogICAgICAgICBzdHlsZT0ic3RvcC1jb2xvcjojZWYyOTI5O3N0b3Atb3BhY2l0eToxIgogICAgICAgICBvZmZzZXQ9IjEiCiAgICAgICAgIGlkPSJzdG9wMzg3MyIgLz4KICAgIDwvbGluZWFyR3JhZGllbnQ+CiAgICA8bGluZWFyR3JhZGllbnQKICAgICAgIGlua3NjYXBlOmNvbGxlY3Q9ImFsd2F5cyIKICAgICAgIHhsaW5rOmhyZWY9IiNsaW5lYXJHcmFkaWVudDM4NjkiCiAgICAgICBpZD0ibGluZWFyR3JhZGllbnQzODc1IgogICAgICAgeDE9Ii00NSIKICAgICAgIHkxPSIxMDQ0LjM2MjIiCiAgICAgICB4Mj0iLTU1IgogICAgICAgeTI9Ijk5NC4zNjIxOCIKICAgICAgIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIgogICAgICAgZ3JhZGllbnRUcmFuc2Zvcm09Im1hdHJpeCgwLjg2NjQ3NzI3LDAsMCwwLjg2NjQ3NzM5LDczLjY1MzQwOSwxMzYuMzAzOTEpIiAvPgogICAgPGxpbmVhckdyYWRpZW50CiAgICAgICBpbmtzY2FwZTpjb2xsZWN0PSJhbHdheXMiCiAgICAgICB4bGluazpocmVmPSIjbGluZWFyR3JhZGllbnQzODc5IgogICAgICAgaWQ9ImxpbmVhckdyYWRpZW50Mzg3NyIKICAgICAgIHgxPSItNDUiCiAgICAgICB5MT0iMTA0NC4zNjIyIgogICAgICAgeDI9Ii01NSIKICAgICAgIHkyPSI5OTQuMzYyMTgiCiAgICAgICBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIKICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPSJtYXRyaXgoMC44NjY0NzcyNywwLDAsMC44NjY0NzczOSw3My42NTM0MDksMTM2LjMwMzkxKSIgLz4KICA8L2RlZnM+CiAgPHNvZGlwb2RpOm5hbWVkdmlldwogICAgIGlkPSJiYXNlIgogICAgIHBhZ2Vjb2xvcj0iI2ZmZmZmZiIKICAgICBib3JkZXJjb2xvcj0iIzY2NjY2NiIKICAgICBib3JkZXJvcGFjaXR5PSIxLjAiCiAgICAgaW5rc2NhcGU6cGFnZW9wYWNpdHk9IjAuMCIKICAgICBpbmtzY2FwZTpwYWdlc2hhZG93PSIyIgogICAgIGlua3NjYXBlOnpvb209IjYuNTU3NzM4IgogICAgIGlua3NjYXBlOmN4PSI1MC4yNzE5NTgiCiAgICAgaW5rc2NhcGU6Y3k9IjMyLjkwMDkyNCIKICAgICBpbmtzY2FwZTpkb2N1bWVudC11bml0cz0icHgiCiAgICAgaW5rc2NhcGU6Y3VycmVudC1sYXllcj0ibGF5ZXIxIgogICAgIHNob3dncmlkPSJ0cnVlIgogICAgIGlua3NjYXBlOndpbmRvdy13aWR0aD0iMTU5OCIKICAgICBpbmtzY2FwZTp3aW5kb3ctaGVpZ2h0PSI4MzYiCiAgICAgaW5rc2NhcGU6d2luZG93LXg9IjAiCiAgICAgaW5rc2NhcGU6d2luZG93LXk9IjI3IgogICAgIGlua3NjYXBlOndpbmRvdy1tYXhpbWl6ZWQ9IjAiCiAgICAgaW5rc2NhcGU6c25hcC1nbG9iYWw9InRydWUiCiAgICAgaW5rc2NhcGU6c25hcC1iYm94PSJ0cnVlIgogICAgIGlua3NjYXBlOnNuYXAtbm9kZXM9InRydWUiPgogICAgPGlua3NjYXBlOmdyaWQKICAgICAgIHR5cGU9Inh5Z3JpZCIKICAgICAgIGlkPSJncmlkMTE1MjEiCiAgICAgICBlbXBzcGFjaW5nPSIyIgogICAgICAgZG90dGVkPSJmYWxzZSIKICAgICAgIHZpc2libGU9InRydWUiCiAgICAgICBlbmFibGVkPSJ0cnVlIgogICAgICAgc25hcHZpc2libGVncmlkbGluZXNvbmx5PSJ0cnVlIiAvPgogIDwvc29kaXBvZGk6bmFtZWR2aWV3PgogIDxtZXRhZGF0YQogICAgIGlkPSJtZXRhZGF0YTciPgogICAgPHJkZjpSREY+CiAgICAgIDxjYzpXb3JrCiAgICAgICAgIHJkZjphYm91dD0iIj4KICAgICAgICA8ZGM6Zm9ybWF0PmltYWdlL3N2Zyt4bWw8L2RjOmZvcm1hdD4KICAgICAgICA8ZGM6dHlwZQogICAgICAgICAgIHJkZjpyZXNvdXJjZT0iaHR0cDovL3B1cmwub3JnL2RjL2RjbWl0eXBlL1N0aWxsSW1hZ2UiIC8+CiAgICAgICAgPGRjOnRpdGxlPjwvZGM6dGl0bGU+CiAgICAgIDwvY2M6V29yaz4KICAgIDwvcmRmOlJERj4KICA8L21ldGFkYXRhPgogIDxnCiAgICAgaW5rc2NhcGU6bGFiZWw9IkxheWVyIDEiCiAgICAgaW5rc2NhcGU6Z3JvdXBtb2RlPSJsYXllciIKICAgICBpZD0ibGF5ZXIxIgogICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKDAsLTk4OC4zNjIxOCkiPgogICAgPHBhdGgKICAgICAgIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOiMyODAwMDA7c3Ryb2tlLXdpZHRoOjE2O3N0cm9rZS1saW5lY2FwOnNxdWFyZTtzdHJva2UtbGluZWpvaW46bWl0ZXI7c3Ryb2tlLW9wYWNpdHk6MSIKICAgICAgIGQ9Im0gMTMsMTAwMS4zNjIyIDM4LjEyNSwzOC4xMjUiCiAgICAgICBpZD0icGF0aDMwMDIiCiAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgc29kaXBvZGk6bm9kZXR5cGVzPSJjYyIgLz4KICAgIDxwYXRoCiAgICAgICBzdHlsZT0iZmlsbDpub25lO3N0cm9rZTojMjgwMDAwO3N0cm9rZS13aWR0aDoxNjtzdHJva2UtbGluZWNhcDpzcXVhcmU7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1vcGFjaXR5OjEiCiAgICAgICBkPSJNIDUxLjEyNSwxMDAxLjM2MjIgMTMsMTAzOS40ODcyIgogICAgICAgaWQ9InBhdGgzMDAyLTYiCiAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgc29kaXBvZGk6bm9kZXR5cGVzPSJjYyIgLz4KICAgIDxwYXRoCiAgICAgICBzdHlsZT0iZmlsbDpub25lO3N0cm9rZTojZWYyOTI5O3N0cm9rZS13aWR0aDoxMjtzdHJva2UtbGluZWNhcDpzcXVhcmU7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1taXRlcmxpbWl0OjQ7c3Ryb2tlLW9wYWNpdHk6MTtzdHJva2UtZGFzaGFycmF5Om5vbmUiCiAgICAgICBkPSJtIDEzLDEwMDEuMzYyMiAzOC4xMjUsMzguMTI1IgogICAgICAgaWQ9InBhdGgzMDAyLTciCiAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgc29kaXBvZGk6bm9kZXR5cGVzPSJjYyIgLz4KICAgIDxwYXRoCiAgICAgICBzdHlsZT0iZmlsbDpub25lO3N0cm9rZTojZWYyOTI5O3N0cm9rZS13aWR0aDoxMjtzdHJva2UtbGluZWNhcDpzcXVhcmU7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1taXRlcmxpbWl0OjQ7c3Ryb2tlLW9wYWNpdHk6MTtzdHJva2UtZGFzaGFycmF5Om5vbmUiCiAgICAgICBkPSJNIDUxLjEyNSwxMDAxLjM2MjIgMTMsMTAzOS40ODcyIgogICAgICAgaWQ9InBhdGgzMDAyLTYtNSIKICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICBzb2RpcG9kaTpub2RldHlwZXM9ImNjIiAvPgogICAgPHBhdGgKICAgICAgIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOnVybCgjbGluZWFyR3JhZGllbnQzODc3KTtzdHJva2Utd2lkdGg6ODtzdHJva2UtbGluZWNhcDpzcXVhcmU7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1taXRlcmxpbWl0OjQ7c3Ryb2tlLW9wYWNpdHk6MTtzdHJva2UtZGFzaGFycmF5Om5vbmUiCiAgICAgICBkPSJtIDEzLDEwMDEuMzYyMiAzOC4xMjUsMzguMTI1IgogICAgICAgaWQ9InBhdGgzMDAyLTctNiIKICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICBzb2RpcG9kaTpub2RldHlwZXM9ImNjIiAvPgogICAgPHBhdGgKICAgICAgIHN0eWxlPSJmaWxsOm5vbmU7c3Ryb2tlOnVybCgjbGluZWFyR3JhZGllbnQzODc1KTtzdHJva2Utd2lkdGg6ODtzdHJva2UtbGluZWNhcDpzcXVhcmU7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1taXRlcmxpbWl0OjQ7c3Ryb2tlLW9wYWNpdHk6MTtzdHJva2UtZGFzaGFycmF5Om5vbmUiCiAgICAgICBkPSJNIDUxLjEyNSwxMDAxLjM2MjIgMTMsMTAzOS40ODcyIgogICAgICAgaWQ9InBhdGgzMDAyLTYtNS0yIgogICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICAgIHNvZGlwb2RpOm5vZGV0eXBlcz0iY2MiIC8+CiAgPC9nPgo8L3N2Zz4K
"""
un_dock_b64=\
"""

"""
minimize_b64=\
"""
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhLS0gQ3JlYXRlZCB3aXRoIElua3NjYXBlIChodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy8pIC0tPgoKPHN2ZwogICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgIHhtbG5zOmNjPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyMiCiAgIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyIKICAgeG1sbnM6c3ZnPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICB4bWxuczpzb2RpcG9kaT0iaHR0cDovL3NvZGlwb2RpLnNvdXJjZWZvcmdlLm5ldC9EVEQvc29kaXBvZGktMC5kdGQiCiAgIHhtbG5zOmlua3NjYXBlPSJodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy9uYW1lc3BhY2VzL2lua3NjYXBlIgogICB3aWR0aD0iNjRweCIKICAgaGVpZ2h0PSI2NHB4IgogICBpZD0ic3ZnMjk4NSIKICAgdmVyc2lvbj0iMS4xIgogICBpbmtzY2FwZTp2ZXJzaW9uPSIwLjQ4LjQgcjk5MzkiCiAgIHNvZGlwb2RpOmRvY25hbWU9Im1pbmltaXplLnN2ZyI+CiAgPGRlZnMKICAgICBpZD0iZGVmczI5ODciIC8+CiAgPHNvZGlwb2RpOm5hbWVkdmlldwogICAgIGlkPSJiYXNlIgogICAgIHBhZ2Vjb2xvcj0iI2ZmZmZmZiIKICAgICBib3JkZXJjb2xvcj0iIzY2NjY2NiIKICAgICBib3JkZXJvcGFjaXR5PSIxLjAiCiAgICAgaW5rc2NhcGU6cGFnZW9wYWNpdHk9IjAuMCIKICAgICBpbmtzY2FwZTpwYWdlc2hhZG93PSIyIgogICAgIGlua3NjYXBlOnpvb209IjUuMDk2ODMxMiIKICAgICBpbmtzY2FwZTpjeD0iLTU5Ljk3Mjg4NSIKICAgICBpbmtzY2FwZTpjeT0iMTYuMTkzNDEzIgogICAgIGlua3NjYXBlOmN1cnJlbnQtbGF5ZXI9ImxheWVyMSIKICAgICBzaG93Z3JpZD0idHJ1ZSIKICAgICBpbmtzY2FwZTpkb2N1bWVudC11bml0cz0icHgiCiAgICAgaW5rc2NhcGU6Z3JpZC1iYm94PSJ0cnVlIgogICAgIGlua3NjYXBlOndpbmRvdy13aWR0aD0iMjU2MCIKICAgICBpbmtzY2FwZTp3aW5kb3ctaGVpZ2h0PSIxMzYxIgogICAgIGlua3NjYXBlOndpbmRvdy14PSItOSIKICAgICBpbmtzY2FwZTp3aW5kb3cteT0iLTkiCiAgICAgaW5rc2NhcGU6d2luZG93LW1heGltaXplZD0iMSIKICAgICBpbmtzY2FwZTpzbmFwLWJib3g9InRydWUiCiAgICAgaW5rc2NhcGU6c25hcC1ub2Rlcz0iZmFsc2UiPgogICAgPGlua3NjYXBlOmdyaWQKICAgICAgIHR5cGU9Inh5Z3JpZCIKICAgICAgIGlkPSJncmlkMjk4NyIKICAgICAgIGVtcHNwYWNpbmc9IjIiCiAgICAgICB2aXNpYmxlPSJ0cnVlIgogICAgICAgZW5hYmxlZD0idHJ1ZSIKICAgICAgIHNuYXB2aXNpYmxlZ3JpZGxpbmVzb25seT0idHJ1ZSIgLz4KICA8L3NvZGlwb2RpOm5hbWVkdmlldz4KICA8bWV0YWRhdGEKICAgICBpZD0ibWV0YWRhdGEyOTkwIj4KICAgIDxyZGY6UkRGPgogICAgICA8Y2M6V29yawogICAgICAgICByZGY6YWJvdXQ9IiI+CiAgICAgICAgPGRjOmZvcm1hdD5pbWFnZS9zdmcreG1sPC9kYzpmb3JtYXQ+CiAgICAgICAgPGRjOnR5cGUKICAgICAgICAgICByZGY6cmVzb3VyY2U9Imh0dHA6Ly9wdXJsLm9yZy9kYy9kY21pdHlwZS9TdGlsbEltYWdlIiAvPgogICAgICAgIDxkYzp0aXRsZSAvPgogICAgICAgIDxkYzpjcmVhdG9yPgogICAgICAgICAgPGNjOkFnZW50PgogICAgICAgICAgICA8ZGM6dGl0bGU+W3lvcmlrdmFuaGF2cmVdPC9kYzp0aXRsZT4KICAgICAgICAgIDwvY2M6QWdlbnQ+CiAgICAgICAgPC9kYzpjcmVhdG9yPgogICAgICAgIDxkYzp0aXRsZT5BcmNoX1NlY3Rpb25QbGFuZV9UcmVlPC9kYzp0aXRsZT4KICAgICAgICA8ZGM6ZGF0ZT4yMDExLTEyLTA2PC9kYzpkYXRlPgogICAgICAgIDxkYzpyZWxhdGlvbj5odHRwOi8vd3d3LmZyZWVjYWR3ZWIub3JnL3dpa2kvaW5kZXgucGhwP3RpdGxlPUFydHdvcms8L2RjOnJlbGF0aW9uPgogICAgICAgIDxkYzpwdWJsaXNoZXI+CiAgICAgICAgICA8Y2M6QWdlbnQ+CiAgICAgICAgICAgIDxkYzp0aXRsZT5GcmVlQ0FEPC9kYzp0aXRsZT4KICAgICAgICAgIDwvY2M6QWdlbnQ+CiAgICAgICAgPC9kYzpwdWJsaXNoZXI+CiAgICAgICAgPGRjOmlkZW50aWZpZXI+RnJlZUNBRC9zcmMvTW9kL0FyY2gvUmVzb3VyY2VzL2ljb25zL0FyY2hfU2VjdGlvblBsYW5lX1RyZWUuc3ZnPC9kYzppZGVudGlmaWVyPgogICAgICAgIDxkYzpyaWdodHM+CiAgICAgICAgICA8Y2M6QWdlbnQ+CiAgICAgICAgICAgIDxkYzp0aXRsZT5GcmVlQ0FEIExHUEwyKzwvZGM6dGl0bGU+CiAgICAgICAgICA8L2NjOkFnZW50PgogICAgICAgIDwvZGM6cmlnaHRzPgogICAgICAgIDxjYzpsaWNlbnNlPmh0dHBzOi8vd3d3LmdudS5vcmcvY29weWxlZnQvbGVzc2VyLmh0bWw8L2NjOmxpY2Vuc2U+CiAgICAgICAgPGRjOmNvbnRyaWJ1dG9yPgogICAgICAgICAgPGNjOkFnZW50PgogICAgICAgICAgICA8ZGM6dGl0bGU+W2Fncnlzb25dIEFsZXhhbmRlciBHcnlzb248L2RjOnRpdGxlPgogICAgICAgICAgPC9jYzpBZ2VudD4KICAgICAgICA8L2RjOmNvbnRyaWJ1dG9yPgogICAgICA8L2NjOldvcms+CiAgICA8L3JkZjpSREY+CiAgPC9tZXRhZGF0YT4KICA8ZwogICAgIGlkPSJsYXllcjEiCiAgICAgaW5rc2NhcGU6bGFiZWw9IkxheWVyIDEiCiAgICAgaW5rc2NhcGU6Z3JvdXBtb2RlPSJsYXllciI+CiAgICA8cGF0aAogICAgICAgc29kaXBvZGk6dHlwZT0ic3RhciIKICAgICAgIHN0eWxlPSJjb2xvcjojMDAwMDAwO2ZpbGw6Izk5OTk5OTtmaWxsLW9wYWNpdHk6MTtmaWxsLXJ1bGU6bm9uemVybztzdHJva2U6IzRkNGQ0ZDtzdHJva2Utd2lkdGg6MS41NzQ4ODIyNztzdHJva2UtbGluZWNhcDpidXR0O3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDo0O3N0cm9rZS1vcGFjaXR5OjE7c3Ryb2tlLWRhc2hhcnJheTpub25lO3N0cm9rZS1kYXNob2Zmc2V0OjA7bWFya2VyOm5vbmU7dmlzaWJpbGl0eTp2aXNpYmxlO2Rpc3BsYXk6aW5saW5lO292ZXJmbG93OnZpc2libGU7ZW5hYmxlLWJhY2tncm91bmQ6YWNjdW11bGF0ZSIKICAgICAgIGlkPSJwYXRoMjk5NyIKICAgICAgIHNvZGlwb2RpOnNpZGVzPSIzIgogICAgICAgc29kaXBvZGk6Y3g9IjIyIgogICAgICAgc29kaXBvZGk6Y3k9IjE3LjA5MDkwOCIKICAgICAgIHNvZGlwb2RpOnIxPSIyMC40MzI1MTIiCiAgICAgICBzb2RpcG9kaTpyMj0iMTAuMjE2MjU3IgogICAgICAgc29kaXBvZGk6YXJnMT0iMi4wOTQzOTUxIgogICAgICAgc29kaXBvZGk6YXJnMj0iMy4xNDE1OTI3IgogICAgICAgaW5rc2NhcGU6ZmxhdHNpZGVkPSJ0cnVlIgogICAgICAgaW5rc2NhcGU6cm91bmRlZD0iMCIKICAgICAgIGlua3NjYXBlOnJhbmRvbWl6ZWQ9IjAiCiAgICAgICBkPSJtIDExLjc4Mzc0NCwzNC43ODU5ODMgMCwtMzUuMzkwMTQ5NjMgMzAuNjQ4NzY4LDE3LjY5NTA3NDYzIHoiCiAgICAgICB0cmFuc2Zvcm09Im1hdHJpeCgwLDAuNTk3OTI3MDMsMS4xNDcyNDA3LDAsMTIuMzkyNjE0LDIxLjYwNjM2NCkiCiAgICAgICBpbmtzY2FwZTp0cmFuc2Zvcm0tY2VudGVyLXk9IjMuMDU0Mjg1NyIgLz4KICA8L2c+Cjwvc3ZnPgo=
"""
Caliper_b64=\
"""
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjxzdmcKICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICB4bWxuczpjYz0iaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbnMjIgogICB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiCiAgIHhtbG5zOnN2Zz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgeG1sbnM6c29kaXBvZGk9Imh0dHA6Ly9zb2RpcG9kaS5zb3VyY2Vmb3JnZS5uZXQvRFREL3NvZGlwb2RpLTAuZHRkIgogICB4bWxuczppbmtzY2FwZT0iaHR0cDovL3d3dy5pbmtzY2FwZS5vcmcvbmFtZXNwYWNlcy9pbmtzY2FwZSIKICAgaGVpZ2h0PSIyNiIKICAgd2lkdGg9IjI2IgogICB2ZXJzaW9uPSIxLjEiCiAgIGlkPSJzdmcyIgogICBpbmtzY2FwZTp2ZXJzaW9uPSIwLjkyLjAgcjE1Mjk5IgogICBzb2RpcG9kaTpkb2NuYW1lPSJDYWxpcGVyLnN2ZyI+CiAgPG1ldGFkYXRhCiAgICAgaWQ9Im1ldGFkYXRhNTAiPgogICAgPHJkZjpSREY+CiAgICAgIDxjYzpXb3JrCiAgICAgICAgIHJkZjphYm91dD0iIj4KICAgICAgICA8ZGM6Zm9ybWF0PmltYWdlL3N2Zyt4bWw8L2RjOmZvcm1hdD4KICAgICAgICA8ZGM6dHlwZQogICAgICAgICAgIHJkZjpyZXNvdXJjZT0iaHR0cDovL3B1cmwub3JnL2RjL2RjbWl0eXBlL1N0aWxsSW1hZ2UiIC8+CiAgICAgICAgPGRjOnRpdGxlIC8+CiAgICAgIDwvY2M6V29yaz4KICAgIDwvcmRmOlJERj4KICA8L21ldGFkYXRhPgogIDxzb2RpcG9kaTpuYW1lZHZpZXcKICAgICBwYWdlY29sb3I9IiNmZmZmZmYiCiAgICAgYm9yZGVyY29sb3I9IiM2NjY2NjYiCiAgICAgYm9yZGVyb3BhY2l0eT0iMSIKICAgICBvYmplY3R0b2xlcmFuY2U9IjEwIgogICAgIGdyaWR0b2xlcmFuY2U9IjEwIgogICAgIGd1aWRldG9sZXJhbmNlPSIxMCIKICAgICBpbmtzY2FwZTpwYWdlb3BhY2l0eT0iMCIKICAgICBpbmtzY2FwZTpwYWdlc2hhZG93PSIyIgogICAgIGlua3NjYXBlOndpbmRvdy13aWR0aD0iMTM2NCIKICAgICBpbmtzY2FwZTp3aW5kb3ctaGVpZ2h0PSI3MjkiCiAgICAgaWQ9Im5hbWVkdmlldzQ4IgogICAgIHNob3dncmlkPSJ0cnVlIgogICAgIGlua3NjYXBlOnpvb209IjIxLjA3NjkyMyIKICAgICBpbmtzY2FwZTpjeD0iMTMiCiAgICAgaW5rc2NhcGU6Y3k9IjE0Ljg5NzgxIgogICAgIGlua3NjYXBlOndpbmRvdy14PSIwIgogICAgIGlua3NjYXBlOndpbmRvdy15PSIxOCIKICAgICBpbmtzY2FwZTp3aW5kb3ctbWF4aW1pemVkPSIwIgogICAgIGlua3NjYXBlOmN1cnJlbnQtbGF5ZXI9InN2ZzIiCiAgICAgaW5rc2NhcGU6c25hcC10by1ndWlkZXM9ImZhbHNlIgogICAgIGlua3NjYXBlOnNuYXAtZ3JpZHM9InRydWUiCiAgICAgc2hvd2d1aWRlcz0idHJ1ZSIKICAgICBpbmtzY2FwZTpndWlkZS1iYm94PSJ0cnVlIgogICAgIGlua3NjYXBlOm1lYXN1cmUtc3RhcnQ9IjUsMTkiCiAgICAgaW5rc2NhcGU6bWVhc3VyZS1lbmQ9IjE0LDEyIj4KICAgIDxpbmtzY2FwZTpncmlkCiAgICAgICB0eXBlPSJ4eWdyaWQiCiAgICAgICBpZD0iZ3JpZDQ0OTYiIC8+CiAgPC9zb2RpcG9kaTpuYW1lZHZpZXc+CiAgPGRlZnMKICAgICBpZD0iZGVmczQiIC8+CiAgPHBhdGgKICAgICBzdHlsZT0iZmlsbDojYzhiZWI3O2ZpbGwtcnVsZTpldmVub2RkO3N0cm9rZTojMWExYTFhO3N0cm9rZS13aWR0aDoxcHg7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1vcGFjaXR5OjEiCiAgICAgZD0ibSAyNi41LDI3LjUgLTE5LC0xOCAtNiw2IC0xLC0xIDQsLTggdiAwIGwgNSwtNSAxLDEgNCwtMiAxLDEgLTMsMyAxNCwxNCIKICAgICBpZD0icGF0aDQ0OTgiCiAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICBzb2RpcG9kaTpub2RldHlwZXM9ImNjY2NjY2NjY2NjYyIKICAgICBpbmtzY2FwZTpleHBvcnQteGRwaT0iMTEzLjEyMzA1IgogICAgIGlua3NjYXBlOmV4cG9ydC15ZHBpPSIxMTMuMTIzMDUiIC8+CiAgPHBhdGgKICAgICBzdHlsZT0iZmlsbDojYzhiZWI3O2ZpbGwtcnVsZTpldmVub2RkO3N0cm9rZTojMWExYTFhO3N0cm9rZS13aWR0aDoxcHg7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1vcGFjaXR5OjEiCiAgICAgZD0ibSAxNiw5IDMuNSwtMy41IDEsMSAtMSwzIDUuNSw1LjUgLTEuNSwxLjUgeiIKICAgICBpZD0icGF0aDQ1MDIiCiAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICBzb2RpcG9kaTpub2RldHlwZXM9ImNjY2NjY2MiCiAgICAgaW5rc2NhcGU6ZXhwb3J0LXhkcGk9IjExMy4xMjMwNSIKICAgICBpbmtzY2FwZTpleHBvcnQteWRwaT0iMTEzLjEyMzA1IiAvPgogIDxwYXRoCiAgICAgc3R5bGU9ImZpbGw6I2YyZjJmMjtmaWxsLXJ1bGU6ZXZlbm9kZDtzdHJva2U6IzFhMWExYTtzdHJva2Utd2lkdGg6MXB4O3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjptaXRlcjtzdHJva2Utb3BhY2l0eToxIgogICAgIGQ9Im0gMTAuNSwxMS41IDMsLTMiCiAgICAgaWQ9InBhdGg0NTA0IgogICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgc29kaXBvZGk6bm9kZXR5cGVzPSJjYyIKICAgICBpbmtzY2FwZTpleHBvcnQteGRwaT0iMTEzLjEyMzA1IgogICAgIGlua3NjYXBlOmV4cG9ydC15ZHBpPSIxMTMuMTIzMDUiIC8+CiAgPHBhdGgKICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgIGlkPSJwYXRoNDUwNiIKICAgICBkPSJtIDE0LDE0IDEuNSwtMS41IgogICAgIHN0eWxlPSJmaWxsOiNmMmYyZjI7ZmlsbC1ydWxlOmV2ZW5vZGQ7c3Ryb2tlOiMxYTFhMWE7c3Ryb2tlLXdpZHRoOjFweDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46bWl0ZXI7c3Ryb2tlLW9wYWNpdHk6MSIKICAgICBzb2RpcG9kaTpub2RldHlwZXM9ImNjIgogICAgIGlua3NjYXBlOmV4cG9ydC14ZHBpPSIxMTMuMTIzMDUiCiAgICAgaW5rc2NhcGU6ZXhwb3J0LXlkcGk9IjExMy4xMjMwNSIgLz4KICA8cGF0aAogICAgIHNvZGlwb2RpOm5vZGV0eXBlcz0iY2MiCiAgICAgc3R5bGU9ImZpbGw6I2YyZjJmMjtmaWxsLXJ1bGU6ZXZlbm9kZDtzdHJva2U6IzFhMWExYTtzdHJva2Utd2lkdGg6MXB4O3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjptaXRlcjtzdHJva2Utb3BhY2l0eToxIgogICAgIGQ9Im0gMTcsMTcgMS41LC0xLjUiCiAgICAgaWQ9InBhdGg0NTA4IgogICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgaW5rc2NhcGU6ZXhwb3J0LXhkcGk9IjExMy4xMjMwNSIKICAgICBpbmtzY2FwZTpleHBvcnQteWRwaT0iMTEzLjEyMzA1IiAvPgogIDxwYXRoCiAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICBpZD0icGF0aDQ1MTAiCiAgICAgZD0ibSAxOS41LDIwLjUgMiwtMiIKICAgICBzdHlsZT0iZmlsbDojZjJmMmYyO2ZpbGwtcnVsZTpldmVub2RkO3N0cm9rZTojMWExYTFhO3N0cm9rZS13aWR0aDoxcHg7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1vcGFjaXR5OjEiCiAgICAgc29kaXBvZGk6bm9kZXR5cGVzPSJjYyIKICAgICBpbmtzY2FwZTpleHBvcnQteGRwaT0iMTEzLjEyMzA1IgogICAgIGlua3NjYXBlOmV4cG9ydC15ZHBpPSIxMTMuMTIzMDUiIC8+CiAgPHBhdGgKICAgICBzb2RpcG9kaTpub2RldHlwZXM9ImNjIgogICAgIHN0eWxlPSJmaWxsOiNmMmYyZjI7ZmlsbC1ydWxlOmV2ZW5vZGQ7c3Ryb2tlOiMxYTFhMWE7c3Ryb2tlLXdpZHRoOjFweDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46bWl0ZXI7c3Ryb2tlLW9wYWNpdHk6MSIKICAgICBkPSJtIDIyLjUsMjMuNSAyLC0yIgogICAgIGlkPSJwYXRoNDUyMCIKICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgIGlua3NjYXBlOmV4cG9ydC14ZHBpPSIxMTMuMTIzMDUiCiAgICAgaW5rc2NhcGU6ZXhwb3J0LXlkcGk9IjExMy4xMjMwNSIgLz4KICA8cGF0aAogICAgIHN0eWxlPSJmaWxsOiNjOGJlYjc7ZmlsbC1ydWxlOmV2ZW5vZGQ7c3Ryb2tlOiMxYTFhMWE7c3Ryb2tlLXdpZHRoOjFweDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW9wYWNpdHk6MSIKICAgICBkPSJtIDQuNSwxOS41IDcuNSwtNyA4LDggLTIsMiAtNSwtNSAtNy41LDMgeiIKICAgICBpZD0icGF0aDQ1MDAiCiAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICBzb2RpcG9kaTpub2RldHlwZXM9ImNjY2NjY2MiCiAgICAgaW5rc2NhcGU6ZXhwb3J0LXhkcGk9IjExMy4xMjMwNSIKICAgICBpbmtzY2FwZTpleHBvcnQteWRwaT0iMTEzLjEyMzA1IiAvPgo8L3N2Zz4K
"""
DimensionP1_b64=\
"""

"""
DimensionP2_b64=\
"""

"""
DimensionP3_b64=\
"""

"""
AnnotationPlane_b64=\
"""

"""
Measure_Delete_b64=\
"""

"""
Center_Bbox_b64=\
"""

"""
Center_Mass_b64=\
"""

"""
Snap_Options_b64=\
"""

"""
Dim_Radius_b64=\
"""

"""
Dim_Length_b64=\
"""

"""
Dim_Angle_b64=\
"""

"""
Dim_Parallel_b64=\
"""

"""
help_b64=\
"""

"""
###############################################


##############################################################
global initial_placement, last_selection
global moving, rotating
global objs_moved, plc_moved
global double_click_dly, inv_view, added_dim


#init
#initial_placement = FreeCAD.Placement(FreeCAD.Vector(0,0,0), FreeCAD.Rotation(0,0,0), FreeCAD.Vector(0,0,0)) #Placement [Pos=(0,0,0), Yaw-Pitch-Roll=(0,0,0)]
initial_placement = []
moving = [] #[FreeCAD.Vector(0,0,0)]
rotating = [] #[0, FreeCAD.Vector(0,0,0), FreeCAD.Vector(0,0,0)]
objs_moved = []
plc_moved = []
double_click_dly = 2000  #delay for considering double click on a Face View
inv_view = False
posz=(0.0,0.0,0.0)
#Draft.rotate(objs[j],-rot_angle,rot_center,rot_axis)
#rotating=[rot_angle,rot_center,rot_axis]

last_selection = []
added_dim = []

#################################################################

def say(msg):
    FreeCAD.Console.PrintMessage(msg)
    FreeCAD.Console.PrintMessage('\n')

def sayw(msg):
    FreeCAD.Console.PrintWarning(msg)
    FreeCAD.Console.PrintWarning('\n')

def sayerr(msg):
    FreeCAD.Console.PrintError(msg)
    FreeCAD.Console.PrintWarning('\n')

def make_string(input):
    if (sys.version_info > (3, 0)):  #py3
        if isinstance(input, str):
            return input
        else:
            input =  input.encode('utf-8')
            return input
    else:  #py2
        if type(input) == unicode:
            input =  input.encode('utf-8')
            return input
        else:
            return input

sayw("Caliper version "+str(__version__))

global pointsDirection     ;pointsDirection = []     # tableau direction store the coordinates of first line (for deplacement)
global Direction_Distance  ;Direction_Distance = 0.1 # step precision deplacement here 0.1 mm
global value              ;value          = 0.0
#global ui                  ;ui              = ""
global selobject           ;selobject       = ""
global sel                 ;sel             = ""

#class Ui_DockWidget(object):
# Form implementation generated from reading ui file 'C:\Cad\Progetti_K\3D-FreeCad-tools\icons-new\measure-tool-docked-v1.1.ui'
#
# Created: Sat Oct 07 22:14:50 2017
#      by: pyside-uic 0.2.15 running on PySide 1.2.2
#
# WARNING! All changes made in this file will be lost!

#from PySide import QtCore, QtGui

###############################################################################################################
### new dock widget
### add def link inside class
#    def link(self, linkStr):
#        QtGui.QDesktopServices.openUrl(QtCore.QUrl(linkStr))

#class Ui_DockWidget(object):
#    def link(self, linkStr):
#        #QtGui.QDesktopServices.openUrl(QtCore.QUrl(linkStr))
#        try:
#            QtGui.QDesktopServices.openUrl(QtCore.QUrl(linkStr))  #workaround Qt5 waiting for PySide2
#        except:
#            #QtGui.QDesktopServices.openUrl(QtCore.QUrl(linkStr.fromLocalFile()))
#            pass

class Ui_DockWidget(object):
    def setupUi(self, DockWidget):
        DockWidget.setObjectName("DockWidget")
        DockWidget.resize(416, 358)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("Caliper.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        DockWidget.setWindowIcon(icon)
        DockWidget.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Measure Tools"))
        DockWidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        DockWidget.setFeatures(QtGui.QDockWidget.DockWidgetFloatable|QtGui.QDockWidget.DockWidgetMovable)
        DockWidget.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea|QtCore.Qt.RightDockWidgetArea)
        DockWidget.setWindowTitle(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Measure Tools"))
        self.dockWidgetContents = QtGui.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.horizontalLayoutWidget = QtGui.QWidget(self.dockWidgetContents)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(5, 0, 100, 36))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtGui.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setSpacing(2)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.dock_float = QtGui.QPushButton(self.horizontalLayoutWidget)
        self.dock_float.setMaximumSize(QtCore.QSize(28, 28))
        self.dock_float.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "un-dock (floating)"))
        self.dock_float.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("un_dock.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.dock_float.setIcon(icon1)
        self.dock_float.setIconSize(QtCore.QSize(16, 16))
        self.dock_float.setObjectName("dock_float")
        self.horizontalLayout.addWidget(self.dock_float)
        self.dock_minimize = QtGui.QPushButton(self.horizontalLayoutWidget)
        self.dock_minimize.setMaximumSize(QtCore.QSize(28, 28))
        self.dock_minimize.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "minimize"))
        self.dock_minimize.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("minimize.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.dock_minimize.setIcon(icon2)
        self.dock_minimize.setIconSize(QtCore.QSize(24, 24))
        self.dock_minimize.setObjectName("dock_minimize")
        self.horizontalLayout.addWidget(self.dock_minimize)
        self.close = QtGui.QPushButton(self.horizontalLayoutWidget)
        self.close.setMaximumSize(QtCore.QSize(28, 28))
        self.close.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "close"))
        self.close.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("closeW.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.close.setIcon(icon3)
        self.close.setIconSize(QtCore.QSize(24, 24))
        self.close.setObjectName("close")
        self.horizontalLayout.addWidget(self.close)
        self.Label = QtGui.QLabel(self.dockWidgetContents)
        self.Label.setGeometry(QtCore.QRect(110, 5, 186, 31))
        self.Label.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Measure Tools\nClick on Measure button\nto start measuring"))
        self.Label.setText(QtCore.QT_TRANSLATE_NOOP("Manipulator", "<b>Click on Measure button</b><br>to start measuring"))
        self.Label.setObjectName("Label")
        self.Controls_Group = QtGui.QGroupBox(self.dockWidgetContents)
        self.Controls_Group.setGeometry(QtCore.QRect(3, 35, 295, 169))
        self.Controls_Group.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Controls"))
        self.Controls_Group.setTitle(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Controls"))
        self.Controls_Group.setObjectName("Controls_Group")
        self.gridLayoutWidget_6 = QtGui.QWidget(self.Controls_Group)
        self.gridLayoutWidget_6.setGeometry(QtCore.QRect(5, 16, 287, 65))
        self.gridLayoutWidget_6.setObjectName("gridLayoutWidget_6")
        self.gridLayout_8 = QtGui.QGridLayout(self.gridLayoutWidget_6)
        self.gridLayout_8.setSizeConstraint(QtGui.QLayout.SetDefaultConstraint)
        self.gridLayout_8.setSpacing(2)
        self.gridLayout_8.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.Measure = QtGui.QPushButton(self.gridLayoutWidget_6)
        self.Measure.setMinimumSize(QtCore.QSize(36, 36))
        self.Measure.setMaximumSize(QtCore.QSize(48, 48))
        self.Measure.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Measure Button\nClick Measure to start measuring"))
        self.Measure.setText("")
        self.Measure.setIcon(icon)
        self.Measure.setIconSize(QtCore.QSize(32, 32))
        self.Measure.setCheckable(True)
        self.Measure.setChecked(False)
        self.Measure.setObjectName("Measure")
        self.gridLayout_8.addWidget(self.Measure, 0, 0, 1, 1)
        self.DimensionP3 = QtGui.QPushButton(self.gridLayoutWidget_6)
        self.DimensionP3.setEnabled(False)
        self.DimensionP3.setMinimumSize(QtCore.QSize(36, 36))
        self.DimensionP3.setMaximumSize(QtCore.QSize(48, 48))
        self.DimensionP3.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Dimension position"))
        self.DimensionP3.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("DimensionP3.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.DimensionP3.setIcon(icon4)
        self.DimensionP3.setIconSize(QtCore.QSize(32, 32))
        self.DimensionP3.setCheckable(False)
        self.DimensionP3.setChecked(False)
        self.DimensionP3.setObjectName("DimensionP3")
        self.gridLayout_8.addWidget(self.DimensionP3, 0, 4, 1, 1)
        self.CleanDist = QtGui.QPushButton(self.gridLayoutWidget_6)
        self.CleanDist.setMinimumSize(QtCore.QSize(36, 36))
        self.CleanDist.setMaximumSize(QtCore.QSize(48, 48))
        self.CleanDist.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Clean Measures"))
        self.CleanDist.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("Clean.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.CleanDist.setIcon(icon5)
        self.CleanDist.setIconSize(QtCore.QSize(32, 32))
        self.CleanDist.setCheckable(True)
        self.CleanDist.setChecked(False)
        self.CleanDist.setObjectName("CleanDist")
        self.gridLayout_8.addWidget(self.CleanDist, 0, 5, 1, 1)
        self.DimensionP1 = QtGui.QPushButton(self.gridLayoutWidget_6)
        self.DimensionP1.setEnabled(False)
        self.DimensionP1.setMinimumSize(QtCore.QSize(36, 36))
        self.DimensionP1.setMaximumSize(QtCore.QSize(48, 48))
        self.DimensionP1.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "First Element"))
        self.DimensionP1.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("DimensionP1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.DimensionP1.setIcon(icon6)
        self.DimensionP1.setIconSize(QtCore.QSize(32, 32))
        self.DimensionP1.setCheckable(False)
        self.DimensionP1.setChecked(False)
        self.DimensionP1.setObjectName("DimensionP1")
        self.gridLayout_8.addWidget(self.DimensionP1, 0, 1, 1, 1)
        self.Help_Caliper = QtGui.QPushButton(self.gridLayoutWidget_6)
        self.Help_Caliper.setMinimumSize(QtCore.QSize(36, 36))
        self.Help_Caliper.setMaximumSize(QtCore.QSize(48, 48))
        self.Help_Caliper.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Help on Caliper"))
        self.Help_Caliper.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("help.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Help_Caliper.setIcon(icon7)
        self.Help_Caliper.setIconSize(QtCore.QSize(24, 24))
        self.Help_Caliper.setCheckable(False)
        self.Help_Caliper.setChecked(False)
        self.Help_Caliper.setObjectName("Help_Caliper")
        self.gridLayout_8.addWidget(self.Help_Caliper, 0, 6, 1, 1)
        self.DimensionP2 = QtGui.QPushButton(self.gridLayoutWidget_6)
        self.DimensionP2.setEnabled(False)
        self.DimensionP2.setMinimumSize(QtCore.QSize(36, 36))
        self.DimensionP2.setMaximumSize(QtCore.QSize(48, 48))
        self.DimensionP2.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Second Element"))
        self.DimensionP2.setText("")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("DimensionP2.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.DimensionP2.setIcon(icon8)
        self.DimensionP2.setIconSize(QtCore.QSize(32, 32))
        self.DimensionP2.setCheckable(False)
        self.DimensionP2.setChecked(False)
        self.DimensionP2.setObjectName("DimensionP2")
        self.gridLayout_8.addWidget(self.DimensionP2, 0, 2, 1, 1)
        self.APlane = QtGui.QPushButton(self.gridLayoutWidget_6)
        self.APlane.setEnabled(False)
        self.APlane.setMinimumSize(QtCore.QSize(36, 36))
        self.APlane.setMaximumSize(QtCore.QSize(48, 48))
        self.APlane.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Annotation Plane"))
        self.APlane.setText("")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("AnnPlane.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.APlane.setIcon(icon9)
        self.APlane.setIconSize(QtCore.QSize(32, 32))
        self.APlane.setCheckable(False)
        self.APlane.setChecked(False)
        self.APlane.setObjectName("APlane")
        self.gridLayout_8.addWidget(self.APlane, 0, 3, 1, 1)
        self.rbRadius = QtGui.QRadioButton(self.Controls_Group)
        self.rbRadius.setGeometry(QtCore.QRect(6, 120, 64, 32))
        self.rbRadius.setMinimumSize(QtCore.QSize(64, 32))
        self.rbRadius.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Get Radius of Arc or Circle"))
        self.rbRadius.setText("")
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("Radius.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbRadius.setIcon(icon10)
        self.rbRadius.setIconSize(QtCore.QSize(28, 28))
        self.rbRadius.setChecked(False)
        self.rbRadius.setObjectName("rbRadius")
        self.rbAngle = QtGui.QRadioButton(self.Controls_Group)
        self.rbAngle.setGeometry(QtCore.QRect(144, 120, 64, 33))
        self.rbAngle.setMinimumSize(QtCore.QSize(64, 32))
        self.rbAngle.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Get Angle"))
        self.rbAngle.setText("")
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("Angle.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbAngle.setIcon(icon11)
        self.rbAngle.setIconSize(QtCore.QSize(32, 32))
        self.rbAngle.setChecked(False)
        self.rbAngle.setObjectName("rbAngle")
        self.rbLength = QtGui.QRadioButton(self.Controls_Group)
        self.rbLength.setGeometry(QtCore.QRect(74, 120, 64, 32))
        self.rbLength.setMinimumSize(QtCore.QSize(64, 32))
        self.rbLength.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Get Length of Edge"))
        self.rbLength.setText("")
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("Length.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)zz
        self.rbLength.setIcon(icon12)
        self.rbLength.setIconSize(QtCore.QSize(32, 32))
        self.rbLength.setChecked(False)
        self.rbLength.setObjectName("rbLength")
        self.rbSnap = QtGui.QRadioButton(self.Controls_Group)
        self.rbSnap.setGeometry(QtCore.QRect(6, 86, 109, 32))
        self.rbSnap.setMinimumSize(QtCore.QSize(64, 32))
        self.rbSnap.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Snap to EndPoint, MiddlePoint, Center"))
        self.rbSnap.setText("")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap("Snap_Opt.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbSnap.setIcon(icon13)
        self.rbSnap.setIconSize(QtCore.QSize(78, 26))
        self.rbSnap.setChecked(True)
        self.rbSnap.setObjectName("rbSnap")
        self.rbBbox = QtGui.QRadioButton(self.Controls_Group)
        self.rbBbox.setGeometry(QtCore.QRect(122, 84, 67, 32))
        self.rbBbox.setMinimumSize(QtCore.QSize(64, 32))
        self.rbBbox.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Center of BoundingBox"))
        self.rbBbox.setText("")
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap("CenterBBox.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbBbox.setIcon(icon14)
        self.rbBbox.setIconSize(QtCore.QSize(28, 28))
        self.rbBbox.setChecked(False)
        self.rbBbox.setObjectName("rbBbox")
        self.rbMass = QtGui.QRadioButton(self.Controls_Group)
        self.rbMass.setGeometry(QtCore.QRect(186, 84, 67, 32))
        self.rbMass.setMinimumSize(QtCore.QSize(64, 32))
        self.rbMass.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Center of Mass"))
        self.rbMass.setText("")
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap("CenterOfMass.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbMass.setIcon(icon15)
        self.rbMass.setIconSize(QtCore.QSize(28, 28))
        self.rbMass.setChecked(False)
        self.rbMass.setObjectName("rbMass")
        self.cbAPlane = QtGui.QCheckBox(self.Controls_Group)
        self.cbAPlane.setGeometry(QtCore.QRect(230, 120, 64, 32))
        self.cbAPlane.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Use Annotation Plane"))
        self.cbAPlane.setText("")
        self.cbAPlane.setIcon(icon9)
        self.cbAPlane.setIconSize(QtCore.QSize(32, 32))
        self.cbAPlane.setObjectName("cbAPlane")
        self.rbParallel = QtGui.QRadioButton(self.dockWidgetContents)
        self.rbParallel.setGeometry(QtCore.QRect(340, 286, 64, 32))
        self.rbParallel.setMinimumSize(QtCore.QSize(64, 32))
        self.rbParallel.setToolTip(QtCore.QT_TRANSLATE_NOOP("Manipulator", "Get Distance\nbetween Parallel Edges"))
        self.rbParallel.setText("")
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap("Distance_Parallel.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbParallel.setIcon(icon16)
        self.rbParallel.setIconSize(QtCore.QSize(32, 32))
        self.rbParallel.setChecked(False)
        self.rbParallel.setObjectName("rbParallel")
        DockWidget.setWidget(self.dockWidgetContents)

###############################################################################################################
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(closeW_b64))
        self.close.setIconSize(QtCore.QSize(btn_sm_sizeX,btn_sm_sizeY))
        self.close.setIcon(QtGui.QIcon(pm))
        self.close.clicked.connect(close_caliper)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(minimize_b64))
        self.dock_minimize.setIconSize(QtCore.QSize(btn_sm_sizeX,btn_sm_sizeY))
        self.dock_minimize.setIcon(QtGui.QIcon(pm))
        self.dock_minimize.clicked.connect(Cp_minimz)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(un_dock_b64))
        self.dock_float.setIconSize(QtCore.QSize(btn_sm_sizeX,btn_sm_sizeY))
        self.dock_float.setIcon(QtGui.QIcon(pm))
        self.dock_float.clicked.connect(Cp_undock)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Caliper_b64))
        self.Measure.setIconSize(QtCore.QSize(btn_sizeX,btn_sizeY))
        self.Measure.setIcon(QtGui.QIcon(pm))
        self.Measure.toggled.connect(self.onMeasure_toggled)
        # # http://www.qtcentre.org/threads/61391-QPushButton-State-(in-PyQt)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(DimensionP1_b64))
        self.DimensionP1.setIconSize(QtCore.QSize(btn_sizeX,btn_sizeY))
        self.DimensionP1.setIcon(QtGui.QIcon(pm))
        #self.DimensionP1.setEnabled(True)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(DimensionP2_b64))
        self.DimensionP2.setIconSize(QtCore.QSize(btn_sizeX,btn_sizeY))
        self.DimensionP2.setIcon(QtGui.QIcon(pm))
        #self.DimensionP2.setEnabled(True)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(DimensionP3_b64))
        self.DimensionP3.setIconSize(QtCore.QSize(btn_sizeX,btn_sizeY))
        self.DimensionP3.setIcon(QtGui.QIcon(pm))
        #self.DimensionP2.setEnabled(True)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(AnnotationPlane_b64))
        self.cbAPlane.setIconSize(QtCore.QSize(btn_sizeX,btn_sizeY))
        self.cbAPlane.setIcon(QtGui.QIcon(pm))
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(AnnotationPlane_b64))
        self.APlane.setIconSize(QtCore.QSize(btn_sizeX,btn_sizeY))
        self.APlane.setIcon(QtGui.QIcon(pm))
        #self.DimensionP2.setEnabled(True)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(help_b64))
        self.Help_Caliper.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.Help_Caliper.setIcon(QtGui.QIcon(pm))
        self.Help_Caliper.clicked.connect(self.onHelp)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Measure_Delete_b64))
        self.CleanDist.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.CleanDist.setIcon(QtGui.QIcon(pm))
        self.CleanDist.clicked.connect(self.onClean)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Center_Bbox_b64))
        self.rbBbox.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbBbox.setIcon(QtGui.QIcon(pm))
        # self.CleanDist.clicked.connect(self.onClean)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Center_Mass_b64))
        self.rbMass.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbMass.setIcon(QtGui.QIcon(pm))
        # self.CleanDist.clicked.connect(self.onClean)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Snap_Options_b64))
        self.rbSnap.setIconSize(QtCore.QSize(3*btn_md_sizeX,btn_md_sizeY))
        self.rbSnap.setIcon(QtGui.QIcon(pm))
        #self.rbSnap.clicked.connect(self.onSnap)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Dim_Radius_b64))
        self.rbRadius.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbRadius.setIcon(QtGui.QIcon(pm))
        self.rbRadius.setEnabled(True)
        #self.rbRadius.clicked.connect(self.onRuler)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Dim_Length_b64))
        self.rbLength.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbLength.setIcon(QtGui.QIcon(pm))
        #self.rbLength.setEnabled(False)
        #self.rbLength.clicked.connect(self.onRuler)
        # self.CleanDist.clicked.connect(self.onClean)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Dim_Angle_b64))
        self.rbAngle.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbAngle.setIcon(QtGui.QIcon(pm))
        self.rbAngle.setEnabled(True)
        # self.CleanDist.clicked.connect(self.onClean)
        pm = QtGui.QPixmap()
        pm.loadFromData(base64.b64decode(Dim_Parallel_b64))
        self.rbParallel.setIconSize(QtCore.QSize(btn_md_sizeX,btn_md_sizeY))
        self.rbParallel.setIcon(QtGui.QIcon(pm))
        self.rbParallel.setEnabled(False)
        # self.CleanDist.clicked.connect(self.onClean)

        #self.cbAPlane.setChecked(False)
        #self.cbAPlane.setChecked(True)
        #self.rbAngle.setChecked(True)
        #self.rbRadius.setChecked(True)

        ####

###############################################################################################################
        self.retranslateUi(DockWidget)
        QtCore.QMetaObject.connectSlotsByName(DockWidget)
        DockWidget.setTabOrder(self.dock_float, self.dock_minimize)
        DockWidget.setTabOrder(self.dock_minimize, self.close)
        DockWidget.setTabOrder(self.close, self.Measure)


## retraslateUi Qt5 compatibility #############################################################################################################
    def retranslateUi(self, DockWidget):
        pass


### ------------------------------------------------------------------------------------ ###
### ---------code to be inserted and remove from new generation------------------------- ###
### ------------------------------------------------------------------------------------ ###
###############################################################################################################
# widgets connected functions
##
    def onRuler(self):
        self.rbSnap.setChecked(False)
        self.rbBbox.setChecked(False)
        sayerr('Ruler')
##
    def onSnap(self):
        self.rbRadius.setChecked(False)
        self.rbLength.setChecked(False)
        sayerr('Snap')

##
    def onClean(self):
        global added_dim
        for d in added_dim:
            try:
                FreeCAD.ActiveDocument.removeObject(d.Name)
            except:
                pass
        if FreeCAD.ActiveDocument is not None:
            FreeCAD.ActiveDocument.recompute()
            for ob in FreeCAD.ActiveDocument.Objects:
                FreeCADGui.Selection.removeSelection(ob)
        added_dim=[]
##

    def onMeasure_toggled(self,checked):
        global selobject, sel
        global initial_placement, last_selection, objs
        global s1, DSMove_prev_Val, DSRotate_prev_Val

        #say("Move clicked")
        #Move()
        #self.MoveDial.setValue(0.0)
        #self.RotateDial.setValue(0.0)
        #self.RotateDial.setValue("{0:.2f}".format(0.0))
        #if self.Confirm_Move.isChecked:
        if FreeCAD.ActiveDocument is not None:
            if checked:
                for ob in FreeCAD.ActiveDocument.Objects:
                    FreeCADGui.Selection.removeSelection(ob)
                sayerr('starting!')
                self.rowOverride = True
                self.DimensionP1.setEnabled(True)
                self.DimensionP2.setEnabled(False)
                self.DimensionP3.setEnabled(False)
                self.cbAPlane.setEnabled(False)
                self.APlane.setEnabled(False)
                self.CleanDist.setEnabled(False)
                s1=SelObserverCaliper()
                FreeCADGui.Selection.addObserver(s1) # install resident function
            else:
                sayerr('removing observer')
                self.rowOverride = False
                self.DimensionP1.setEnabled(False)
                self.DimensionP2.setEnabled(False)
                self.DimensionP3.setEnabled(False)
                self.APlane.setEnabled(False)
                self.cbAPlane.setEnabled(True)
                self.CleanDist.setEnabled(True)
                #FreeCADGui.Selection.removeObserver(s1)
                try:
                    sayw('removing observer')
                    FreeCADGui.Selection.removeObserver(s1)   # desinstalle la fonction residente SelObserver
                except:
                    sayerr('not able to remove observer')
                    pass
                if FreeCAD.ActiveDocument is not None:
                    for obj in FreeCAD.ActiveDocument.Objects:
                        FreeCADGui.Selection.removeSelection(obj)
##
    def onHelp(self):
        msg="""<b>Caliper Tools</b><br>
        <b>Clik on Measure button</b> to start the Measurement.<br>
        Select the type of Snapping you need<br>
        and then Click on a Face, an Edge or a Vertex<br>
        to identify your measurement points.<br>
        <b>Check Annotation Plane</b> to use an Annotation Plane to place a Dimension.
        <br><b>Caliper Tools</b> work with <b>Part, App::Part</b> and <b>Body</b> objects<br>
        <font color = blue><b>Version:
        """+__version__+"""</b></font>"""
        QtGui.QApplication.restoreOverrideCursor()
        res=''
        QtGui.QApplication.restoreOverrideCursor()
        res = QtGui.QMessageBox.question(None,"Help",msg,QtGui.QMessageBox.Ok)
##

###############################################################################################################
def Cp_centerOnScreen (widg):
    '''centerOnScreen()
    Centers the window on the screen.'''
    # sayw(widg.width());sayw(widg.height())
    # sayw(widg.pos().x());sayw(widg.pos().y())
    resolution = QtGui.QDesktopWidget().screenGeometry()
    xp=(resolution.width() / 2) - sizeX/2 # - (KSUWidget.frameSize().width() / 2)
    yp=(resolution.height() / 2) - sizeY/2 # - (KSUWidget.frameSize().height() / 2))
    # xp=widg.pos().x()-sizeXMax/2;yp=widg.pos().y()#+sizeY/2
    widg.setGeometry(xp+wdszMX+10, yp, sizeX, sizeY)
##

global CPDockWidget

def Cp_singleInstance():
    app = QtGui.QApplication #QtGui.qApp
    for i in app.topLevelWidgets():
        #say (str(i.objectName()))
        if i.objectName() == "Caliper":
            say (str(i.objectName()))
            #i.close()
            #i.deleteLater()
            say ('closed')
            return False
    t=FreeCADGui.getMainWindow()
    dw=t.findChildren(QtGui.QDockWidget)
    #say( str(dw) )
    for i in dw:
        #say (str(i.objectName()))
        if str(i.objectName()) == "Caliper":
            say (str(i.objectName())+' docked')
            #i.deleteLater()
            return False
    return True
##

##############################################################

doc=FreeCAD.ActiveDocument

if Cp_singleInstance():

    CPDockWidget = QtGui.QDockWidget()          # create a new dckwidget
    CPDockWidget.ui = Ui_DockWidget()   #Ui_AlignDockWidget()           # myWidget_Ui()             # load the Ui script
    CPDockWidget.ui.setupUi(CPDockWidget) # setup the ui
    #ui = Ui_AlignDockWidget()
    #ui.setupUi(AlignDockWidget)
    #AlignDockWidget.show()

    CPDockWidget.setObjectName("Caliper")

    CPDockWidget.setFloating(True)  #undock
    CPDockWidget.resize(sizeX,sizeY)
    CPDockWidget.activateWindow()
    CPDockWidget.raise_()

    #MVDockWidget.show()

    CPDockWidget.setFeatures( QtGui.QDockWidget.DockWidgetMovable | QtGui.QDockWidget.DockWidgetFloatable) #|QtGui.QDockWidget.DockWidgetClosable )

    paramGet = FreeCAD.ParamGet("User parameter:BaseApp/Preferences/MainWindow")
    if len(paramGet.GetString("StyleSheet"))>0: #we are using a StyleSheet
        CPDockWidget.setStyleSheet('QPushButton {border-radius: 0px; padding: 1px 2px;}')

    CPmw = FreeCADGui.getMainWindow()                 # PySide # the active qt window, = the freecad window since we are inside it
    CPmw.addDockWidget(QtCore.Qt.RightDockWidgetArea,CPDockWidget)
    #MVDockWidget.show()
    Cp_undock()
    Cp_centerOnScreen(CPDockWidget)
    # use_hierarchy=CPDockWidget.ui.cbHierarchy.isChecked()


### ------------------------------------------------------------------------------------ ###

##################################################################################################
    #def removeSelection(self,document, object, element): # Delete the selected object
    #    FreeCAD.Console.PrintMessage("removeSelection"+"\n")

###################################################################################################
